SORRunner thobjects[] = new SORRunner[JGFSORBench.nthreads];
Thread th[] = new Thread[JGFSORBench.nthreads];
sync = init_sync(JGFSORBench.nthreads);

for (int i = 1; i < JGFSORBench.nthreads; i++) {
	thobjects[i] = new SORRunner(i, omega, G, num_iterations, sync);
	th[i] = new Thread(thobjects[i]);
	th[i].start();
}

thobjects[0] = new SORRunner(0, omega, G, num_iterations, sync);
thobjects[0].run();

for (int i = 1; i < JGFSORBench.nthreads; i++) {
	try {
		th[i].join();
	} catch (InterruptedException e) {
	}
}

int ilow, iupper, slice, tslice, ttslice;

tslice = (Mm1) / 2;
ttslice = (tslice + JGFSORBench.nthreads - 1) / JGFSORBench.nthreads;
slice = ttslice * 2;

ilow = id * slice + 1;
iupper = ((id + 1) * slice) + 1;
if (iupper > Mm1)
	iupper = Mm1 + 1;
if (id == (JGFSORBench.nthreads - 1))
	iupper = Mm1 + 1;

	// Signal this thread has done iteration
	sync[id][0]++;

	// Wait for neighbours;
	if (id > 0) {
		while (sync[id - 1][0] < sync[id][0])
			;
	}
	if (id < JGFSORBench.nthreads - 1) {
		while (sync[id + 1][0] < sync[id][0])
			;
	}
