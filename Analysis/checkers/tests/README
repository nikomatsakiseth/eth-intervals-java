How to write test cases for the Checker Framework
=================================================

This document describes how to write tests for the Checker Framework.  The
document is useful for Checker Framework maintainers, checker writers, and
bug submitters.  Users of the framework and checkers should read the manual
instead.

The testing framework for the Checker Framework is built on top of JUnit.
However, its tests are more like end-to-end integration tests than unit
tests.

A checker test case has two parts:
  1. the Java class to be compiled, and
  2. a set of expected errors.

Both parts can be expressed in one file that is stored in the folder
corresponding to the checker name, such as
checker-framework/checkers/tests/nullness/.


Writing new tests for an existing checker
=========================================

Suppose that you want to add a test for the Nullness Checker, with the
following Java class:

class MyNullnessTest {
  void method() {
    Object nullable = null;
    nullable.toString();   // should emit error
  }
}

The Nullness Checker should report an error for the dereference in line 4.
The non-localized message key for such an error is
'dereference.of.nullable'.  You could learn that by reading the Javadoc (or
the source code) for checkers.nullness.NullnessVisitor, or by creating the
test and observing the failure.

To indicate the expected failure, insert the line
  //:: (<error-message-key>)
directly preceding the expected error line.

So the final test case would be:

class MyNullnessTest {
  void method() {
    Object nullable = null;
    //:: (dereference.of.nullable)
    nullable.toString();   // should emit error
  }
}

The file may appear anywhere in or under checkers/tests/nullness.  (You may
find it useful to use separate subfolders, such as
nullness/tests/nullness/dereference .)  Each checker should have its own
folder under checkers/tests, such as checkers/tests/igj,
checkers/tests/interning, etc.


Writing Tests for New Checkers
==============================

TODO: Write this section.


Annotated JDK
=============

The tests run without the annotated JDK.
If you want to reproduce a problem that you see when using the annotated
JDK, then copy the relevant parts of the JDK into your test.
