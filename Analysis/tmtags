!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
.PHONY	/Users/niko/git/intervals-java/Analysis/Makefile	/^.PHONY: all clean compile test$/;"	targets	line:9
A	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class A extends Object {$/;"	classes	line:555
A	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class A extends Object {$/;"	classes	line:574
A	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class A extends Object<creator: this.constructor> {$/;"	classes	line:596
A	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class A extends Object<creator: this.constructor> {$/;"	classes	line:656
A	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class A<Interval a><Interval b> extends Object<creator: this.constructor> $/;"	classes	line:453
AnnotParser	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    class AnnotParser(env: TranslateEnv) extends BaseParser {$/;"	classes	line:373
Attr	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class Attr(c: String, val adj: String) {$/;"	classes	line:57
Attrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Attrs(private val s: Set[Attr]) {$/;"	classes	line:71
B	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B extends A {$/;"	classes	line:664
B1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B1 extends A {$/;"	classes	line:564
B2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B2 extends A {$/;"	classes	line:583
B3	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B3 extends A {$/;"	classes	line:604
B4	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B4 extends A {$/;"	classes	line:612
B5	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class B5 extends A {$/;"	classes	line:625
BBPC	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class BBPC extends Interval {$/;"	classes	line:1450
BadExtendsClass	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class BadExtendsClass extends Ok, Object { \/\/ ERROR intervals.superType.not.interface(Object)$/;"	classes	line:1186
BadExtendsInter	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class BadExtendsInter extends IFoo, Object { \/\/ ERROR intervals.superType.interface(IFoo)$/;"	classes	line:1180
Bar	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Bar extends Object {$/;"	classes	line:860
Bar	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Bar extends Object {$/;"	classes	line:904
Bar	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Bar<Scalar s><Interval i> extends Object {$/;"	classes	line:1084
Bar	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Bar<Scalar s><Interval i> extends Object {$/;"	classes	line:939
BaseMultiMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    abstract class BaseMultiMap[K, V, S <: BaseMultiMap[K, V, S]](val size: Int, _m: Map[K, Set[V]])$/;"	classes	line:219
BaseParser	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^abstract class BaseParser extends StandardTokenParsers {$/;"	classes	line:11
BaseSubst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^abstract class BaseSubst {$/;"	classes	line:3
Block	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Block($/;"	classes	line:208
BufferLog	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  class BufferLog extends Log with WritingToMemoryBuffer with WritingText$/;"	classes	line:218
C	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C extends B {$/;"	classes	line:671
C	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C extends Object {$/;"	classes	line:1022
C	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C extends Object {$/;"	classes	line:1053
C	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C extends Object<creator: this.constructor> {$/;"	classes	line:635
C1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C1<Lock l1> extends Object {$/;"	classes	line:1103
C2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class C2<Lock l2> extends C1 {$/;"	classes	line:1109
CLASSPATH	/Users/niko/git/intervals-java/Analysis/Makefile	/^CLASSPATH=$(subst .jar ,.jar:,${JARFILES}):${TARGETCLASSPATH}$/;"	macro	line:7
Class	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Class extends Object {$/;"	classes	line:1268
ClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ClassDecl($/;"	classes	line:125
ClassName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    case class ClassName(name: String) extends Name(name)$/;"	classes	line:111
ComputeRelations	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^abstract class ComputeRelations(prog: Prog) $/;"	classes	line:5
ConsData	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class ConsData extends Object {$/;"	classes	line:1377
Consumer	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Consumer extends Interval {$/;"	classes	line:1419
Ctor	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Ctor extends Object<creator: this.constructor> {$/;"	classes	line:217
Ctor	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Ctor extends Object<creator: this.constructor> {$/;"	classes	line:677
D	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class D<Interval a><Lock b><Lock c><Interval d> extends Object { $/;"	classes	line:1115
Data	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data extends Object {$/;"	classes	line:1016
Data	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data extends Object {$/;"	classes	line:1047
Data	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data extends Object {$/;"	classes	line:1361
Data	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data<Lock lock> extends Object<creator: this.lock> {                $/;"	classes	line:185
Data	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data<Lock lock> extends Object<creator: this.lock> {$/;"	classes	line:1199
Data1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data1 extends Object {$/;"	classes	line:957
Data2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Data2 extends Object {$/;"	classes	line:962
DataFlow	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^abstract class DataFlow[R <: Relation[ir.Path, R]]($/;"	classes	line:6
Direct	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Direct extends Object {$/;"	classes	line:967
DummyPosition	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    abstract class DummyPosition extends Position {$/;"	classes	line:43
ElementPosition	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    case class ElementPosition(elem: Element) extends DummyPosition {$/;"	classes	line:60
ElementVisitor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    class ElementVisitor extends ElementScanner6[Void, Void] {$/;"	classes	line:111
EquivMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    class EquivMap[K](size: Int, _m: Map[K, Set[K]])$/;"	classes	line:344
Error	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Error($/;"	classes	line:115
ExpError	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^case class ExpError(msg: String, args: List[String])$/;"	classes	line:11
ExtendedInit	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class ExtendedInit<Interval init> extends Object<creator: this.init> {$/;"	classes	line:729
FewerReqs	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class FewerReqs extends A$/;"	classes	line:465
FieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class FieldDecl extends Positional {$/;"	classes	line:183
FieldName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    case class FieldName(name: String) extends Name(name) {$/;"	classes	line:107
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo extends Interval {$/;"	classes	line:269
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo extends Interval {$/;"	classes	line:369
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo extends Interval {$/;"	classes	line:421
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo<Scalar s> extends Object {$/;"	classes	line:1078
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo<Scalar s> extends Object {$/;"	classes	line:933
Foo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo<Scalar s><Lock l><Interval i> extends Object {$/;"	classes	line:898
Foo1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo1 extends Object, IFoo {$/;"	classes	line:833
Foo2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Foo2 extends Object, IFoo {$/;"	classes	line:848
Ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Ghost($/;"	classes	line:272
GhostAnn	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    sealed abstract class GhostAnn$/;"	classes	line:184
GhostAnnDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    sealed case class GhostAnnDecl(f: ir.FieldName, annty: AnnotatedTypeMirror) extends GhostAnn$/;"	classes	line:186
GhostAnnValue	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    sealed case class GhostAnnValue(f: ir.FieldName, value: String) extends GhostAnn$/;"	classes	line:187
GhostFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class GhostFieldDecl($/;"	classes	line:190
Goto	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Goto($/;"	classes	line:216
HohLink	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class HohLink extends Interval {$/;"	classes	line:1228
IBar	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            interface class IBar extends Ok { \/\/ ERROR intervals.superType.not.interface(Ok)$/;"	classes	line:1168
IFoo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            interface class IFoo extends Object {$/;"	classes	line:1162
IFoo	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            interface class IFoo extends Object {$/;"	classes	line:822
ImpliedReqs	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class ImpliedReqs extends A$/;"	classes	line:492
Indirect1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Indirect1 extends Object {$/;"	classes	line:973
Indirect2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Indirect2 extends Object {$/;"	classes	line:983
Indirect3	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Indirect3 extends Interval {$/;"	classes	line:992
Indirect4	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Indirect4 extends Object {$/;"	classes	line:999
IrError	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    case class IrError(msg: String, args: Any*) $/;"	classes	line:439
JARFILES	/Users/niko/git/intervals-java/Analysis/Makefile	/^JARFILES=$(wildcard lib\/*.jar)$/;"	macro	line:5
JAVA	/Users/niko/git/intervals-java/Analysis/Makefile	/^JAVA=java$/;"	macro	line:1
JAVA_HOME	/Users/niko/git/intervals-java/Analysis/Makefile	/^	JAVA_HOME="${JAVA_HOME}" \\$/;"	macro	line:21
JAVA_OPTS	/Users/niko/git/intervals-java/Analysis/Makefile	/^	JAVA_OPTS="-cp ${CLASSPATH} -Xbootclasspath\/p:analysis\/lib\/javac-0.9.2.jar" \\$/;"	macro	line:22
Link	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Link extends Object<creator: this.constructor> {$/;"	classes	line:1207
Link	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Link extends Object<creator: this.constructor> {$/;"	classes	line:191
Linked	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Linked extends Object {$/;"	classes	line:102
Log	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^abstract class Log {$/;"	classes	line:7
LvDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class LvDecl($/;"	classes	line:176
MethodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class MethodDecl($/;"	classes	line:150
MethodName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    case class MethodName(name: String) extends Name(name)$/;"	classes	line:110
MethodSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class MethodSig($/;"	classes	line:165
Monitor	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Monitor extends Object<creator: this.constructor> {$/;"	classes	line:764
MultiMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    class MultiMap[K,V](size: Int, _m: Map[K, Set[V]])$/;"	classes	line:331
Name	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class Name(name: String) {$/;"	classes	line:99
Object	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        \/\/ if the class Object is not specified explicitly, its type is supplied$/;"	classes	line:622
Ok	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Ok extends Object, IFoo {$/;"	classes	line:1174
ParsePath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    case class ParsePath(p: ir.Path, annty: AnnotatedTypeMirror)$/;"	classes	line:371
Path	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Path($/;"	classes	line:335
ProdData	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class ProdData extends Object {$/;"	classes	line:1368
Producer	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Producer extends Interval {$/;"	classes	line:1385
ReifiedFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ReifiedFieldDecl($/;"	classes	line:199
Relation	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^abstract class Relation[+T, R <: Relation[T, R]] $/;"	classes	line:5
Req	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class Req extends Positional$/;"	classes	line:361
ReqHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ReqHb(lp: List[Path], lq: List[Path]) extends Req {$/;"	classes	line:371
ReqReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ReqReadableBy(lp: List[Path], lq: List[Path]) extends Req {$/;"	classes	line:365
ReqSubintervalOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ReqSubintervalOf(lp: List[Path], lq: List[Path]) extends Req {$/;"	classes	line:368
ReqWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class ReqWritableBy(lp: List[Path], lq: List[Path]) extends Req {$/;"	classes	line:362
SBT	/Users/niko/git/intervals-java/Analysis/Makefile	/^SBT=${JAVA} -Dsbt.log.noformat=true -Xmx256M -jar sbt-launcher-0.5.1.jar$/;"	macro	line:2
SCALA	/Users/niko/git/intervals-java/Analysis/Makefile	/^SCALA=scala$/;"	macro	line:4
SCALAC	/Users/niko/git/intervals-java/Analysis/Makefile	/^SCALAC=fsc$/;"	macro	line:3
SameReqs	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class SameReqs extends A$/;"	classes	line:478
ScalarRegister	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class ScalarRegister extends Monitor {$/;"	classes	line:774
Stmt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class Stmt extends Positional$/;"	classes	line:223
StmtCall	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtCall(x: VarName, p: Path, m: MethodName, qs: List[Path]) extends Stmt {$/;"	classes	line:230
StmtCast	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtCast(x: VarName, wt: WcTypeRef, q: Path) extends Stmt {$/;"	classes	line:239
StmtGetField	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtGetField(x: VarName, p: Path, f: FieldName) extends Stmt {$/;"	classes	line:233
StmtHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtHb(p: Path, q: Path) extends Stmt {$/;"	classes	line:257
StmtLocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtLocks(p: Path, q: Path) extends Stmt {$/;"	classes	line:260
StmtNew	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtNew(x: VarName, t: TypeRef, m: ir.MethodName, qs: List[Path]) extends Stmt {$/;"	classes	line:236
StmtNull	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtNull(x: VarName, wt: WcTypeRef) extends Stmt {$/;"	classes	line:242
StmtReturn	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtReturn(p: Path) extends Stmt {$/;"	classes	line:245
StmtSetField	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtSetField(p: Path, f: FieldName, q: Path) extends Stmt {$/;"	classes	line:248
StmtSubintervalPop	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtSubintervalPop(x: VarName) extends Stmt {$/;"	classes	line:254
StmtSubintervalPush	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtSubintervalPush(x: VarName, addCheckedArglocks: List[Path]) extends Stmt {$/;"	classes	line:251
StmtSuperCall	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtSuperCall(x: VarName, m: MethodName, qs: List[Path]) extends Stmt {$/;"	classes	line:227
StmtSuperCtor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class StmtSuperCtor(m: ir.MethodName, qs: List[Path]) extends Stmt {$/;"	classes	line:224
Sub	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Sub$/;"	classes	line:1330
Sub	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Sub$/;"	classes	line:1345
Sub1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Sub1 extends Super$/;"	classes	line:330
Sub2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Sub2 extends Super$/;"	classes	line:346
Super	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Super extends Interval $/;"	classes	line:314
Super	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Super$/;"	classes	line:1322
TARGETCLASSPATH	/Users/niko/git/intervals-java/Analysis/Makefile	/^TARGETCLASSPATH=target\/classes:target\/test-classes$/;"	macro	line:6
TARGETCLASSPATH=target/classes	/Users/niko/git/intervals-java/Analysis/Makefile	/^TARGETCLASSPATH=target\/classes:target\/test-classes$/;"	targets	line:6
TcEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class TcEnv($/;"	classes	line:375
TeePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class TeePee($/;"	classes	line:353
TmpHtmlLog	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  class TmpHtmlLog extends Log with WritingToTmpFile with WritingHtml {$/;"	classes	line:219
TracksEnvironment	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^abstract class TracksEnvironment(prog: Prog) $/;"	classes	line:10
TranslateEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    case class TranslateEnv($/;"	classes	line:273
TreePosition	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    case class TreePosition(tree: Tree) extends DummyPosition {$/;"	classes	line:55
TreeVisitor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    class TreeVisitor extends TreeScanner[Void, Void] {$/;"	classes	line:71
TypeRef	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class TypeRef($/;"	classes	line:289
UnsupportedReqs1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class UnsupportedReqs1 extends A $/;"	classes	line:506
UnsupportedReqs2	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class UnsupportedReqs2 extends A$/;"	classes	line:518
UnsupportedReqs3	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class UnsupportedReqs3 extends A$/;"	classes	line:530
UtilIterable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilIterable[I](is: Iterable[I]) {$/;"	classes	line:135
UtilIterator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilIterator[Q](i: Iterator[Q]) {$/;"	classes	line:110
UtilList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilList[E](l: List[E]) {$/;"	classes	line:63
UtilMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilMap[K,V](m0: Map[K, V]) {$/;"	classes	line:182
UtilOption	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilOption[X](o: Option[X]) {$/;"	classes	line:96
UtilPairList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilPairList[Q,R](i: List[(Q,R)]) {$/;"	classes	line:46
UtilPairSeq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilPairSeq[Q,R](i: Seq[(Q,R)]) {$/;"	classes	line:54
UtilString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    case class UtilString(s: String) {$/;"	classes	line:17
VarName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    case class VarName(name: String) extends Name(name) {$/;"	classes	line:102
WcGhost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcGhost(f: FieldName, wp: ir.WcPath) {$/;"	classes	line:269
WcHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcHb(lp: List[Path], lq: List[Path]) extends WcPath {$/;"	classes	line:315
WcLockedBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcLockedBy(lp: List[Path]) extends WcPath {$/;"	classes	line:329
WcLocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcLocks(lp: List[Path]) extends WcPath {$/;"	classes	line:324
WcPath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class WcPath {$/;"	classes	line:299
WcReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcReadableBy(lp: List[Path]) extends WcPath {$/;"	classes	line:305
WcTypeRef	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcTypeRef($/;"	classes	line:277
WcWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class WcWritableBy(lp: List[Path]) extends WcPath {$/;"	classes	line:310
WritingHtml	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  abstract trait WritingHtml extends Log {$/;"	traits	line:159
WritingText	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  abstract trait WritingText extends Log {$/;"	traits	line:144
WritingToMemoryBuffer	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  trait WritingToMemoryBuffer extends Log {$/;"	traits	line:205
WritingToStdOut	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  trait WritingToStdOut extends Log {$/;"	traits	line:212
WritingToTmpFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  abstract trait WritingToTmpFile extends Log {$/;"	traits	line:193
Z	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            class Z extends Object {$/;"	classes	line:549
_1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def _1 = i.map(_._1)$/;"	methods	line:49
_1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def _1 = i.map(_._1)$/;"	methods	line:55
_2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def _2 = i.map(_._2)$/;"	methods	line:50
_2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def _2 = i.map(_._2)$/;"	methods	line:56
a1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^            val a1 = mapFunc(a)$/;"	constants	line:30
ab	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                        val ab = new AnnotationBuilder(env, objParam.name)$/;"	constants	line:653
accumulate	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        def accumulate(sc: Set[ir.ClassName], c: ir.ClassName): Set[ir.ClassName] = {$/;"	methods	line:88
addArg	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addArg(arg: ir.LvDecl) =$/;"	methods	line:81
addBlock	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def addBlock(blk: ir.Block) = {$/;"	methods	line:136
addCall	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def addCall(x: ir.VarName, tp: ir.TeePee, m: ir.MethodName, tqs: List[ir.TeePee]) {$/;"	methods	line:24
addCallMsig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def addCallMsig(tp: ir.TeePee, msig: ir.MethodSig, tqs: List[ir.TeePee]) {$/;"	methods	line:16
addCheckedArg	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def addCheckedArg(arg: ir.LvDecl) {$/;"	methods	line:184
addClassImplementation	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^    def addClassImplementation(tree: ClassTree) = {        $/;"	methods	line:22
addClassInterface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^    def addClassInterface(elem: TypeElement, referencedElements: MutableSet[Element]) =$/;"	methods	line:15
addDeclaredReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addDeclaredReadableBy(tp: ir.TeePee, tq: ir.TeePee): Unit = $/;"	methods	line:120
addDeclaredWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addDeclaredWritableBy(tp: ir.TeePee, tq: ir.TeePee): Unit = $/;"	methods	line:128
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]) = s ++ lp ++ lq$/;"	methods	line:316
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]) = s ++ lp$/;"	methods	line:306
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]) = s ++ lp$/;"	methods	line:311
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]) = s ++ lp$/;"	methods	line:325
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]) = s ++ lp$/;"	methods	line:330
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[Path]): Set[Path]$/;"	methods	line:300
addDependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def addDependentPaths(s: Set[ir.Path]) = s + this$/;"	methods	line:342
addElements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        def addElements($/;"	methods	line:139
addGhostFieldsDeclaredOnElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def addGhostFieldsDeclaredOnElem($/;"	methods	line:227
addGhostFieldsDeclaredOnElemAndSuperelems	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def addGhostFieldsDeclaredOnElemAndSuperelems($/;"	methods	line:240
addGhostFieldsDeclaredOnTyAndSupertypes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def addGhostFieldsDeclaredOnTyAndSupertypes($/;"	methods	line:259
addGhostFieldsGivenValueInAnnotations	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def addGhostFieldsGivenValueInAnnotations($/;"	methods	line:205
addGhostFieldsGivenValueOnElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def addGhostFieldsGivenValueOnElem($/;"	methods	line:218
addHbInter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addHbInter(tp: ir.TeePee, tq: ir.TeePee): Unit = $/;"	methods	line:112
addHbPnt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addHbPnt(tp: ir.TeePee, tq: ir.TeePee): Unit = $/;"	methods	line:104
addInvalidated	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addInvalidated(p: ir.Path) =$/;"	methods	line:94
addLocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addLocks(tp: ir.TeePee, tq: ir.TeePee): Unit =$/;"	methods	line:147
addLvDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addLvDecl(x: ir.VarName, wt: ir.WcTypeRef, op_canon: Option[ir.Path]) =$/;"	methods	line:75
addPerm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addPerm(x: ir.VarName, tq: ir.TeePee): Unit =$/;"	methods	line:69
addReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addReq(req: ir.Req) = $/;"	methods	line:259
addStatement	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def addStatement(stmt: ir.Stmt): Unit =$/;"	methods	line:30
addSubintervalOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addSubintervalOf(tp: ir.TeePee, tq: ir.TeePee): Unit = $/;"	methods	line:137
addTemp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addTemp(p: ir.Path, q: ir.Path) =$/;"	methods	line:84
addThis	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def addThis(cd: ir.ClassDecl, attrs: ir.Attrs) {$/;"	methods	line:273
addType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^	def addType(referencedElements: MutableSet[Element], tm: TypeMirror): Unit =$/;"	methods	line:61
addUserDeclaredReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addUserDeclaredReadableBy(tp: ir.TeePee, tq: ir.TeePee) {$/;"	methods	line:249
addUserDeclaredWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addUserDeclaredWritableBy(tp: ir.TeePee, tq: ir.TeePee) {$/;"	methods	line:244
addUserHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addUserHb(tp0: ir.TeePee, tq0: ir.TeePee) = $/;"	methods	line:236
addUserSubintervalOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def addUserSubintervalOf(tp: ir.TeePee, tq: ir.TeePee) {$/;"	methods	line:254
adj	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed abstract class Attr(c: String, val adj: String) {$/;"	constants	line:57
all	/Users/niko/git/intervals-java/Analysis/Makefile	/^all: test$/;"	targets	line:11
allPathAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val allPathAttrs = Attrs(ListSet(AttrGhost, AttrMutable))$/;"	constants	line:95
allPhases	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckAll.scala	/^        val allPhases = List[(String, CheckPhase)]($/;"	constants	line:9
am	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                        val am = ab.build()$/;"	constants	line:655
and	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^                \/\/ it is not declared in the same class and it is not constant $/;"	classes	line:977
annField	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def annField(am: AnnotationMirror, fldName: String) = $/;"	methods	line:96
annValue	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def annValue(am: AnnotationMirror) = $/;"	methods	line:100
annotateImplicit	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    override def annotateImplicit(elem: Element, atm: AnnotatedTypeMirror) {$/;"	methods	line:645
annotateImplicit	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    override def annotateImplicit(tree: Tree, atm: AnnotatedTypeMirror) {$/;"	methods	line:664
annotateInheritedFromClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    override def annotateInheritedFromClass(atm: AnnotatedTypeMirror) {$/;"	methods	line:615
annty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val annty = getAnnotatedType(eelem)$/;"	constants	line:572
annty_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val annty_this = getAnnotatedType(telem)$/;"	constants	line:295
anonLv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def anonLv = {$/;"	methods	line:65
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^                def apply(in: Reader[Char]) = {$/;"	methods	line:21
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def apply(fmt: String, arg0: Any, args: Any*): Unit = rawWrite {$/;"	methods	line:11
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def apply(v: Any): Unit = v match {$/;"	methods	line:26
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def apply(a: T) = mmap(a)$/;"	methods	line:17
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def apply(env: TranslateEnv) = new AnnotParser(env)$/;"	methods	line:419
apply	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def apply(k: K) = get(k) match {$/;"	methods	line:233
argList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val argList = args.toList.map(_.toString)$/;"	constants	line:54
argName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def argName(tm: TypeMirror): String = tm.getKind match {$/;"	methods	line:151
argNames	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val argNames = argTypes.map(argName)$/;"	constants	line:156
argsList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val argsList = e.args.map(_.toString).toList$/;"	constants	line:70
as	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override val as: Attrs$/;"	constants	line:292
as1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val as1 = $/;"	constants	line:573
as_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val as_f = \/\/ determine if f is immutable in current method:$/;"	constants	line:395
at	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def at[R](loc: Positional, default: R)(g: => R): R = $/;"	methods	line:63
at	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def at[R](p: DummyPosition, d: => R)(f: => R) = {$/;"	methods	line:65
attr	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def attr = ($/;"	methods	line:36
attrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def attrs = rep(attr)                       ^^ { case la => ir.Attrs(Set(la: _*)) }$/;"	methods	line:40
b1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^            val b1 = mapFunc(b)$/;"	constants	line:31
bbpcData	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def bbpcData() {$/;"	methods	line:1358
blk	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val blk = blks(b)$/;"	constants	line:229
blk_tar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val blk_tar = blks(succ.b)$/;"	constants	line:131
block	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def block = ($/;"	methods	line:106
block	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def block(lbl: Any, blk: ir.Block) =$/;"	methods	line:77
blockGotoCheckTypes	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def blockGotoCheckTypes() {$/;"	methods	line:1265
bs_exit	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val bs_exit = blks.indices.toList.filter(b =>$/;"	constants	line:350
buffer	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    val buffer = new StringBuffer()    $/;"	constants	line:206
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def c = ident                               ^^ { case i => ir.ClassName(i) }$/;"	methods	line:44
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val c = counter$/;"	constants	line:41
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    \/\/ Is wt an erased subtype of class c?$/;"	classes	line:83
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    \/\/\/ For a class c with ghost fields F, yields a type c<F: this.F>$/;"	classes	line:142
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    \/\/\/ For a class c with ghost fields F, yields a type c<F: this.F>{as}$/;"	classes	line:136
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    \/\/\/ Ghosts F'#F defined on the class c are not substituted.$/;"	classes	line:119
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val c = erasedTy(annty.getUnderlyingType)$/;"	constants	line:455
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                \/\/ (2) p_dep = this.f' and f' is declared in class c (not a supertype!)$/;"	classes	line:427
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                \/\/ The type of a field f with guard p_g in class c $/;"	classes	line:424
c	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override val c: ClassName,$/;"	constants	line:290
c_array	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_array = ir.ClassName("Array")    \/\/ Represents arrays.$/;"	constants	line:482
c_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_guard = ir.ClassName("Guard")$/;"	constants	line:473
c_interval	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_interval = ir.ClassName("Interval")$/;"	constants	line:472
c_lock	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_lock = ir.ClassName("Lock")    $/;"	constants	line:475
c_object	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_object = ir.ClassName("Object")$/;"	constants	line:471
c_point	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_point = ir.ClassName("Point")$/;"	constants	line:474
c_scalar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_scalar = ir.ClassName("Scalar")  \/\/ Represents any scalar value.$/;"	constants	line:480
c_sup	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    \/\/ Is c_sub an erased subtype of class c_sup?$/;"	classes	line:75
c_void	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val c_void = ir.ClassName("Void")      \/\/ Represents void values.$/;"	constants	line:481
cap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def cap(tp: ir.TeePee): ir.TypeRef = preservesEnv {$/;"	methods	line:315
categorizeGhostAnnot	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def categorizeGhostAnnot(am: AnnotationMirror) = {$/;"	methods	line:189
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val cd = classDecl(t.c)$/;"	constants	line:88
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^                    val cd = classDecl(c)$/;"	constants	line:163
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^                val cd = classDecl(c)$/;"	constants	line:184
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            val cd = classDecl(c_0)$/;"	constants	line:99
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val cd = classDecl(c)$/;"	constants	line:129
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val cd = classDecl(c)$/;"	constants	line:147
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val cd = classDecl(c)$/;"	constants	line:201
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val cd = classDecl(c)$/;"	constants	line:213
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val cd = classDecl(tp.wt.c)$/;"	constants	line:306
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val cd = classDecl(tp_o.wt.c)$/;"	constants	line:490
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^            val cd = ttf.intClassDecl(referencedElements, elem)$/;"	constants	line:17
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val cd = classDecl(t.c)$/;"	constants	line:203
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val cd = classDecl(c)$/;"	constants	line:318
cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val cd = classDecl(c)$/;"	constants	line:324
cd_sub	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            val cd_sub = classDecl(c_sub)$/;"	constants	line:78
cd_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val cd_super = classDecl(c)$/;"	constants	line:351
cds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^    val cds = new ListBuffer[ir.ClassDecl]()$/;"	constants	line:13
cds	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val cds = $/;"	constants	line:29
cds_default	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val cds_default = List($/;"	constants	line:520
cds_user	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    val cds_user: List[ir.ClassDecl]$/;"	constants	line:12
changed	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            var changed = true$/;"	local variables	line:246
check	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckAll.scala	/^    def check = {$/;"	methods	line:8
check	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                        def check(p_dep: ir.Path) {$/;"	methods	line:457
checkArgumentTypes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkArgumentTypes(msig: ir.MethodSig, tqs: List[ir.TeePee]) =$/;"	methods	line:108
checkArgumentTypesNonvariant	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkArgumentTypesNonvariant(args_sub: List[ir.LvDecl], args_sup: List[ir.LvDecl]) {$/;"	methods	line:296
checkBlock	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkBlock(blks: Array[ir.Block], b: Int) =$/;"	methods	line:215
checkBlocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkBlocks(blks: Array[ir.Block], ins: Array[ir.TcEnv], outs: Array[ir.TcEnv]) {$/;"	methods	line:334
checkCall	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkCall(tp: ir.TeePee, m: ir.MethodName, tqs: List[ir.TeePee]) {$/;"	methods	line:154
checkCall	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkCall(tp: ir.TeePee, msig: ir.MethodSig, tqs: List[ir.TeePee]) {$/;"	methods	line:85
checkCallMsig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkCallMsig(tp: ir.TeePee, msig: ir.MethodSig, tqs: List[ir.TeePee]) {$/;"	methods	line:141
checkClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    def checkClassDecl(cd: ir.ClassDecl)$/;"	methods	line:7
checkClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkClassDecl(cd: ir.ClassDecl) = {$/;"	methods	line:525
checkClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkClassDecl(cd: ir.ClassDecl) = log.indented(cd) {        $/;"	methods	line:367
checkClassDeclAfterSuperclasses	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    def checkClassDeclAfterSuperclasses(cd: ir.ClassDecl) {$/;"	methods	line:11
checkFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkFieldDecl(cd: ir.ClassDecl)(priorNames: Set[ir.FieldName], fd: ir.FieldDecl) = $/;"	methods	line:495
checkFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkFieldDecl(cd: ir.ClassDecl)(priorNames: Set[ir.FieldName], fd: ir.FieldDecl) = $/;"	methods	line:304
checkGhostFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkGhostFieldDecl(cd: ir.ClassDecl, gfd: ir.GhostFieldDecl) = $/;"	methods	line:484
checkGhostFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkGhostFieldDecl(cd: ir.ClassDecl, gfd: ir.GhostFieldDecl): Unit = $/;"	methods	line:289
checkGoto	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkGoto(blks: Array[ir.Block], succ: ir.Goto) {$/;"	methods	line:128
checkGoto	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkGoto(blks: Array[ir.Block], succ: ir.Goto) =$/;"	methods	line:207
checkInterfaceClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkInterfaceClassDecl(cd: ir.ClassDecl) =$/;"	methods	line:508
checkInterfaceClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkInterfaceClassDecl(cd: ir.ClassDecl) =$/;"	methods	line:338
checkInterfaceConstructorDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkInterfaceConstructorDecl(cd: ir.ClassDecl, md: ir.MethodDecl) =$/;"	methods	line:328
checkInterfaceMethodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkInterfaceMethodDecl(cd: ir.ClassDecl, md: ir.MethodDecl) =$/;"	methods	line:335
checkInterfaceSuperclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkInterfaceSuperclass(c: ir.ClassName) {$/;"	methods	line:323
checkIsInterface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkIsInterface(c: ir.ClassName) {$/;"	methods	line:317
checkIsNotInterface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkIsNotInterface(c: ir.ClassName) {$/;"	methods	line:350
checkIsSubclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkIsSubclass(wt: ir.WcTypeRef, cs: ir.ClassName*) {$/;"	methods	line:19
checkIsSubtype	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkIsSubtype(tp_sub: ir.TeePee, wt_sup: ir.WcTypeRef) {$/;"	methods	line:82
checkLengths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkLengths(l1: List[_], l2: List[_], msg: String) = preservesEnv {$/;"	methods	line:60
checkMethodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkMethodDecl($/;"	methods	line:356
checkNoInvalidated	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkNoInvalidated() {$/;"	methods	line:121
checkNoninterfaceClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkNoninterfaceClassDecl(cd: ir.ClassDecl) = $/;"	methods	line:515
checkNoninterfaceClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkNoninterfaceClassDecl(cd: ir.ClassDecl) = $/;"	methods	line:356
checkNoninterfaceConstructorDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkNoninterfaceConstructorDecl(cd: ir.ClassDecl, md: ir.MethodDecl) = $/;"	methods	line:397
checkNoninterfaceConstructorDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkNoninterfaceConstructorDecl(cd: ir.ClassDecl, md: ir.MethodDecl): Unit = $/;"	methods	line:250
checkNoninterfaceMethodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkNoninterfaceMethodDecl($/;"	methods	line:224
checkOverridenReqsImplyOurReqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkOverridenReqsImplyOurReqs(reqs_sub: List[ir.Req], reqs_sup: List[ir.Req]) {$/;"	methods	line:311
checkPathWf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkPathWf(as: ir.Attrs, p: ir.Path): Unit =$/;"	methods	line:32
checkPathWfAndSubclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkPathWfAndSubclass(as: ir.Attrs, p: ir.Path, cs: ir.ClassName*): Unit = {$/;"	methods	line:24
checkPathsWf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkPathsWf(as: ir.Attrs, ps: List[ir.Path]): Unit =$/;"	methods	line:35
checkPathsWfAndSubclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkPathsWfAndSubclass(as: ir.Attrs, ps: List[ir.Path], cs: ir.ClassName*): Unit =$/;"	methods	line:29
checkPhases	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckAll.scala	/^        def checkPhases(phases: List[(String, CheckPhase)]): String = phases match {$/;"	methods	line:13
checkProg	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    def checkProg = prog.log.indented("%s", getClass.getName) {$/;"	methods	line:19
checkReadable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkReadable(tp_guard: ir.TeePee) {$/;"	methods	line:111
checkReifiedFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkReifiedFieldDecl(cd: ir.ClassDecl, fd: ir.ReifiedFieldDecl) = $/;"	methods	line:419
checkReifiedFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkReifiedFieldDecl(cd: ir.ClassDecl, fd: ir.ReifiedFieldDecl): Unit = $/;"	methods	line:279
checkReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkReq(req: ir.Req) =$/;"	methods	line:189
checkReqFulfilled	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkReqFulfilled(req: ir.Req) {$/;"	methods	line:103
checkReturnTypeCovariant	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkReturnTypeCovariant(wt_sub: ir.WcTypeRef, wt_sup: ir.WcTypeRef) {$/;"	methods	line:305
checkStatement	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkStatement(stmt: ir.Stmt): Unit = $/;"	methods	line:159
checkStatement	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkStatement(stmt: ir.Stmt): Unit =$/;"	methods	line:89
checkStatements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkStatements(stmts: List[ir.Stmt]): Unit =$/;"	methods	line:181
checkWPathWf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkWPathWf(wp: ir.WcPath): Unit =$/;"	methods	line:38
checkWfWt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    def checkWfWt(wt: ir.WcTypeRef) {$/;"	methods	line:65
checkWritable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def checkWritable(tp_guard: ir.TeePee) {$/;"	methods	line:116
checkedClasses	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    val checkedClasses = MutableSet.empty[ir.ClassName]$/;"	constants	line:10
classAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def classAttrs(telem: TypeElement) = telem.getKind match {$/;"	methods	line:513
classDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def classDecl = positioned($/;"	methods	line:142
classDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def classDecl(lbl: Any, cd: ir.ClassDecl) =$/;"	methods	line:64
classDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def classDecl(c: ir.ClassName) = classTable.get(c) match {$/;"	methods	line:20
classDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def classDecls = rep(classDecl)$/;"	methods	line:157
classDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    val classDecls = cds_user ++ ir.cds_default$/;"	constants	line:14
className	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def className(typeElem: TypeElement) =$/;"	methods	line:88
classTable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    val classTable = Util.nameMap[ir.ClassName, ir.ClassDecl](classDecls)$/;"	constants	line:19
classTree	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val classTree = treePath.getLeaf.asInstanceOf[ClassTree]$/;"	constants	line:47
clean	/Users/niko/git/intervals-java/Analysis/Makefile	/^clean:$/;"	targets	line:13
clearTemp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def clearTemp() =$/;"	methods	line:89
closestClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def closestClass(elem: Element): TypeElement = EU.enclosingClass(elem)$/;"	methods	line:79
closestPackage	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def closestPackage(elem: Element): PackageElement = elem.getKind match {$/;"	methods	line:82
cm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def cm = opt(m)                             ^^ { case Some(m) => m; case None => ir.m_init }$/;"	methods	line:43
column	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def column = System.identityHashCode(reportObject) \/\/ just return something unique-ish$/;"	methods	line:44
combinePreds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            def combinePreds(b: Int) = {$/;"	methods	line:220
comma	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    def comma[A](p: Parser[A]): Parser[List[A]] = repsep(p, ",")$/;"	methods	line:53
compile	/Users/niko/git/intervals-java/Analysis/Makefile	/^compile:$/;"	targets	line:16
compileOptions	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def compileOptions = Unchecked :: super.compileOptions.toList$/;"	methods	line:12
compute	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    def compute() {$/;"	methods	line:19
computePreds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    private def computePreds() {$/;"	methods	line:28
constructor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def constructor = positioned($/;"	methods	line:126
constructorTypes	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def constructorTypes() {$/;"	methods	line:214
constructorTypesAndSubtypes	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def constructorTypesAndSubtypes() {$/;"	methods	line:653
contains	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def contains(a: T, b: T): Boolean = mmap.contains(a, b)$/;"	methods	line:16
contains	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                def contains(pair: (K, V)) = mm(pair._1)(pair._2)$/;"	methods	line:321
contains	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def contains(k: K, v: V) = this(k).contains(v)$/;"	methods	line:240
containsAll	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def containsAll(m: Iterable[E]) =$/;"	methods	line:88
core	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntransitiveRelation.scala	/^    private val core: MultiMap[T,T]$/;"	constants	line:6
core	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TransitiveRelation.scala	/^    private val core: MultiMap[T,T], $/;"	constants	line:6
counter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    private var counter = 0$/;"	local variables	line:64
counter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    private var counter = 0$/;"	local variables	line:39
cr	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def cr(text: String) {$/;"	methods	line:83
createFactory	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    override def createFactory(root: CompilationUnitTree): TranslateTypeFactory =$/;"	methods	line:30
createSourceVisitor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    override def createSourceVisitor(root: CompilationUnitTree) =$/;"	methods	line:33
cross	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def cross[J](js: UtilIterable[J]): Iterable.Projection[(I,J)] = $/;"	methods	line:136
cross	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def cross[I](is: List[Iterable[I]]): List[List[I]] = is match {$/;"	methods	line:158
ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def ctor = s.contains(AttrCtor)$/;"	methods	line:77
ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def ctor = withAttrs(as.withCtor)$/;"	methods	line:296
ctorAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val ctorAttrs = Attrs(ListSet(AttrCtor))$/;"	constants	line:91
ctorDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ctorDecls = EF.constructorsIn(enclElems).filter(filter).map(intMethodDecl(ir.ctorAttrs, _))$/;"	constants	line:590
ctr	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^        val ctr = counter$/;"	constants	line:66
declGhosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val declGhosts = elemOfAnnty(pp.annty).map(ghostFieldsDeclaredOnElemAndSuperelems).getOrElse(Map.empty)            $/;"	constants	line:389
declaredReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def declaredReadableBy(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:192
declaredWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def declaredWritableBy(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:197
defaultValue	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        override protected def defaultValue(k: K) =$/;"	methods	line:335
defaultValue	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        override protected def defaultValue(k: K) =$/;"	methods	line:348
defaultValue	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        protected def defaultValue(k: K): Set[V]$/;"	methods	line:225
definitions	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    \/\/ Attrs for class definitions:$/;"	classes	line:61
defn	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    \/\/\/ all linked fields either (a) occur in the same class defn as f$/;"	classes	line:487
dependencyPath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def dependencyPath = "lib"$/;"	methods	line:5
dependentOn	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def dependentOn(p: Path): Boolean =$/;"	methods	line:302
dependentPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def dependentPaths =$/;"	methods	line:285
diff	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def diff(as: Attrs): Set[Attr] = s -- as.s$/;"	methods	line:86
directSupertys	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def directSupertys(telem: TypeElement) =$/;"	methods	line:92
dotf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def dotf = "."~f                            ^^ { case _~f => f }$/;"	methods	line:51
dummyClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def dummyClassDecl(telem: TypeElement) = $/;"	methods	line:518
duplicateGhostsInSameType	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def duplicateGhostsInSameType() {$/;"	methods	line:1342
eelem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val eelem = elem.asInstanceOf[ExecutableElement]$/;"	constants	line:338
elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^            val elem = TU.elementFromDeclaration(tree)$/;"	constants	line:105
elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^            val elem = TU.elementFromDeclaration(tree)$/;"	constants	line:99
elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                    val elem = TU.elementFromDeclaration(tree.asInstanceOf[ClassTree])$/;"	constants	line:668
elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val elem = am.getAnnotationType.asElement$/;"	constants	line:193
elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val elem = am.getAnnotationType.asElement$/;"	constants	line:190
elemEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def elemEnv(elem: Element): TranslateEnv =$/;"	methods	line:286
elemKind	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def elemKind(annty: AnnotatedTypeMirror): Option[ElementKind] =$/;"	methods	line:103
elemOfAnnty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def elemOfAnnty(annty: AnnotatedTypeMirror): Option[TypeElement] =$/;"	methods	line:115
elemOfType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def elemOfType(ty: TypeMirror): Option[TypeElement] =$/;"	methods	line:109
elements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def elements: Iterator[(T,T)] = mmap.elements$/;"	methods	line:15
elements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                def elements = mm.iterator$/;"	methods	line:319
elements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def elements: Iterator[(K, V)] = iterator$/;"	methods	line:313
elems_fields	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val elems_fields = EF.fieldsIn(elements.getAllMembers(telem))$/;"	constants	line:308
elems_owner_fields	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val elems_owner_fields = EF.fieldsIn(elements.getAllMembers(elem_owner))$/;"	constants	line:176
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntransitiveRelation.scala	/^    def empty = IntransitiveRelation.empty$/;"	methods	line:12
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntransitiveRelation.scala	/^    def empty[T] = new IntransitiveRelation(MultiMap.empty[T,T])$/;"	methods	line:16
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def empty: R$/;"	methods	line:14
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TransitiveRelation.scala	/^    def empty = TransitiveRelation.empty$/;"	methods	line:20
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TransitiveRelation.scala	/^    def empty[T] = new TransitiveRelation(MultiMap.empty[T,T], true)$/;"	methods	line:24
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                def empty[K] = Set.empty[K]$/;"	methods	line:320
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def empty[K, V] = $/;"	methods	line:340
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def empty[K] = $/;"	methods	line:353
empty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        val empty = ir.TcEnv($/;"	constants	line:420
emptyAnnots	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val emptyAnnots = superAtm.getAnnotations.filter(isEmptyAnnot)$/;"	constants	line:632
emptyEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    val emptyEnv = TranslateEnv(NullPosition, Map.empty, Map.empty)$/;"	constants	line:284
emptySubst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def emptySubst[A]: Subst[A] = Map.empty.withDefault(p => p)$/;"	methods	line:204
enclElems	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val enclElems = telem.getEnclosedElements$/;"	constants	line:589
enclosing	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    \/\/ Returns 'elem' if it is a class, otherwise the class enclosing 'elem' (or null)$/;"	classes	line:78
enclosing	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    \/\/ Returns 'elem' if it is a package, otherwise the package enclosing 'elem'$/;"	packages	line:81
end	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def end = this + f_end        $/;"	methods	line:348
endsWith	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def endsWith(m: List[E]) =$/;"	methods	line:85
env	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def env(lbl: Any, env: ir.TcEnv) = {$/;"	methods	line:35
env	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    var env = ir.Env.empty$/;"	local variables	line:23
env	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val env = elemEnv(telem)$/;"	constants	line:594
env	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val env = elemEnv(velem)$/;"	constants	line:555
env_all_ctors	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val env_all_ctors = ir.Env.intersect(envs_ctor)$/;"	constants	line:520
env_cls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val env_cls = elemEnv(eelem.getEnclosingElement)$/;"	constants	line:339
env_mthd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            val env_mthd = env$/;"	constants	line:150
env_mthd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val env_mthd = elemEnv(eelem)$/;"	constants	line:571
env_pred	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val env_pred = outs(b_pred)                    $/;"	constants	line:157
environment	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            \/\/ Computing class environment:$/;"	classes	line:292
envs_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val envs_ctor = cd.ctors.map(checkNoninterfaceConstructorDecl(cd, _))$/;"	constants	line:519
equals	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    override def equals(that: Any) = $/;"	methods	line:36
equiv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def equiv(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:156
erasedTy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def erasedTy(ty: TypeMirror): ir.ClassName =$/;"	methods	line:424
errors	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    var errors = ListSet.empty[ir.Error] \/\/ use a list set to keep ordering$/;"	local variables	line:51
escape	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def escape(s0: String) = {$/;"	methods	line:165
escape	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def escape(s: String) = s$/;"	methods	line:152
escape	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def escape(s: String) = s$/;"	methods	line:228
escape	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def escape(s: String): String  $/;"	methods	line:137
ev	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val ev = new ElementVisitor()$/;"	constants	line:148
existscross	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def existscross[A,B](as: Iterable[A], bs: Iterable[B])(f: Function2[A, B, Boolean]) =$/;"	methods	line:374
expErrors	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val expErrors = text.lines.zipWithIndex.filter(_._1.contains(tag)).map { $/;"	constants	line:23
exportedCtorEnvs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    var exportedCtorEnvs = Map($/;"	local variables	line:31
extendPath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def extendPath(pp: ParsePath, id: String) = {$/;"	methods	line:388
extendedInit	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def extendedInit() {$/;"	methods	line:726
extractAssumptions	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def extractAssumptions($/;"	methods	line:266
f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def f = ($/;"	methods	line:46
f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def f(elem: Element): ir.FieldName =$/;"	methods	line:128
f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override val f: FieldName,$/;"	constants	line:273
f_creator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val f_creator = ir.FieldName("creator")    $/;"	constants	line:459
f_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val f_ctor = ir.FieldName("constructor")$/;"	constants	line:461
f_elem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                    val f_elem = f(elem)$/;"	constants	line:310
f_end	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val f_end = ir.FieldName("end")$/;"	constants	line:462
f_id	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val f_id = ir.FieldName(id)$/;"	constants	line:390
f_start	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val f_start = ir.FieldName("start")$/;"	constants	line:460
f_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val f_super = ir.FieldName("super")$/;"	constants	line:463
failPhase	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val failPhase = new CheckAll(prog).check$/;"	constants	line:38
fds_linked	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val fds_linked = fds_maybe_linked.filter { rfd =>$/;"	constants	line:505
fds_maybe_linked	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val fds_maybe_linked = lrfd.filter { rfd => isLinkedWt(p_f, rfd.wt) }$/;"	constants	line:500
fieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def fieldDecl(fd: ir.FieldDecl) = fd match {$/;"	methods	line:40
fieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def fieldDecl(c0: ir.ClassName, f: ir.FieldName): ir.FieldDecl = {$/;"	methods	line:159
fieldDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val fieldDecls = EF.fieldsIn(enclElems).filter(filter).map(intFieldDecl)$/;"	constants	line:592
fieldGuard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def fieldGuard(env: TranslateEnv)(velem: VariableElement) = {$/;"	methods	line:543
fieldsTypesWf	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def fieldsTypesWf()$/;"	methods	line:1074
filterFunc	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                def filterFunc(p: ir.Path): Boolean = $/;"	methods	line:279
filterKeys	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def filterKeys(f: (K => Boolean)) = {$/;"	methods	line:295
filterValueSetElems	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def filterValueSetElems(f: (V => Boolean)) =$/;"	methods	line:307
findField	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def findField(annty_owner: AnnotatedTypeMirror, s: String): Option[AnnotatedTypeMirror] =$/;"	methods	line:172
first	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    \/\/ All supertypes, class first then interfaces.$/;"	classes	line:91
first	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val first = iter.next$/;"	constants	line:386
firstSomeReturned	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def firstSomeReturned[F](fn: Function[E, Option[F]]): Option[F] = {$/;"	methods	line:73
firstlast	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def firstlast[A](l: List[A]) = (l.first, l.last)$/;"	methods	line:174
foldLeft	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def foldLeft[Y](y0: Y)(f: ((Y, X) => Y)): Y =$/;"	methods	line:102
foldRightOpt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def foldRightOpt[V](v: V)(f: ((E,V) => Option[V])) =$/;"	methods	line:64
forallcross	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def forallcross[A,B](as: Iterable[A], bs: Iterable[B])(f: Function2[A, B, Boolean]) =$/;"	methods	line:372
forallzip	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def forallzip[A,B](as: List[A], bs: List[B])(f: Function2[A, B, Boolean]) =$/;"	methods	line:370
foreachcross	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def foreachcross[A,B](as: List[A], bs: List[B])(f: Function2[A, B, Unit]) =$/;"	methods	line:378
foreachzip	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def foreachzip[A,B](as: List[A], bs: List[B])(f: Function2[A, B, Unit]) =$/;"	methods	line:376
fresh	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def fresh(nm: String) = {$/;"	methods	line:40
freshTp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def freshTp(wt: ir.WcTypeRef) = {$/;"	methods	line:74
freshVarName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def freshVarName = ir.VarName(fresh("tmp"))$/;"	methods	line:46
fs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def fs = rev_fs.reverse$/;"	methods	line:338
fs_defd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            val fs_defd = cd.ghosts.map(_.f)            $/;"	constants	line:114
fs_relevant	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val fs_relevant = ghostFieldsDeclaredOnTyAndSupertypes(annty.getUnderlyingType).keySet$/;"	constants	line:446
g	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def g = "<"~f~":"~p~">"                     ^^ { case _~f~_~p~_ => ir.Ghost(f, p) }    $/;"	methods	line:53
g	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def g(p: P) = {$/;"	methods	line:401
get	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def get(k: K) = _m.get(k)$/;"	methods	line:231
gfd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                            val gfd = substdFieldDecl(tp_x, g.f)$/;"	constants	line:214
gfd_creator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val gfd_creator = GhostFieldDecl(t_interval, f_creator)$/;"	constants	line:497
gfd_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val gfd_ctor = GhostFieldDecl(t_interval, f_ctor)$/;"	constants	line:491
gfd_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val gfd_super = GhostFieldDecl(t_interval, f_super)$/;"	constants	line:493
gfds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val gfds = ghostFieldDecls(cd.name)$/;"	constants	line:138
gfds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def gfds = fields.flatMap {$/;"	methods	line:135
gfds_cd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            val gfds_cd = cd.fields.foldLeft[Set[ir.GhostFieldDecl]](ListSet.empty) { $/;"	constants	line:103
gfds_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            val gfds_super = cd.superClasses.foldLeft(gfds_cd) { case (s, c) => $/;"	constants	line:109
ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def ghost(g: ir.Ghost) =$/;"	methods	line:6
ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def ghost = Ghost(name, thisPath)$/;"	methods	line:196
ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def ghost = s.contains(AttrGhost)$/;"	methods	line:80
ghostAnnty	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghostAnnty = getAnnotatedType(ghostElem)$/;"	constants	line:198
ghostAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val ghostAttrs = Attrs(ListSet(AttrGhost))$/;"	constants	line:92
ghostCls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghostCls = elem.getAnnotation(classOf[DefinesGhost]).cls$/;"	constants	line:196
ghostDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghostDecls = ghostFieldsDeclaredOnElem(telem).map { case (f, annty) =>$/;"	constants	line:595
ghostElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghostElem = elements.getTypeElement(ghostCls.getName)$/;"	constants	line:197
ghostFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def ghostFieldDecl(fd: ir.GhostFieldDecl) =$/;"	methods	line:34
ghostFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def ghostFieldDecl = positioned($/;"	methods	line:133
ghostFieldDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def ghostFieldDecls(c_0: ir.ClassName): List[ir.GhostFieldDecl] =$/;"	methods	line:97
ghostFields	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghostFields = ghostFieldsDeclaredOnElemAndSuperelems(telem)$/;"	constants	line:314
ghostFieldsDeclaredOnElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def ghostFieldsDeclaredOnElem(elem: Element) =$/;"	methods	line:237
ghostFieldsDeclaredOnElemAndSuperelems	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def ghostFieldsDeclaredOnElemAndSuperelems(elem: Element) =$/;"	methods	line:265
ghostFieldsDeclaredOnTyAndSupertypes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def ghostFieldsDeclaredOnTyAndSupertypes(ty: TypeMirror) =$/;"	methods	line:268
ghostFieldsGivenValueInAnnotations	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def ghostFieldsGivenValueInAnnotations(ams: List[AnnotationMirror]) =$/;"	methods	line:215
ghostFieldsGivenValueOnElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def ghostFieldsGivenValueOnElem(elem: Element) =$/;"	methods	line:224
ghostOk	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    val ghostOk = ir.ghostAttrs.withMutable$/;"	constants	line:16
ghostSubstOfTeePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def ghostSubstOfTeePee(tp: ir.TeePee): PathSubst = preservesEnv {$/;"	methods	line:305
ghostSubstOfType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def ghostSubstOfType(t: ir.TypeRef): PathSubst = $/;"	methods	line:121
ghostTeePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def ghostTeePee(tp_0: ir.TeePee, f: ir.FieldName, wt_f: ir.WcTypeRef): ir.TeePee = {$/;"	methods	line:350
ghostTypesFields	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def ghostTypesFields()$/;"	methods	line:929
ghostTypesLocals	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def ghostTypesLocals()$/;"	methods	line:894
ghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def ghosts(tp: ir.TeePee): List[ir.Ghost] = preservesEnv {$/;"	methods	line:294
ghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val ghosts = ghostFieldsGivenValueOnElem(telem).map { case (f, s) =>$/;"	constants	line:597
ghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        val ghosts: List[Ghost],$/;"	constants	line:291
goto	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def goto = positioned($/;"	methods	line:102
happensReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def happensReq(annot: Happens) =$/;"	methods	line:492
hasPrefix	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def hasPrefix(p: ir.Path) =$/;"	methods	line:344
hbInter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def hbInter(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:177
hbPnt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def hbPnt(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:170
hoh	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def hoh() {$/;"	methods	line:1196
idx	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val idx = f.name.lastIndexOf('.')$/;"	constants	line:142
illegalClassInReq	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def illegalClassInReq$/;"	methods	line:1012
illegalLinkedFields	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def illegalLinkedFields()$/;"	methods	line:953
in	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        cd: ir.ClassDecl,          \/\/ class in which the method is declared$/;"	classes	line:357
in	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        cd: ir.ClassDecl,          \/\/ class in which the method is declared$/;"	classes	line:225
indent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    private var indent: Int = 0    $/;"	local variables	line:145
indented	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def indented[R](fmt: String, arg0: Any, args: Any*)(f: => R): R = {$/;"	methods	line:86
indented	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def indented[R](str: Any)(f: => R): R = indented("%s", str)(f)$/;"	methods	line:96
indentedRes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def indentedRes[R](fmt: Any)(f: => R): R = indentedRes("%s", fmt)(f)$/;"	methods	line:110
indentedRes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def indentedRes[R](fmt: String, arg0: Any, args: Any*)(f: => R): R = {$/;"	methods	line:98
inheritedAssumptionsFromCtor	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def inheritedAssumptionsFromCtor() {$/;"	methods	line:266
inheritedAssumptionsFromMultipleCtors	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def inheritedAssumptionsFromMultipleCtors() {$/;"	methods	line:366
inheritedAssumptionsFromSupertypes	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def inheritedAssumptionsFromSupertypes() {$/;"	methods	line:311
inheritedAssumptionsOnlyIncludeTemporarilyAliasedFields	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def inheritedAssumptionsOnlyIncludeTemporarilyAliasedFields() {$/;"	methods	line:418
ins	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            val ins = Array.make(blks.length, env_mthd)$/;"	constants	line:151
ins	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    val ins = Array.make(blks.length, empty)$/;"	constants	line:15
intArgDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def intArgDecl(velem: VariableElement) =$/;"	methods	line:564
intClassDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def intClassDecl(filter: (Element => Boolean), telem: TypeElement): ir.ClassDecl = $/;"	methods	line:586
intFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def intFieldDecl(velem: VariableElement) = {$/;"	methods	line:554
intMethodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def intMethodDecl(as0: ir.Attrs, eelem: ExecutableElement) = {$/;"	methods	line:570
integer	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def integer = numericLit                    ^^ { case s => s.toInt }$/;"	methods	line:32
interface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    \/\/ The class interface includes all fields, methods, constructors, etc$/;"	classes	line:510
interface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    \/\/ ___ Translating the class interface __________________________________$/;"	classes	line:508
interface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def interface = s.contains(AttrInterface)$/;"	methods	line:74
interfaceAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val interfaceAttrs = Attrs(ListSet(AttrInterface))$/;"	constants	line:94
interfaceInheritance	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def interfaceInheritance() {$/;"	methods	line:1159
intersect	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def intersect[A](sets: Iterable[Set[A]]): Set[A] = {$/;"	methods	line:383
intersect	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def intersect(envs: List[ir.TcEnv]) = envs match {$/;"	methods	line:433
intersects	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def intersects(c: UtilIterator[Q]) =$/;"	methods	line:129
inv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def inv(v: V) = _m.keys.filter(k => contains(k, v))$/;"	methods	line:238
is	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        def is(func: Function2[ir.TeePee, ir.TeePee, Boolean], ps: List[ir.Path], qs: List[ir.Path]) = {$/;"	methods	line:90
isClassType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def isClassType(annty: AnnotatedTypeMirror) =$/;"	methods	line:121
isConstant	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def isConstant: Boolean = !as.mutable$/;"	methods	line:356
isEmptyAnnot	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                def isEmptyAnnot(am: AnnotationMirror) =$/;"	methods	line:630
isInterfaceType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def isInterfaceType(annty: AnnotatedTypeMirror) =$/;"	methods	line:118
isLinkedWt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def isLinkedWt(p: ir.Path, wt: ir.WcTypeRef) = preservesEnv {$/;"	methods	line:480
isReadableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def isReadableBy(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:276
isReqFulfilled	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def isReqFulfilled(req: ir.Req): Boolean = log.indentedRes("isReqFulfilled(%s)", req) {$/;"	methods	line:89
isSubclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def isSubclass(c_sub: ir.ClassName, c_sup: ir.ClassName): Boolean = {$/;"	methods	line:76
isSubclass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def isSubclass(wt: ir.WcTypeRef, c: ir.ClassName): Boolean =$/;"	methods	line:84
isSubghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def isSubghost(t_sub: ir.TypeRef, wt_ghost: ir.WcGhost) = preservesEnv {$/;"	methods	line:52
isSubintervalOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def isSubintervalOf(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:187
isSubpath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def isSubpath(p: ir.Path, wq: ir.WcPath) = savingEnv {$/;"	methods	line:25
isSubtype	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def isSubtype(t_sub: ir.TypeRef, wt_sup: ir.WcTypeRef): Boolean = preservesEnv {$/;"	methods	line:60
isSubtype	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def isSubtype(tp_sub: ir.TeePee, wt_sup: ir.WcTypeRef): Boolean = $/;"	methods	line:71
isSuperCtor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    def isSuperCtor(s: Stmt) = s match {$/;"	methods	line:264
isWritableBy	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def isWritableBy(tp: ir.TeePee, tq: ir.TeePee): Boolean =$/;"	methods	line:207
iter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        val iter = sets.elements$/;"	constants	line:384
iterable2UtilIterable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def iterable2UtilIterable[I](i: Iterable[I]) = UtilIterable(i)$/;"	methods	line:153
iterable2UtilIterator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def iterable2UtilIterator[Q](i: Iterable[Q]) = UtilIterator(i.elements)$/;"	methods	line:132
iterate	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    private def iterate() {$/;"	methods	line:35
iterateMethodBlocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def iterateMethodBlocks(blks: Array[ir.Block]): (Array[ir.TcEnv], Array[ir.TcEnv]) = $/;"	methods	line:141
iterator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        private def iterator =$/;"	methods	line:310
iterator2UtilIterator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def iterator2UtilIterator[Q](i: Iterator[Q]) = UtilIterator(i)$/;"	methods	line:133
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    def join(r1: R, r2: R): R$/;"	methods	line:25
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def join(elements: Iterator[Any]): String =$/;"	methods	line:37
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def join(itemPrefix: String, elements: Iterator[Any], itemSuffix: String): String = {$/;"	methods	line:20
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def join(itemPrefix: String, iterable: Iterable[Any]): String =$/;"	methods	line:33
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def join(itemPrefix: String, iterable: Iterable[Any], itemSuffix: String): String =$/;"	methods	line:18
join	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def join(iterable: Iterable[Any]): String =$/;"	methods	line:35
keySet	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def keySet = _m.keySet$/;"	methods	line:229
keys	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def keys = _m.keys      $/;"	methods	line:228
kset0	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val kset0 = this(k)$/;"	constants	line:243
kset1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val kset1 = f(kset0)$/;"	constants	line:244
len	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                val len = list.length$/;"	constants	line:143
level	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                \/\/ At the class level, paths may begin with "this" or any of the fields, $/;"	classes	line:300
lexical	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    override val lexical = new StdLexical {$/;"	constants	line:14
lg_tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val lg_tp = ghosts(tp)$/;"	constants	line:307
lgfd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val lgfd = ghostFieldDecls(wt.c)$/;"	constants	line:73
line	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def line = 1$/;"	methods	line:45
lineContents	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def lineContents = "dummy"        $/;"	methods	line:46
link	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def link(hb: ir.HB, desc: String) = {$/;"	methods	line:116
linkToFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def linkToFile(f: java.io.File) = ""$/;"	methods	line:229
linkToFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def linkToFile(f: java.io.File) = {$/;"	methods	line:153
linkToFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def linkToFile(f: java.io.File) =$/;"	methods	line:171
linkToFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def linkToFile(f: java.io.File): String   $/;"	methods	line:138
linkedFields	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def linkedFields() {$/;"	methods	line:99
linkedPaths	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def linkedPaths(tp_o: ir.TeePee, f: ir.FieldName) = preservesEnv {$/;"	methods	line:489
list	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                val list = is.toList$/;"	constants	line:142
list2UtilList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def list2UtilList[Q](i: List[Q]) = UtilList(i)$/;"	methods	line:91
list2UtilPairList	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def list2UtilPairList[Q,R](i: List[(Q,R)]) = UtilPairList(i)$/;"	methods	line:52
list2UtilPairSeq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def list2UtilPairSeq[Q,R](i: Seq[(Q,R)]) = UtilPairSeq(i)$/;"	methods	line:58
locks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def locks(tp: ir.TeePee, tq: ir.TeePee): Boolean = $/;"	methods	line:202
log	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    val log = new Log.TmpHtmlLog()$/;"	constants	line:28
log	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    val log: Log,$/;"	constants	line:11
log	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^    val log: Log,$/;"	constants	line:10
log	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^        val log = new Log.TmpHtmlLog()$/;"	constants	line:19
logHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def logHb() = ()$/;"	methods	line:162
longest	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def longest[A](ls: Collection[List[A]]): List[A] =$/;"	methods	line:215
lrfd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val lrfd = cd.fields.foldLeft(List[ir.ReifiedFieldDecl]()) {$/;"	constants	line:494
ltp_locks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val ltp_locks = teePee(ir.noAttrs, addCheckedArglocks)$/;"	constants	line:122
lv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def lv = ident                              ^^ { case i => ir.VarName(i) }$/;"	methods	line:45
lv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def lv(velem: VariableElement): ir.VarName =$/;"	methods	line:134
lv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val lv = prog.freshVarName$/;"	constants	line:75
lvDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def lvDecl(lv: ir.LvDecl) = $/;"	methods	line:45
lv_cur	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_cur = ir.VarName("current")$/;"	constants	line:449
lv_end	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_end = ir.VarName("end")$/;"	constants	line:446
lv_ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_ghost = ir.VarName("ghost")$/;"	constants	line:450
lv_mthd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_mthd = ir.VarName("method")$/;"	constants	line:448
lv_new	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_new = ir.VarName("new")$/;"	constants	line:445
lv_outOfScope	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val lv_outOfScope = ir.VarName(prog.fresh("outOfScope"))$/;"	constants	line:165
lv_root	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_root = ir.VarName("root")$/;"	constants	line:447
lv_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val lv_this = ir.VarName("this")$/;"	constants	line:444
lvdecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def lvdecl = ($/;"	methods	line:60
lvn_msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val lvn_msig = msig.args.map(_.name)$/;"	constants	line:321
lvs_tar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val lvs_tar = blk_tar.args.map(_.name)$/;"	constants	line:132
m	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def m = ident                               ^^ { case i => ir.MethodName(i) }$/;"	methods	line:42
m	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^class PathSubst(private val m: Map[ir.Path, ir.Path]) extends BaseSubst {$/;"	constants	line:5
m	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def m(eelem: ExecutableElement): ir.MethodName = {$/;"	methods	line:168
m	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def m(methodName: String, argTypes: List[TypeMirror]): ir.MethodName = {$/;"	methods	line:147
m	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def m(methodName: String, etm: ExecutableType): ir.MethodName = {$/;"	methods	line:164
m1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val m1 = addGhostFieldsDeclaredOnTyAndSupertypes(m0, telem.getSuperclass)$/;"	constants	line:248
m1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val m1 = _m.filter { case (k, v) => f(k) }$/;"	constants	line:296
m1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val m1 = _m.transform((k,v) => f(k, v))$/;"	constants	line:302
m2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val m2 = telem.getInterfaces.foldLeft(m1)(addGhostFieldsDeclaredOnTyAndSupertypes)$/;"	constants	line:249
m_annty_str	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val m_annty_str = ghostFieldsGivenValueInAnnotations(annty.getAnnotations.toList)$/;"	constants	line:442
m_annty_wp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val m_annty_wp = m_annty_str.transform { case (_, v) => AnnotParser(env).wpath(v) }$/;"	constants	line:443
m_comb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val m_comb = m_defaultWghosts ++ m_annty_wp        $/;"	constants	line:450
m_defaultWghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                var m_defaultWghosts = Map.empty[ir.FieldName, ir.WcPath]$/;"	local variables	line:327
m_defaultWghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                var m_defaultWghosts = env_cls.m_defaultWghosts$/;"	local variables	line:358
m_defaultWghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val m_defaultWghosts = env.m_defaultWghosts.filter { case (f, _) => fs_relevant(f) }$/;"	constants	line:447
m_init	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val m_init = ir.MethodName("<init>")$/;"	constants	line:465
m_lvs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                var m_lvs = Map.empty[String, (ir.Path, AnnotatedTypeMirror)]$/;"	local variables	line:306
m_lvs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                var m_lvs = env_cls.m_lvs$/;"	local variables	line:347
m_run	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val m_run = ir.MethodName("run")$/;"	constants	line:467
m_toScalar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val m_toScalar = ir.MethodName("toScalar")$/;"	constants	line:466
mainJavaSourcePath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def mainJavaSourcePath = "src"$/;"	methods	line:7
mainResourcesPath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def mainResourcesPath = "resources"    $/;"	methods	line:8
mainScalaSourcePath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def mainScalaSourcePath = "src"$/;"	methods	line:6
makeFlatMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def makeFlatMap[K,V](f: Q => Iterable[(K,V)]): Map[K,V] =$/;"	methods	line:114
makeMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def makeMap[K,V](f: Q => (K,V)): Map[K,V] =$/;"	methods	line:111
makeMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def makeMap[K,V](pairs: Iterable[(K,V)]): Map[K,V] = $/;"	methods	line:179
makePoint	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^            def makePoint(tp: ir.TeePee, f: ir.FieldName) =$/;"	methods	line:217
makeSubst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def makeSubst[A](pairs: Seq[(A,A)]): Subst[A] = $/;"	methods	line:206
map	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def map(lbl: Any, m: Iterable[(Any, Any)]) = {$/;"	methods	line:50
map0	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val map0 = env_pred.perm.keys.foldLeft(Map.empty[ir.Path, ir.Path]) { case (m, x) =>$/;"	constants	line:168
map1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val map1 = env_mthd.perm.keys.foldLeft(map0) { case (m, x) => $/;"	constants	line:173
map2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val map2 = ps_goto.zip(xs_args).foldLeft(map1) { case (m, (p, x)) =>$/;"	constants	line:180
map2UtilMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def map2UtilMap[K, V](m0: Map[K, V]): UtilMap[K, V] = UtilMap(m0)$/;"	methods	line:197
mapFilter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def mapFilter($/;"	methods	line:25
mapFunc	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val mapFunc = PathSubst.pp(tempValues, tempKeys).path(_)$/;"	constants	line:277
mapInvalidated	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                def mapInvalidated(ps: Set[ir.Path]) =$/;"	methods	line:201
mapKey	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapKey(k: K, f: (Set[V] => Set[V])) = {$/;"	methods	line:242
mapMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                def mapMap(map: Map[ir.Path, ir.Path]) =$/;"	methods	line:190
mapRelation	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                def mapRelation[R <: Relation[ir.Path, R]](rel: R) =$/;"	methods	line:198
mapTo	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapTo[V](v: Iterator[V]): Map[Q,V] = \/\/ k.mapTo(v) makes a map from k to v $/;"	methods	line:120
mapTo	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapTo[V](v: Seq[V]): Map[Q,V] =$/;"	methods	line:123
mapToOption	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapToOption[Y](f: (X => Option[Y])) = o match {$/;"	methods	line:97
mapValueSets	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapValueSets(f: ((K, Set[V]) => Set[V])) = {$/;"	methods	line:301
mapValues	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mapValues[W](f: (V => W)): Map[K, W] =$/;"	methods	line:183
map_1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def map_1[S](f: (Q => S)) = i.map { case (q, r) => (f(q), r) }$/;"	methods	line:47
map_2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def map_2[S](f: (R => S)) = i.map { case (q, r) => (q, f(r)) }$/;"	methods	line:48
matched	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            var matched = 0$/;"	local variables	line:40
max	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            var max = 20$/;"	local variables	line:247
md_ctor_interface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val md_ctor_interface = $/;"	constants	line:504
memoize	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def memoize[P,Q](f: (P => Q)) = {$/;"	methods	line:399
methodBody	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def methodBody = ($/;"	methods	line:112
methodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def methodDecl = positioned($/;"	methods	line:119
methodDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def methodDecl(lbl: Any, md: ir.MethodDecl) =$/;"	methods	line:71
methodDecls	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val methodDecls = EF.methodsIn(enclElems).filter(filter).map(intMethodDecl(ir.noAttrs, _))$/;"	constants	line:591
methodSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def methodSig(msig: ir.MethodSig) =$/;"	methods	line:49
methodSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def methodSig(c0: ir.ClassName, m: ir.MethodName): Option[ir.MethodSig] = {$/;"	methods	line:181
mkCommaString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mkCommaString = is.mkString(", ")$/;"	methods	line:139
mkEnglishString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def mkEnglishString: String = {$/;"	methods	line:141
mm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val mm = this$/;"	constants	line:316
mmap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntransitiveRelation.scala	/^    def mmap = core$/;"	methods	line:8
mmap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def mmap: MultiMap[T, T]$/;"	methods	line:7
mmap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TransitiveRelation.scala	/^    override def mmap: MultiMap[T, T] = tc            $/;"	methods	line:16
msg1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      val msg1 = ("  " * indent) + msg$/;"	constants	line:147
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^        val msig = substdMethodSig(tp, m, tqs)$/;"	constants	line:25
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                val msig = md.msig(cap(tp))$/;"	constants	line:329
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val msig = substdMethodSig(tp, m, tqs)$/;"	constants	line:155
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val msig = substdMethodSig(tp, m, tqs)$/;"	constants	line:122
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val msig = substdMethodSig(tp, m, tqs)$/;"	constants	line:129
msig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def msig(t_rcvr: TypeRef) = MethodSig(t_rcvr, attrs, args, reqs, wt_ret)$/;"	methods	line:158
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val msig_ctor = substdCtorSig(tp, m, tqs)$/;"	constants	line:36
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val msig_ctor = substdCtorSig(tp_x, m, tqs)$/;"	constants	line:96
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                        val msig_ctor = substdCtorSig(tp_x, m, tqs)$/;"	constants	line:219
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val msig_ctor = substdCtorSig(tp, m, tqs)$/;"	constants	line:165
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val msig_ctor = substdCtorSig(tp, m, tqs)$/;"	constants	line:95
msig_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val msig_ctor = substdCtorSig(tp_x, m, tqs)$/;"	constants	line:149
msig_sup	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                        val msig_sup = substArgsInMethodSig(msig_sup_0, md.args.map(_.name))$/;"	constants	line:383
multipleInheritance	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def multipleInheritance() {$/;"	methods	line:819
mutable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def mutable = s.contains(AttrMutable)$/;"	methods	line:83
mutableAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val mutableAttrs = Attrs(ListSet(AttrMutable))$/;"	constants	line:93
mutableHbRelations	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def mutableHbRelations$/;"	methods	line:1043
name	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        val name: FieldName$/;"	constants	line:185
name	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^c -> class name$/;"	classes	line:26
nameMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val nameMap = Map(lvn_msig.zip(lvn): _*)$/;"	constants	line:322
nameMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def nameMap[N, I <: { def name: N }](l: List[I]): Map[N, I] =$/;"	methods	line:212
neverLinkedToLockWhichGuardsYou	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def neverLinkedToLockWhichGuardsYou() {$/;"	methods	line:182
newMultiMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        override protected def newMultiMap(size: Int, _m: Map[K, Set[K]]) =$/;"	methods	line:346
newMultiMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        override protected def newMultiMap(size: Int, _m: Map[K, Set[V]]) =$/;"	methods	line:333
newMultiMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        protected def newMultiMap(size: Int, _m: Map[K, Set[V]]): S      $/;"	methods	line:224
nm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val nm = elements.getName(s)$/;"	constants	line:177
noAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val noAttrs = Attrs(ListSet.empty)$/;"	constants	line:90
not	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def not(b: Boolean) = !b$/;"	methods	line:393
notDefined	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        def notDefined(wg: ir.WcGhost) = !lgfd.exists(_.name == wg.f)        $/;"	methods	line:74
nullopt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def nullopt[A <: AnyRef](a: A) =$/;"	methods	line:395
objParams	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^\/*                    val objParams = objParametersInScope(elem)$/;"	constants	line:649
oghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def oghost(f: FieldName) = ghosts.find(_.f == f).map(_.p)$/;"	methods	line:295
oldEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val oldEnv = env$/;"	constants	line:27
oldEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val oldEnv = env$/;"	constants	line:33
oldSize	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^            val oldSize = oldSet.size$/;"	constants	line:143
op_canon	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                            val op_canon = $/;"	constants	line:51
optLocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def optLocks = optl2("locks", comma(p))$/;"	methods	line:76
optLv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def optLv = optd($/;"	methods	line:71
optd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def optd[A](p: Parser[A], d: => A) = $/;"	methods	line:21
option2UtilOption	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def option2UtilOption[X](o: Option[X]) = UtilOption(o)$/;"	methods	line:105
optl2	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def optl2[A](k: String, p: Parser[List[A]]) = opt($/;"	methods	line:25
optl3	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def optl3[A](a: String, p: Parser[List[A]], b: String) =$/;"	methods	line:29
otp_cur	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def otp_cur = if(env.ps_cur.isEmpty) None else Some(teePee(env.ps_cur.head))$/;"	methods	line:465
out	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        var out = in$/;"	local variables	line:359
outEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            def outEnv(b_succ: Int)(pred: (Int, ir.Goto)): ir.TcEnv = at(pred._2, env) {$/;"	methods	line:155
outs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            val outs = Array.make(blks.length, env_mthd)$/;"	constants	line:152
outs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    val outs = Array.make(blks.length, empty)$/;"	constants	line:16
overriddenMethodSigs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def overriddenMethodSigs(c: ir.ClassName, m: ir.MethodName): List[ir.MethodSig] = {$/;"	methods	line:212
overriddenMethodsCannotAddRequirements	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def overriddenMethodsCannotAddRequirements() {$/;"	methods	line:450
owghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def owghost(f: FieldName) = wghosts.find(_.f == f).map(_.wp)$/;"	methods	line:284
p	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    def p: Parser[ir.Path]$/;"	methods	line:55
p	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def p = lv~rep(dotf)                        ^^ { case lv~fs => lv ++ fs }$/;"	methods	line:52
p	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def p = pp          ^^ { case pp => pp.p }$/;"	methods	line:379
p1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                        val p1 = subst.path(p0)$/;"	constants	line:192
p1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                        val p1 = subst.path(p0)$/;"	constants	line:203
p_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_ctor = gfd_ctor.thisPath$/;"	constants	line:492
p_cur	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_cur = lv_cur.path$/;"	constants	line:456
p_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                            val p_f = tp_o.p + f \/\/ Canonical path of f; valid as f is not a ghost.$/;"	constants	line:49
p_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                            val p_f = tp_o.p + f \/\/ Canonical path of f; valid as f is not a ghost.$/;"	constants	line:71
p_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val p_f = f.thisPath$/;"	constants	line:491
p_ghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_ghost = lv_ghost.path$/;"	constants	line:457
p_mthd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_mthd = lv_mthd.path$/;"	constants	line:455
p_new	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_new = lv_new.path$/;"	constants	line:453
p_root	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_root = lv_root.path$/;"	constants	line:454
p_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_super = gfd_super.thisPath$/;"	constants	line:494
p_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_this = lv_this.path$/;"	constants	line:452
p_this_creator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val p_this_creator = gfd_creator.thisPath$/;"	constants	line:498
pairs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def pairs[I](lst: List[I]): List[(I, I)] = lst match {$/;"	methods	line:168
parse	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    def parse[A](p: Parser[A])(text: String) = {$/;"	methods	line:42
parseToResult	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    def parseToResult[A](p: Parser[A])(text: String) =$/;"	methods	line:47
parser	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val parser = AnnotParser(elemEnv(elem))$/;"	constants	line:475
parser	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val parser = new IrParser()$/;"	constants	line:28
path	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def path(p: ir.Path): ir.Path$/;"	methods	line:4
path	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def path(p: ir.Path): ir.Path =$/;"	methods	line:10
path	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def path(s: String): ir.Path = parseToResult(p)(s)$/;"	methods	line:414
path	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def path = ir.Path(this, List())$/;"	methods	line:103
pkgElem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                    val pkgElem = elem.asInstanceOf[PackageElement]$/;"	constants	line:421
plusMany	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def plusMany(k: K, v: Iterable[V]) = mapKey(k, _ ++ v)$/;"	methods	line:256
popCurrent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def popCurrent(p_cur: ir.Path) =$/;"	methods	line:45
pos	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^                        val pos = error.pos$/;"	constants	line:49
postDirectSuperType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def postDirectSuperType(superAtm: AnnotatedTypeMirror) {$/;"	methods	line:621
postDirectSuperTypes	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    override def postDirectSuperTypes(atm: AnnotatedTypeMirror, superAtms: jList[_ <: AnnotatedTypeMirror]) {$/;"	methods	line:639
pp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def pp(p: ir.Path, q: ir.Path): PathSubst = $/;"	methods	line:20
pp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def pp(ps: List[ir.Path], qs: List[ir.Path]): PathSubst =$/;"	methods	line:22
pp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def pp: Parser[ParsePath] = ($/;"	methods	line:374
preds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            val preds = Array.make(blks.length, List[(Int, ir.Goto)]())$/;"	constants	line:144
preds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/DataFlow.scala	/^    val preds = Array.make(blks.length, List[(Int, ir.Goto)]())$/;"	constants	line:12
prefix	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def prefix(s: String) = $/;"	methods	line:438
preservesEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def preservesEnv[R](g: => R): R = {$/;"	methods	line:32
procBlock	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^            def procBlock(b: Int) = savingEnv {$/;"	methods	line:228
prog	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    def prog: Prog$/;"	methods	line:6
prog	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val prog = new Prog(log, cds)$/;"	constants	line:36
ps_goto	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val ps_goto = goto.ps$/;"	constants	line:179
pushCurrent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def pushCurrent(p_cur: ir.Path) =$/;"	methods	line:40
q	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                    val q = f(p)$/;"	constants	line:405
q1	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                        val q1 = subst.path(q0)$/;"	constants	line:193
qualName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def qualName(elem: Element): String = {$/;"	methods	line:432
qualNameSb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def qualNameSb(sb: StringBuilder, elem: Element) {$/;"	methods	line:415
r	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                    val r = fn(hd)$/;"	constants	line:77
rawIndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawIndent = indent += 1$/;"	methods	line:150
rawIndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawIndent = super.rawWrite("<ul>")$/;"	methods	line:163
rawIndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawIndent { }$/;"	methods	line:226
rawIndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def rawIndent: Unit$/;"	methods	line:135
rawInit	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawInit = {$/;"	methods	line:174
rawUndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawUndent = indent -= 1$/;"	methods	line:151
rawUndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawUndent = super.rawWrite("<\/ul>")$/;"	methods	line:164
rawUndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawUndent { }$/;"	methods	line:227
rawUndent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def rawUndent: Unit    $/;"	methods	line:136
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    abstract override def rawWrite(msg: => String) {$/;"	methods	line:146
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    abstract override def rawWrite(msg: => String) {$/;"	methods	line:160
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    def rawWrite(msg: => String) { }$/;"	methods	line:225
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    override def rawWrite(msg: => String) {$/;"	methods	line:199
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    override def rawWrite(msg: => String) {$/;"	methods	line:207
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    override def rawWrite(msg: => String) {$/;"	methods	line:213
rawWrite	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def rawWrite(msg: => String): Unit$/;"	methods	line:134
readableReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def readableReq(annot: Readable) =$/;"	methods	line:482
refdElems	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val refdElems = referenceClosure(classTree)$/;"	constants	line:48
referenceClosure	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    def referenceClosure(tree: ClassTree): MutableSet[Element] = {$/;"	methods	line:138
referencedElements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        val referencedElements = new MutableSet()$/;"	constants	line:112
referencedElements	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        val referencedElements = new MutableSet()$/;"	constants	line:72
reified	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^    val reified = ir.mutableAttrs$/;"	constants	line:17
reifiedFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def reifiedFieldDecl(fd: ir.ReifiedFieldDecl) =$/;"	methods	line:37
reifiedFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def reifiedFieldDecl = positioned($/;"	methods	line:137
reifiedTeePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def reifiedTeePee(tp_0: ir.TeePee, f: ir.FieldName, wt_f: ir.WcTypeRef, p_guard: ir.Path): ir.TeePee = {$/;"	methods	line:393
rel	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^  def rel(lbl: Any, n: String, r: Relation[Any, _]) = {$/;"	methods	line:57
removeInvalidated	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def removeInvalidated(p: ir.Path) =$/;"	methods	line:99
report	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def report(loc: Positional, msg: String, args: Any*) {$/;"	methods	line:53
reportError	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def reportError(loc: Positional, i: ir.IrError) {$/;"	methods	line:59
reportObject	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def reportObject = elem$/;"	methods	line:61
reportObject	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def reportObject = null$/;"	methods	line:52
reportObject	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def reportObject = tree$/;"	methods	line:56
reportObject	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def reportObject: Object$/;"	methods	line:48
req	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def req(r: ir.Req) = r match {$/;"	methods	line:27
req	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def req = positioned($/;"	methods	line:94
reqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def reqs = rep(req)$/;"	methods	line:100
reqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def reqs(elem: Element): List[ir.Req] = {$/;"	methods	line:474
result	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      val result = f$/;"	constants	line:102
resultSet	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        val resultSet = new MutableSet[Element]()$/;"	constants	line:155
rfd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val rfd = prog.fieldDecl(tp.wt.c, f)$/;"	constants	line:321
rfds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def rfds = fields.flatMap {$/;"	methods	line:140
runTest	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def runTest(errorPhase: String, text: String) {$/;"	methods	line:18
s	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      var s = s0$/;"	local variables	line:166
s	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    sealed case class Attrs(private val s: Set[Attr]) {$/;"	constants	line:71
s_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val s_guard = $/;"	constants	line:544
savingEnv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def savingEnv[R](g: => R): R = {$/;"	methods	line:26
sb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        val sb = new StringBuilder()$/;"	constants	line:148
sb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                val sb = new StringBuffer            $/;"	constants	line:24
sb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        val sb = new StringBuilder()$/;"	constants	line:433
scanBodyOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        def scanBodyOf(tree: ClassTree) {$/;"	methods	line:74
search	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            def search(c: ir.ClassName): Option[ir.FieldDecl] = $/;"	methods	line:161
search	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^            def search(c: ir.ClassName): Option[ir.MethodSig] = {$/;"	methods	line:183
setPerm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def setPerm(x: ir.VarName, tq: ir.TeePee): Unit = $/;"	methods	line:62
setPos	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def setPos[X <: Positional](v: X) = {$/;"	methods	line:278
setWtRet	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def setWtRet(wt_ret: ir.WcTypeRef) = {$/;"	methods	line:56
shadowGhostsInSuperType	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def shadowGhostsInSuperType() {$/;"	methods	line:1319
shortFieldName	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def shortFieldName(f: ir.FieldName) = {$/;"	methods	line:138
size	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Relation.scala	/^    def size = mmap.size$/;"	methods	line:18
size	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^                def size = mm.size$/;"	methods	line:318
size	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val size = m1.values.map(_.size).foldLeft(0)(_ + _) \/\/ faster way?$/;"	constants	line:297
size	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val size = m1.values.map(_.size).foldLeft(0)(_ + _) \/\/ faster way?$/;"	constants	line:303
start	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def start = this + f_start$/;"	methods	line:347
startPath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def startPath(id: String): ParsePath = {$/;"	methods	line:381
step	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^            val step = in(from).flatMap(in) \/\/ x -> p -> step$/;"	constants	line:361
stmt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def stmt: Parser[ir.Stmt] = positioned($/;"	methods	line:78
strictSuperclasses	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def strictSuperclasses(c0: ir.ClassName): Set[ir.ClassName] = {$/;"	methods	line:87
string2UtilString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    implicit def string2UtilString(s: String) = UtilString(s)$/;"	methods	line:41
strs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      val strs = (arg0 :: args.toList).map(toLogString).toArray[String]$/;"	constants	line:19
subMany	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def subMany(k: K, v: Iterable[V]) = mapKey(k, _ -- v)$/;"	methods	line:257
subinterval	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def subinterval() {$/;"	methods	line:761
subintervalReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def subintervalReq(annot: Subinterval) =$/;"	methods	line:477
subsetOf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def subsetOf(c: UtilIterator[Q]) =$/;"	methods	line:126
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val subst = new PathSubst(map2)$/;"	constants	line:185
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^                            val subst = superSubstOfClass(c)$/;"	constants	line:167
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^                        val subst = superSubstOfClass(c)$/;"	constants	line:189
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val subst = ghostSubstOfType(t)$/;"	constants	line:154
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val subst = superSubstOfClass(c)$/;"	constants	line:148
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val subst = superSubstOfClass(c)$/;"	constants	line:202
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^        val subst = superSubstOfClass(c)$/;"	constants	line:214
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                val subst = ghostSubstOfTeePee(tp) + PathSubst.vp(msig.args.map(_.name), tqs.map(_.p))$/;"	constants	line:330
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                val subst = ghostSubstOfTeePee(tp) + PathSubst.vp(msig.args.map(_.name), tqs.map(_.p))$/;"	constants	line:341
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        lazy val subst = ghostSubstOfTeePee(tp_o)$/;"	constants	line:504
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val subst = PathSubst.vp(lvs_tar, tps.map(_.p))$/;"	constants	line:134
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val subst = PathSubst.vv(lvn_msig, lvn)$/;"	constants	line:323
subst	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def subst[A](key: A, value: A): Map[A,A] = $/;"	methods	line:209
substArgsInMethodSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^    def substArgsInMethodSig(msig: ir.MethodSig, lvn: List[ir.VarName]) = {$/;"	methods	line:320
substdCtorSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def substdCtorSig(tp: ir.TeePee, m: ir.MethodName, tqs: List[ir.TeePee]) = preservesEnv {$/;"	methods	line:326
substdFieldDecl	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def substdFieldDecl(tp: ir.TeePee, f: ir.FieldName) = preservesEnv {$/;"	methods	line:320
substdMethodSig	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def substdMethodSig(tp: ir.TeePee, m: ir.MethodName, tqs: List[ir.TeePee]) = preservesEnv {$/;"	methods	line:338
success	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def success(text: String) {$/;"	methods	line:91
superCtors	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def superCtors() {$/;"	methods	line:546
superDatm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val superDatm = superAtm.asInstanceOf[AnnotatedDeclaredType]$/;"	constants	line:627
superInterval	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def superInterval() {$/;"	methods	line:593
superSubstOfClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def superSubstOfClass(c: ir.ClassName) = {$/;"	methods	line:128
superToken	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^            val superToken = super.token$/;"	constants	line:16
superTypePreservesGhosts	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def superTypePreservesGhosts()$/;"	methods	line:1099
superintervals	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def superintervals(tp: ir.TeePee): Set[ir.Path] = {$/;"	methods	line:183
supertypesOfClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def supertypesOfClass(c: ir.ClassName) = log.indentedRes("supertypesOfClass(%s)", c) {$/;"	methods	line:146
sups	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def sups(t: ir.TypeRef): List[ir.TypeRef] = log.indentedRes("sups(%s)", t) {$/;"	methods	line:153
t	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def t = c~rep(g)                            ^^ { case c~lg => ir.TypeRef(c, lg, ir.noAttrs) }$/;"	methods	line:54
t_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_guard = ir.TypeRef(c_guard, List(), ir.noAttrs)$/;"	constants	line:502
t_interval	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_interval = ir.TypeRef(c_interval, List(), ir.noAttrs)$/;"	constants	line:486
t_lock	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_lock = ir.TypeRef(c_lock, List(), ir.noAttrs)$/;"	constants	line:488
t_object	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_object = ir.TypeRef(c_object, List(), ir.noAttrs)$/;"	constants	line:501
t_objectCreator	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_objectCreator = ir.TypeRef(c_object, List(gfd_creator.ghost), ir.noAttrs)$/;"	constants	line:499
t_objectCtor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_objectCtor = ir.TypeRef(c_object, List(gfd_ctor.ghost), ir.noAttrs)$/;"	constants	line:500
t_point	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_point = ir.TypeRef(c_point, List(), ir.noAttrs)$/;"	constants	line:487
t_rcvr	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val t_rcvr = typeOriginallyDefiningMethod(cd.name, md.name).get$/;"	constants	line:374
t_rcvr	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val t_rcvr = typeOriginallyDefiningMethod(cd.name, md.name).get$/;"	constants	line:237
t_scalar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_scalar = ir.TypeRef(c_scalar, List(), ir.noAttrs)$/;"	constants	line:485
t_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val t_this = thisTref(cd, ir.ctorAttrs)$/;"	constants	line:431
t_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val t_this = thisTref(cd, attrs)$/;"	constants	line:274
t_void	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^    val t_void = ir.TypeRef(c_void, List(), ir.noAttrs)$/;"	constants	line:484
tab	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        val tab = new HashMap[P,Q]()$/;"	constants	line:400
tag	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val tag = "\/\/ ERROR "$/;"	constants	line:22
tattrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val tattrs = $/;"	constants	line:458
tc	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TransitiveRelation.scala	/^    lazy val tc = $/;"	constants	line:10
tc	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def tc(text: String) {$/;"	methods	line:87
tctx	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val tctx = new TranslateContext(log, ttf)$/;"	constants	line:45
teePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def teePee(as: ir.Attrs, p: ir.Path): ir.TeePee = {$/;"	methods	line:451
teePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def teePee(as: ir.Attrs, ps: List[ir.Path]): List[ir.TeePee] = $/;"	methods	line:460
teePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def teePee(p_1: ir.Path): ir.TeePee = log.indentedRes("teePee(%s)", p_1) {$/;"	methods	line:409
teePee	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def teePee(ps: List[ir.Path]): List[ir.TeePee] = $/;"	methods	line:447
teePeeAdd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                def teePeeAdd(add: Function2[ir.TeePee, ir.TeePee, Unit], ps: List[ir.Path], qs: List[ir.Path]) = {$/;"	methods	line:262
telem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val telem = elem.asInstanceOf[TypeElement]$/;"	constants	line:247
telem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val telem = elem.asInstanceOf[TypeElement]$/;"	constants	line:294
telem	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^                val telem = ty.asInstanceOf[DeclaredType].asElement.asInstanceOf[TypeElement]$/;"	constants	line:427
tempKeys	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tempKeys = env.temp.map(_._1).toList$/;"	constants	line:275
tempValues	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tempValues = env.temp.map(_._2).toList$/;"	constants	line:276
test	/Users/niko/git/intervals-java/Analysis/Makefile	/^test:$/;"	targets	line:19
testJavaSourcePath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def testJavaSourcePath = "test"$/;"	methods	line:10
testResourcesPath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def testResourcesPath = "test-resources"    $/;"	methods	line:11
testScalaSourcePath	/Users/niko/git/intervals-java/Analysis/project/build/Intervals.scala	/^    override def testScalaSourcePath = "test"$/;"	methods	line:9
text1	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^            val text1 = text.replaceAll("\/\/[^\\n]*", "")$/;"	constants	line:27
thisPath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def thisPath = name.thisPath$/;"	methods	line:187
thisPath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def thisPath = p_this + this$/;"	methods	line:108
thisTref	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def thisTref(cd: ir.ClassDecl): ir.TypeRef =$/;"	methods	line:143
thisTref	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def thisTref(cd: ir.ClassDecl, as: ir.Attrs): ir.TypeRef = {$/;"	methods	line:137
tmpFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      val tmpFile = java.io.File.createTempFile("jpart.scala.", ".html")$/;"	constants	line:195
tmpFile	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    val tmpFile = java.io.File.createTempFile("jpart.aux.", ".txt")$/;"	constants	line:118
tmpWriter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^    val tmpWriter = new java.io.PrintWriter(tmpFile)    $/;"	constants	line:119
toLogString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Log.scala	/^      def toLogString(o: Any) = o match {$/;"	methods	line:12
toMap	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def toMap = _m$/;"	methods	line:227
toSet	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        def toSet: Set[(K, V)] = {$/;"	methods	line:315
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        override def toString = "(At element %s)".format(qualName(elem))$/;"	methods	line:62
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        override def toString = "(At tree %s)".format(tree)$/;"	methods	line:57
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^        override def toString =$/;"	methods	line:327
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s %s %s requires %s".format(as, wt, name, p_guard)$/;"	methods	line:205
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s %s".format(wt, name)$/;"	methods	line:180
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = %s->%s".format(x, p, f)$/;"	methods	line:234
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = %s->%s(%s)".format(x, p, m, qs)        $/;"	methods	line:231
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = (%s)%s;".format(x, wt, q)$/;"	methods	line:240
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = (%s)null;".format(x, wt)$/;"	methods	line:243
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = new %s %s(%s);".format(x, t, m, qs.mkString(", "))$/;"	methods	line:237
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s = super->%s(%s)".format(x, m, qs)$/;"	methods	line:228
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s hb %s;".format(p, q)        $/;"	methods	line:258
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s locks %s;".format(p, q)        $/;"	methods	line:261
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s locks".format(lp.mkString(", "))$/;"	methods	line:332
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s%s%s".format(c, wghosts.mkString(""), as)$/;"	methods	line:282
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s(%s)".format(msg, args.mkString(", "))        $/;"	methods	line:441
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s(%s)".format(msg, args.mkString(", "))$/;"	methods	line:120
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "%s->%s = %s;".format(p, f, q)$/;"	methods	line:249
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "(%s %s (%s)::_(%s)%s)".format($/;"	methods	line:172
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "<%s %s>".format(wt, name)$/;"	methods	line:194
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "<%s: %s>".format(f, wp)        $/;"	methods	line:270
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "[%s: %s %s]".format(p, wt, as)$/;"	methods	line:358
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "block(%s)".format(args.mkString(", "))$/;"	methods	line:213
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "goto %s(%s);".format(b, ps)$/;"	methods	line:220
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "locks %s".format(lp.mkString(", "))$/;"	methods	line:327
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "readableBy " + lp.mkString(", ")$/;"	methods	line:308
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "requires %s hb %s".format(lp.mkString(", "), lq.mkString(", "))$/;"	methods	line:372
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "requires %s readable by %s".format(lp.mkString(", "), lq.mkString(", "))$/;"	methods	line:366
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "requires %s subinterval of %s".format(lp.mkString(", "), lq.mkString(", "))$/;"	methods	line:369
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "requires %s writable by %s".format(lp.mkString(", "), lq.mkString(", "))$/;"	methods	line:363
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "return %s;".format(p)        $/;"	methods	line:246
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "subinterval pop %s".format(x)$/;"	methods	line:255
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "subinterval push %s locks %s".format(x, addCheckedArglocks.mkString(", "))$/;"	methods	line:252
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "super %s(%s)".format(m, qs)$/;"	methods	line:225
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "writableBy " + lp.mkString(", ")$/;"	methods	line:313
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = "{%s}".format(s.mkString(""))$/;"	methods	line:88
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = (lv :: fs).mkString(".")$/;"	methods	line:349
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = c$/;"	methods	line:58
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = name$/;"	methods	line:100
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString = {$/;"	methods	line:318
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString =$/;"	methods	line:145
toString	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def toString =$/;"	methods	line:160
token	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^        override def token: Parser[Token] = {$/;"	methods	line:15
tokens	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^      val tokens = new lexical.Scanner(text)$/;"	constants	line:43
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:100
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:112
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:117
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:79
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp = tp_super$/;"	constants	line:34
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val tp = teePee(p)$/;"	constants	line:452
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                            val tp = teePee(g.p)$/;"	constants	line:215
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:194
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp = teePee(ir.noAttrs, p)$/;"	constants	line:229
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp = tp_super$/;"	constants	line:163
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^            val tp = teePee(p)$/;"	constants	line:32
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^        val tp = ir.TeePee(wt, lv.path, ir.ghostAttrs)$/;"	constants	line:76
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp = teePee(reified, p)$/;"	constants	line:120
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp = tp_super$/;"	constants	line:127
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp = tp_super$/;"	constants	line:93
tp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val tp = teePee(as, p)$/;"	constants	line:25
tp_0	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                    val tp_0 = teePee(ir.Path(lv, rev_fs))$/;"	constants	line:421
tp_ctor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def tp_ctor = teePee(ir.gfd_ctor.thisPath)$/;"	methods	line:466
tp_cur	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^    def tp_cur = otp_cur.get$/;"	methods	line:14
tp_dep	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                                    val tp_dep = teePee(p_dep)$/;"	constants	line:463
tp_dep	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                                    val tp_dep = teePee(p_dep)$/;"	constants	line:471
tp_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                        val tp_f = ir.TeePee(ir.t_interval, tp_0.p + f, tp_0.as.withGhost)$/;"	constants	line:425
tp_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                        val tp_f = ir.TeePee(ir.t_interval, tp_0.p + f, tp_0.as.withGhost)$/;"	constants	line:432
tp_f	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^         val tp_f = ir.TeePee(wt_f, tp_0.p + f, tp_0.as.withGhost)                    $/;"	constants	line:353
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                            val tp_guard = teePee(ir.ghostAttrs, p_guard)                    $/;"	constants	line:48
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                            val tp_guard = teePee(ir.ghostAttrs, p_guard)$/;"	constants	line:69
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val tp_guard = teePee(p_guard)$/;"	constants	line:394
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                            val tp_guard = teePee(ir.ghostAttrs, p_guard)                    $/;"	constants	line:175
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                            val tp_guard = teePee(ir.ghostAttrs, p_guard)$/;"	constants	line:188
tp_guard	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tp_guard = teePee(fd.p_guard)$/;"	constants	line:444
tp_mthd	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tp_mthd = ir.TeePee(ir.t_interval, ir.p_mthd, ir.ghostAttrs)$/;"	constants	line:433
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp_o = teePee(ir.noAttrs, p_o)$/;"	constants	line:44
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp_o = teePee(ir.noAttrs, p_o)$/;"	constants	line:63
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp_o = teePee(ir.noAttrs, p_o)$/;"	constants	line:169
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp_o = teePee(ir.noAttrs, p_o)$/;"	constants	line:180
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp_o = teePee(reified, p_o)$/;"	constants	line:111
tp_o	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp_o = teePee(reified, p_o)$/;"	constants	line:99
tp_super	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def tp_super = \/\/ tp_super always refers to the FIRST supertype$/;"	methods	line:468
tp_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def tp_this = teePee(ir.p_this)    $/;"	methods	line:467
tp_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tp_this = ir.TeePee(t_this, ir.p_this, ir.noAttrs)$/;"	constants	line:432
tp_this	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^        val tp_this = ir.TeePee(t_this, ir.p_this, ir.noAttrs)$/;"	constants	line:275
tp_v	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp_v = teePee(ir.noAttrs, p_v)$/;"	constants	line:64
tp_v	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tp_v = teePee(ir.noAttrs, p_v)$/;"	constants	line:181
tp_x	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp_x = teePee(x.path)                                        $/;"	constants	line:95
tp_x	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tp_x = teePee(x.path)$/;"	constants	line:125
tp_x	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                        val tp_x = teePee(x.path)$/;"	constants	line:212
tp_x	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tp_x = teePee(x.path)$/;"	constants	line:148
tps	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                    val tps = teePee(ir.ghostAttrs, ps)$/;"	constants	line:263
tps	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val tps = teePee(ir.noAttrs, succ.ps)$/;"	constants	line:133
tps	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^            val tps = teePee(ir.ghostAttrs, ps)$/;"	constants	line:91
tq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tq = teePee(ir.noAttrs, q)$/;"	constants	line:113
tq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tq = teePee(ir.noAttrs, q)$/;"	constants	line:118
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:35
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:80
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:84
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:89
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^                    val tqs = teePee(ir.ghostAttrs, qs)$/;"	constants	line:264
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:164
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:195
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:199
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:204
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^            val tqs = teePee(ir.ghostAttrs, qs)$/;"	constants	line:92
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tqs = teePee(ir.noAttrs, qs)$/;"	constants	line:94
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tqs = teePee(reified, qs)$/;"	constants	line:121
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tqs = teePee(reified, qs)$/;"	constants	line:128
tqs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/WfCheck.scala	/^                    val tqs = teePee(reified, qs)$/;"	constants	line:138
transitiveClosure	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Util.scala	/^    def transitiveClosure[V](in: MultiMap[V, V]): MultiMap[V, V] = {$/;"	methods	line:358
tref	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def tref(t: ir.TypeRef) = $/;"	methods	line:9
ttf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val ttf = createFactory(currentRoot)$/;"	constants	line:44
ttf	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateContext.scala	/^    val ttf: TranslateTypeFactory$/;"	constants	line:11
tv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        val tv = new TreeVisitor()$/;"	constants	line:154
typeElemKinds	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^                val typeElemKinds = Set(EK.CLASS, EK.INTERFACE, EK.ENUM, EK.ANNOTATION_TYPE)$/;"	constants	line:53
typeOriginallyDefiningMethod	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/Prog.scala	/^    def typeOriginallyDefiningMethod(c: ir.ClassName, m: ir.MethodName): Option[ir.TypeRef] = {$/;"	methods	line:200
typeProcess	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^    override def typeProcess($/;"	methods	line:36
untilTick	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^                def untilTick(prefix: String, in: Reader[Char]): (String, Reader[Char]) =$/;"	methods	line:18
unwanted	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^        val unwanted = tp.as.diff(as)$/;"	constants	line:453
userClassNames	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/CheckPhase.scala	/^    val userClassNames = Set(prog.cds_user.map(_.name): _*)$/;"	constants	line:9
userHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def userHb(tp0: ir.TeePee, tq0: ir.TeePee) = $/;"	methods	line:228
userHbPair	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def userHbPair(tp0: ir.TeePee, tq0: ir.TeePee): Option[(ir.TeePee, ir.TeePee)] = $/;"	methods	line:215
value	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^            val value = annValue(am)$/;"	constants	line:194
visitClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitClass(tree: ClassTree, v: Void): Void = {$/;"	methods	line:79
visitExecutable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitExecutable(elem: ExecutableElement, v: Void): Void = {$/;"	methods	line:114
visitMemberSelect	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitMemberSelect(tree: MemberSelectTree, v: Void): Void = {$/;"	methods	line:83
visitMethod	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitMethod(tree: MethodTree, v: Void): Void = {$/;"	methods	line:98
visitMethodInvocation	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitMethodInvocation(tree: MemberInvocationTree, v: Void): Void = {$/;"	methods	line:88
visitNewClass	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitNewClass(tree: NewClassTree, v: Void): Void = {$/;"	methods	line:93
visitType	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitType(elem: TypeElement, v: Void): Void = {$/;"	methods	line:120
visitTypeParameter	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitTypeParameter(elem: TypeParameterElement, v: Void): Void = {$/;"	methods	line:126
visitVariable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitVariable(elem: VariableElement, v: Void): Void = {$/;"	methods	line:131
visitVariable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IntervalsChecker.scala	/^        override def visitVariable(tree: VariableTree, v: Void): Void = {$/;"	methods	line:104
vp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def vp(lv: List[ir.VarName], q: List[ir.Path]): PathSubst = $/;"	methods	line:26
vp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def vp(lv: ir.VarName, q: ir.Path): PathSubst = $/;"	methods	line:24
vv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def vv(lv1: List[ir.VarName], lv2: List[ir.VarName]): PathSubst =$/;"	methods	line:30
vv	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/PathSubst.scala	/^    def vv(lv1: ir.VarName, lv2: ir.VarName): PathSubst =$/;"	methods	line:28
wf	/Users/niko/git/intervals-java/Analysis/test/ch/ethz/intervals/TestAnalysis.scala	/^    def wf(text: String) {$/;"	methods	line:79
wg	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def wg = "<"~f~":"~wp~">"                   ^^ { case _~f~_~wp~_ => ir.WcGhost(f, wp) }    $/;"	methods	line:57
wghost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def wghost(g: ir.WcGhost) =$/;"	methods	line:21
wghosts	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def wghosts(env: TranslateEnv)(annty: AnnotatedTypeMirror) = {$/;"	methods	line:440
withAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withAttrs(as: Attrs) = ir.WcTypeRef(c, wghosts, as)$/;"	methods	line:283
withAttrs	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        override def withAttrs(as: Attrs) = ir.TypeRef(c, ghosts, as)$/;"	methods	line:294
withCtor	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withCtor = this + AttrCtor$/;"	methods	line:78
withCurrent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TracksEnvironment.scala	/^    def withCurrent[R](p_cur: ir.Path)(g: => R): R = $/;"	methods	line:51
withCurrent	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withCurrent(ps_cur: List[ir.Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:387
withGhost	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withGhost = this + AttrGhost$/;"	methods	line:81
withHb	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withHb(hb: TransitiveRelation[Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:394
withInterface	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withInterface = this + AttrInterface$/;"	methods	line:75
withInvalidated	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withInvalidated(ps_invalidated: Set[ir.Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:391
withLocks	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withLocks(locks: IntransitiveRelation[Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:396
withMutable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withMutable = this + AttrMutable$/;"	methods	line:84
withPerm	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withPerm(perm: Map[ir.VarName, ir.TeePee]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:389
withReadable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withReadable(readable: IntransitiveRelation[Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:392
withRet	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withRet(wt_ret: ir.WcTypeRef) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:388
withSubinterval	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withSubinterval(subinterval: TransitiveRelation[Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:395
withTemp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withTemp(temp: Map[ir.Path, ir.Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:390
withWritable	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        def withWritable(writable: IntransitiveRelation[Path]) = TcEnv(ps_cur, wt_ret, perm, temp, ps_invalidated, readable, writable, hb, subinterval, locks)$/;"	methods	line:393
wp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseParser.scala	/^    def wp = ($/;"	methods	line:57
wp	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    override def wp = super.wp                  \/\/ Defined in BaseParser$/;"	methods	line:56
wpath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def wpath(wp: ir.WcPath) = wp match {$/;"	methods	line:12
wpath	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def wpath(s: String): ir.WcPath = parseToResult(wp)(s)        $/;"	methods	line:415
writableReq	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^        def writableReq(annot: Writable) =$/;"	methods	line:487
wt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/IrParser.scala	/^    def wt = c~rep(wg)~attrs                    ^^ { case c~lwg~la => ir.WcTypeRef(c, lwg, la) }$/;"	methods	line:58
wt	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ir.scala	/^        val wt: WcTypeRef$/;"	constants	line:184
wtref	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/BaseSubst.scala	/^    def wtref(wt: ir.WcTypeRef) =$/;"	methods	line:24
wtref	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TranslateTypeFactory.scala	/^    def wtref(env: TranslateEnv)(annty: AnnotatedTypeMirror) = {$/;"	methods	line:454
wts_tar	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/TypeCheck.scala	/^                val wts_tar = blk_tar.args.map(arg => subst.wtref(arg.wt))$/;"	constants	line:135
xs_args	/Users/niko/git/intervals-java/Analysis/src/ch/ethz/intervals/ComputeRelations.scala	/^                val xs_args = blks(b_succ).args.map(_.name)$/;"	constants	line:178
