!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
%Gen.java	/Users/niko/git/intervals-java/Harmonic/Makefile	/^%Gen.java: %Gen.py$/;"	targets	line:26
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^public interface AsyncBlock<R, A> extends Block<R, A> {$/;"	interface	line:3
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^public interface Block<R, A> {$/;"	interface	line:3
Abstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^public @interface Abstract {$/;"	interface	line:3
AbstractClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AbstractClass = Class(classOf[harmonic.lang.Abstract])$/;"	constants	line:171
AccessField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessField($/;"	classes	line:524
AccessHarmonicAccessor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessHarmonicAccessor($/;"	classes	line:468
AccessIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessIndex($/;"	classes	line:494
AccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class AccessMap(val context: Name.Class)$/;"	classes	line:559
AccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class AccessPath extends ValuePath {$/;"	classes	line:437
AccessVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessVar($/;"	classes	line:448
All	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    val All = List(Abstract, Mutable, Override, Static, Unscheduled)$/;"	constants	line:14
AllFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllFieldSymbols = new GuardedBy[List[VarSymbol.Field]](merge)$/;"	constants	line:186
AllIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllIntervalSymbols = new GuardedBy[List[VarSymbol.Field]](merge)$/;"	constants	line:189
AmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousInheritance($/;"	classes	line:84
AmbiguousMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousMember(options: List[SymTab.MemberEntry]) extends Error {$/;"	classes	line:256
Annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Annotation($/;"	classes	line:286
Anon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Anon {$/;"	traits	line:7
AnonTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonTuple extends Anon {$/;"	traits	line:26
AnonVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonVar extends Anon {$/;"	traits	line:18
Any	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    type Any = VarSymbol[Name.Var]$/;"	types	line:7
AnyOf3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    abstract trait AnyOf3[+A, +B, +C]$/;"	traits	line:232
Application	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^public interface Application {$/;"	interface	line:3
ApplicationContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^public interface ApplicationContext {$/;"	interface	line:9
Arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Arg {$/;"	classes	line:24
ArrayClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayClass = Class(classOf[harmonic.lang.Array[_]])$/;"	constants	line:168
ArrayElem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayElem = Member(ArrayClass, "E")$/;"	constants	line:169
Assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Assign(lvalues: List[Lvalue], rvalues: List[Expr]) extends LowerStmt {$/;"	classes	line:665
Ast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^abstract class Ast {$/;"	classes	line:10
AstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class AstPattern[+S <: VSym] extends Node {$/;"	classes	line:339
AsyncBlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncBlockClass = Class(classOf[harmonic.lang.AsyncBlock[_, _]])$/;"	constants	line:177
AsyncInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val AsyncInterval = Type.Class(Name.AsyncIntervalClass, List())$/;"	constants	line:41
AsyncIntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncIntervalClass = Class(classOf[ch.ethz.intervals.AsyncInterval])$/;"	constants	line:163
At	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        class At(node: Ast.Node) {$/;"	classes	line:24
Block	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Block($/;"	classes	line:617
BlockA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockA = Member(BlockClass, "A")$/;"	constants	line:179
BlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockClass = Class(classOf[harmonic.lang.Block[_, _]])$/;"	constants	line:176
BlockParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockParent = Member(BlockClass, "Parent")$/;"	constants	line:180
BlockR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockR = Member(BlockClass, "R")$/;"	constants	line:178
Body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Body(stmts: List[Stmt]) extends Node {$/;"	classes	line:577
Bounder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Bounder(Rel: TcRel) extends TransitiveCloser[Type.Ref] {$/;"	classes	line:399
BoxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class BoxInfo($/;"	classes	line:89
BoxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class BoxedArray(accessMap: AccessMap)$/;"	classes	line:591
ByteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^case class ByteCode(global: Global) {$/;"	classes	line:33
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^\/** Given a class C, creates a flattened list$/;"	classes	line:11
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^  * can still override one another if a third class C extends both A and B$/;"	classes	line:11
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        \/\/ to construct the merge, Python 2.3 will refuse to create the class C and $/;"	classes	line:30
CLASSPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	macro	line:11
CLASSPATH=$(JARPATH)	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	targets	line:11
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:888
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:931
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = RelName$/;"	types	line:847
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:889
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:932
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = RelBase$/;"	types	line:848
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = ClassSymbol$/;"	types	line:947
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:863
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:904
Call	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Call(receiver: UntypedOwner, methodId: MethodId, args: List[Path.Ref]) extends Ref {$/;"	classes	line:32
CannotResolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CannotResolve(name: String) extends Error {$/;"	classes	line:179
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Cast(expr: NE, typeRef: TR) extends ResolveTlExpr {$/;"	classes	line:644
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Cast(ty: Type.Ref, path: Ref) extends Ref {$/;"	classes	line:23
Check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^case class Check(global: Global) {$/;"	classes	line:11
CircularInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CircularInheritance($/;"	classes	line:53
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Class($/;"	classes	line:35
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Class(name: Name.Class, typeArgs: List[Type.Arg]) extends Ref {$/;"	classes	line:12
ClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassDecl($/;"	classes	line:161
ClassEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ClassEnv = new GuardedBy[Env](create)$/;"	constants	line:150
ClassFromCompiledSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^abstract class ClassFromCompiledSource extends ClassSymbol$/;"	classes	line:6
ClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClassName(name: Name.Class) extends QualName {$/;"	classes	line:817
ClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ClassParam = new GuardedBy[Ast.Lower.Param[VarSymbol.Field]](create)    $/;"	constants	line:146
ClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^abstract class ClassSymbol extends Symbol {$/;"	classes	line:8
ClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassType(className: ClassName, typeArgs: List[TypeArg]) extends ResolveTypeRef {$/;"	classes	line:494
ClassWriter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ClassWriter($/;"	classes	line:347
ClasslessMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class ClasslessMember(text: String) extends UnloweredMember {$/;"	classes	line:150
ClasslessMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClasslessMemberName(name: Name.ClasslessMember) extends UnloweredMemberName {$/;"	classes	line:834
CompUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class CompUnit($/;"	classes	line:125
CompilationFailed	/Users/niko/git/intervals-java/Harmonic/test.py	/^class CompilationFailed(Exception):$/;"	class	line:190
Constant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Constant(obj: Object) extends Ref {$/;"	classes	line:26
ConstrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ConstrainedType(path: PathNode, typeArgs: List[TypeArg]) extends ParseTypeRef {$/;"	classes	line:477
Constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val Constructor = new GuardedBy[MethodSymbol](create)$/;"	constants	line:154
ControlFlowException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^public abstract class ControlFlowException extends RuntimeException {$/;"	class	line:4
DEBUGLOGS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^DEBUGLOGS=..\/debug-logs$/;"	macro	line:15
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    case class Data($/;"	classes	line:26
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^    class Data(pos: Position) {$/;"	classes	line:23
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    class Data {$/;"	classes	line:8
DebugData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class DebugData(val threadId: Int) {$/;"	classes	line:100
DeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class DeclareVarLvalue($/;"	classes	line:402
DiffStaticClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DiffStaticClasses(className1: Name.Class, className2: Name.Class) extends Error {$/;"	classes	line:188
E	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^public interface Array<E> {$/;"	interface	line:3
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = ExtendsArg$/;"	types	line:856
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = ExtendsArg$/;"	types	line:897
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = TypedPath$/;"	types	line:940
ElemLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ElemLvalue extends TreeLvalue {$/;"	classes	line:396
Entry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class Entry {$/;"	classes	line:4
Env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^case class Env($/;"	classes	line:24
Equater	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Equater extends TransitiveCloser[Path.Ref] {$/;"	classes	line:305
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^abstract class Error {$/;"	classes	line:10
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    case class Error(pos: Position, msgKey: String, msgArgs: List[String]) {$/;"	classes	line:8
ExpClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpClassName(path: String) extends Error {$/;"	classes	line:236
ExpPathNotClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpPathNotClass(className: Name.Class) extends Error {$/;"	classes	line:224
ExpStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpStatic(memberVar: Name.Member) extends Error {$/;"	classes	line:242
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = LowerTlExpr$/;"	types	line:942
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ParseTlExpr$/;"	types	line:858
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ResolveTlExpr$/;"	types	line:899
ExtendedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ExtendedClasses = new GuardedBy[List[(Ast.Lower.ExtendsDecl, List[Path.Typed])]](gather)    $/;"	constants	line:200
ExtendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class ExtendedInterval(inter: Interval) {$/;"	classes	line:173
ExtendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedIterable[E](iterable: Iterable[E]) {$/;"	classes	line:44
ExtendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedList[E](list: List[E]) {$/;"	classes	line:67
ExtendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    case class ExtendedMap(m: Map) {$/;"	classes	line:37
ExtendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class ExtendedMethodVisitor(mvis: asm.MethodVisitor) {$/;"	classes	line:168
ExtendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedOption[E](option: Option[E]) {$/;"	classes	line:81
ExtendedParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedParam(pat: Param[VSym]) {$/;"	classes	line:967
ExtendedTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class ExtendedTypeRef(ty: Type.Ref) $/;"	classes	line:108
ExtendedTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedTypedPath(path: Path.Typed) {$/;"	classes	line:976
ExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ExtendsArg extends Node$/;"	classes	line:320
ExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ExtendsDecl($/;"	classes	line:302
ExtendsNotEquiv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExtendsNotEquiv($/;"	classes	line:66
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:866
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:907
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = VarSymbol.Field$/;"	types	line:950
FailedException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            case class FailedException() extends Exception$/;"	classes	line:731
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Field(owner: Owner, name: MN, ty: Ty) extends ResolveTlExpr {$/;"	classes	line:681
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Field(base: UntypedOwner, f: Name.Member) extends Ref {$/;"	classes	line:29
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    class Field($/;"	classes	line:9
FieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldDecl($/;"	classes	line:249
FieldKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/FieldKind.scala	/^sealed abstract class FieldKind/;"	classes	line:14
FieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldLvalue($/;"	classes	line:429
FileReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class FileReader(interFile: File, seq: PagedSeq[Char], off: Int) extends PagedSeqReader(seq, off) {$/;"	classes	line:419
Foo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * Given a class Foo, the following class files are generated:$/;"	classes	line:26
FragmentFile	/Users/niko/git/intervals-java/Harmonic/test.py	/^class FragmentFile(object):$/;"	class	line:210
GENERATEDJAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDJAVA=$(subst Gen.py,Gen.java,${GENERATEDPY})$/;"	macro	line:10
GENERATEDPY	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDPY=$(wildcard src\/harmonic\/compiler\/*Gen.py)$/;"	macro	line:9
Gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^case class Gather(global: Global) {$/;"	classes	line:10
GatherExtends	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^case class GatherExtends(global: Global) {$/;"	classes	line:21
GatherOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^case class GatherOverrides(global: Global) {$/;"	classes	line:11
Ghost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Ghost(name: Name.Member) extends MemberEntry {$/;"	classes	line:26
HPROFOPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:13
HPROFOPTS=-agentlib	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	targets	line:13
Harmonic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    sealed abstract class Harmonic(val op: Int) extends MethodKind$/;"	classes	line:13
HarmonicTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public HarmonicTask(String name) {$/;"	method	line:12
HarmonicTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^public abstract class HarmonicTask extends AbstractTask {$/;"	class	line:10
HarmonicTaskClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val HarmonicTaskClass = Class(classOf[harmonic.runtime.HarmonicTask])$/;"	constants	line:166
Helper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^public class Helper {$/;"	class	line:6
HlLexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class HlLexical extends StdLexical with HlTokens {$/;"	classes	line:28
HlTokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    trait HlTokens extends StdTokens {$/;"	traits	line:22
IN_BLOCK	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val IN_BLOCK = 1$/;"	constants	line:725
IOError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class IOError(err: java.io.IOError) extends Error {$/;"	classes	line:143
ImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpThis(ty: Ty) extends ParseTlExpr {$/;"	classes	line:745
ImpVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpVoid(ty: Ty) extends ResolveTlExpr {$/;"	classes	line:740
Import	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    sealed abstract class Import$/;"	classes	line:48
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportAll($/;"	classes	line:155
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportAll(qualName: Name.Qual)$/;"	classes	line:49
ImportDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ImportDecl extends Node$/;"	classes	line:146
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportOne($/;"	classes	line:148
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportOne(qualName: Name.Qual, as: String)$/;"	classes	line:50
InEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    class InEnv(env: Env) {$/;"	classes	line:18
InEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnv(env: Env) {$/;"	classes	line:349
InEnvStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnvStmt(env: Env, optStmts: Option[mutable.ListBuffer[out.Stmt]]) extends InEnv(env) {$/;"	classes	line:693
InScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    case class InScope($/;"	classes	line:249
Index	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Index(array: Path.Ref, index: Path.Ref) extends Ref {$/;"	classes	line:35
InferredTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InferredTypeRef() extends OptionalParseTypeRef with OptionalResolveTypeRef {$/;"	classes	line:465
InitMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InitMethod = Method(List("<init>"))$/;"	constants	line:185
InlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InlineInterval($/;"	classes	line:749
InlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val InlineInterval = Type.Class(Name.InlineIntervalClass, List())$/;"	constants	line:42
InlineIntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InlineIntervalClass = Class(classOf[ch.ethz.intervals.InlineInterval])$/;"	constants	line:164
Instance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    class Instance($/;"	classes	line:17
InstanceField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class InstanceField(name: Name.Member) extends MemberEntry {$/;"	classes	line:18
IntConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class IntConstant($/;"	classes	line:427
Interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Interval = Type.Class(Name.IntervalClass, List())$/;"	constants	line:40
IntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val IntervalClass = Class(classOf[ch.ethz.intervals.Interval])$/;"	constants	line:162
IntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class IntervalDecl($/;"	classes	line:193
Intrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^case class Intrinsic(global: Global) {$/;"	classes	line:3
IntrinsicControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^public class IntrinsicControlFlow {$/;"	class	line:5
IntrinsicMathGen	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^public class IntrinsicMathGen {$/;"	class	line:4
InvalidMetaData	/Users/niko/git/intervals-java/Harmonic/test.py	/^class InvalidMetaData(Exception):$/;"	class	line:187
JARFILES	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARFILES=$(wildcard lib\/*.jar)$/;"	macro	line:7
JARPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARPATH=$(subst .jar ,.jar:,${JARFILES})$/;"	macro	line:8
JAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVA=java$/;"	macro	line:1
JAVAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVAC=javac$/;"	macro	line:2
JPROFILEROPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	macro	line:14
JPROFILEROPTS=-javaagent	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	targets	line:14
Java	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/FieldKind.scala	/^    case class Java($/;"	classes	line:6
Java	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    case class Java($/;"	classes	line:17
JavaOpcode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    sealed abstract class JavaOpcode(val op: Int)$/;"	classes	line:7
LIBDIR	/Users/niko/git/intervals-java/Harmonic/Makefile	/^LIBDIR=$(CURDIR)\/lib$/;"	macro	line:12
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:865
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:906
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = VarSymbol.Local$/;"	types	line:949
Literal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Literal(obj: Object, ty: Ty) extends ResolveTlExpr {$/;"	classes	line:660
LoadedData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val LoadedData = new GuardedBy[Data](header)$/;"	constants	line:38
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Local(v: Name.LocalVar) extends Ref {$/;"	classes	line:20
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    class Local($/;"	classes	line:24
LocalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class LocalName(name: Name.LocalVar) extends VarName {$/;"	classes	line:838
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class LocalVar($/;"	classes	line:136
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class LocalVar(name: Name.LocalVar) extends Entry {$/;"	classes	line:29
Lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^case class Lower(global: Global) {$/;"	classes	line:16
LowerMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LowerMembers = new GuardedBy[List[LowerMember]](create)$/;"	constants	line:158
LowerStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerStmt extends ResolveStmt with TypedNode$/;"	traits	line:595
LowerTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerTlExpr extends ResolveTlExpr with LowerStmt with TypedNode$/;"	traits	line:605
LoweredMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LoweredMethods = new GuardedBy[List[(MethodSymbol, Ast.Lower.MethodDecl)]](merge)$/;"	constants	line:178
LoweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LoweredSource = new GuardedBy[Ast.Lower.ClassDecl](merge)$/;"	constants	line:181
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = ElemLvalue$/;"	types	line:943
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = TreeLvalue$/;"	types	line:859
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = TreeLvalue$/;"	types	line:900
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:179
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:76
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:82
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:107
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:116
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:137
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:167
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:211
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:233
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:242
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:295
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:305
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:314
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:323
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:344
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:353
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:374
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:383
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:414
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:436
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:446
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:468
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:85
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:190
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:247
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:98
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:20
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:25
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:30
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:18
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:29
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:38
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:47
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:64
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:73
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:90
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:69
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXLOCALS = 99$/;"	define	line:16
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXLOCALS = 99$/;"	define	line:31
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:117
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:126
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:145
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:154
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:177
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:29
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:60
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:69
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:80
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:89
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:98
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:69
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXLOCALS = 99$/;"	define	line:22
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXLOCALS = 99$/;"	define	line:27
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXLOCALS = 99$/;"	define	line:32
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXLOCALS = 99$/;"	define	line:37
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:104
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:125
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:134
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:155
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:165
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:187
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:198
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:221
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:230
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:251
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:261
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:283
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:293
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:302
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:311
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:332
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:341
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:362
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:371
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:392
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:402
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:424
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:44
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:65
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:74
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:95
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:139
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:150
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields.s	/^    MAXLOCALS = 99$/;"	define	line:16
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXLOCALS = 99$/;"	define	line:46
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXLOCALS = 99$/;"	define	line:65
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:145
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:167
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:414
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:436
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:149
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:155
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:68
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXLOCALS = 99$/;"	define	line:20
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXLOCALS = 99$/;"	define	line:25
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:199
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:209
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:43
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXLOCALS = 99$/;"	define	line:50
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:199
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:209
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:272
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:293
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:302
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:323
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:332
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:353
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:363
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:385
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:148
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:154
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:104
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:125
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:134
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:155
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:165
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:187
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:198
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:221
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:230
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:251
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:261
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:283
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:293
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:302
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:311
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:332
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:341
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:362
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:371
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:392
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:402
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:424
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:44
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:65
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:74
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:95
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:51
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:63
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields.s	/^    MAXLOCALS = 99$/;"	define	line:16
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$9$9.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$9$9.s	/^    MAXLOCALS = 99$/;"	define	line:47
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:145
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:167
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:76
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:82
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:199
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:209
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:37
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:43
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$5$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$5$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:28
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:39
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:59
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:68
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:79
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:88
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:56
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:179
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXLOCALS = 99$/;"	define	line:102
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXLOCALS = 99$/;"	define	line:85
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:179
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:111
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:117
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:145
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:167
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:61
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:67
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:23
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:43
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:63
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:74
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:83
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$22$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$22$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:106
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:37
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:46
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:57
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:66
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:77
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:86
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:97
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:55
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:199
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:209
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:272
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:293
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:302
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:323
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:332
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:353
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:363
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:385
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:43
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:179
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:201
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:210
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:272
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:293
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:302
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:323
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:332
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:353
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:363
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:385
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:168
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:174
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:19
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:30
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:57
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:19
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:30
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:57
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:19
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:51
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:57
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:105
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:114
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:135
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:146
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:169
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:178
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:199
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:209
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:231
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:241
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:263
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:273
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:282
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:291
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:312
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:321
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:342
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:351
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:372
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:382
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:404
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:54
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:75
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:84
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:61
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:67
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$9$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:18
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:29
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:38
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:58
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:69
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:78
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:45
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$22$5.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$22$5.s	/^    MAXLOCALS = 99$/;"	define	line:48
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:106
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:37
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:46
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:57
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:66
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:77
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:86
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:97
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:55
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:17
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:49
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:21
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:30
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:65
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:18
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:29
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:38
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:19
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:34
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:40
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:56
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:62
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:24
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:41
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:59
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:65
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading.s	/^    MAXLOCALS = 99$/;"	define	line:10
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:19
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:15
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:26
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:35
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:46
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXLOCALS = 99$/;"	define	line:55
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:13
MAXLOCALS	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Static.s	/^    MAXLOCALS = 99$/;"	define	line:29
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:178
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:75
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:81
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:106
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:115
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:136
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:166
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:210
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:232
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:241
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:294
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:304
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:313
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:322
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:343
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:352
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:373
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:382
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:413
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:435
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:445
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:467
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:84
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:189
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:246
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:97
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:19
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:24
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:29
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:17
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:28
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:37
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:46
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:63
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:72
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:89
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:68
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXSTACK = 99$/;"	define	line:15
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^    MAXSTACK = 99$/;"	define	line:30
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:116
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:125
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:144
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:153
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:176
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:28
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:59
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:68
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:79
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:88
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:97
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:68
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXSTACK = 99$/;"	define	line:21
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXSTACK = 99$/;"	define	line:26
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXSTACK = 99$/;"	define	line:31
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^    MAXSTACK = 99$/;"	define	line:36
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:103
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:124
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:133
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:154
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:164
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:186
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:197
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:220
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:229
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:250
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:260
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:282
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:292
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:301
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:310
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:331
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:340
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:361
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:370
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:391
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:401
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:423
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:43
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:64
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:73
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:94
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:138
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:149
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields.s	/^    MAXSTACK = 99$/;"	define	line:15
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXSTACK = 99$/;"	define	line:45
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^    MAXSTACK = 99$/;"	define	line:64
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:144
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:166
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:413
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:435
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:148
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:154
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:67
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXSTACK = 99$/;"	define	line:19
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXSTACK = 99$/;"	define	line:24
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:198
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:208
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:42
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^    MAXSTACK = 99$/;"	define	line:49
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:198
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:208
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:271
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:292
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:301
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:322
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:331
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:352
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:362
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:384
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:147
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:153
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:103
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:124
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:133
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:154
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:164
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:186
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:197
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:220
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:229
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:250
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:260
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:282
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:292
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:301
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:310
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:331
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:340
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:361
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:370
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:391
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:401
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:423
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:43
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:64
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:73
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:94
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:50
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:62
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields.s	/^    MAXSTACK = 99$/;"	define	line:15
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$9$9.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$9$9.s	/^    MAXSTACK = 99$/;"	define	line:46
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:144
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:166
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:75
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:81
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:198
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:208
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:36
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:42
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$5$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$5$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:27
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:38
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:58
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:67
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:78
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:87
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:55
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:178
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXSTACK = 99$/;"	define	line:101
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^    MAXSTACK = 99$/;"	define	line:84
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:178
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:110
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:116
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:144
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:166
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:60
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:66
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:22
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:42
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:62
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:73
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:82
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$22$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$22$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:105
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:36
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:45
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:56
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:65
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:76
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:85
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:96
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:54
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:198
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:208
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:271
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:292
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:301
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:322
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:331
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:352
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:362
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:384
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:42
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:178
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:200
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:209
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:271
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:292
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:301
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:322
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:331
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:352
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:362
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:384
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:167
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:173
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:18
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:29
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:56
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:18
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:29
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:56
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:18
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:50
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:56
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:104
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:113
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:134
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:145
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:168
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:177
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:198
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:208
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:230
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:240
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:262
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:272
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:281
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:290
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:311
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:320
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:341
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:350
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:371
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:381
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:403
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:53
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:74
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:83
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:60
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:66
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$9$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:17
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:28
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:37
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:57
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:68
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:77
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:44
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$22$5.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$22$5.s	/^    MAXSTACK = 99$/;"	define	line:47
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:105
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:36
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:45
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:56
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:65
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:76
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:85
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:96
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:54
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:16
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:48
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:20
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:29
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:64
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:17
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:28
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:37
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:18
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:33
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:39
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:55
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:61
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:23
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:40
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:58
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:64
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading.s	/^    MAXSTACK = 99$/;"	define	line:9
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:18
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:14
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:25
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:34
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:45
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^    MAXSTACK = 99$/;"	define	line:54
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:12
MAXSTACK	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Static.s	/^    MAXSTACK = 99$/;"	define	line:28
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = (MethodSymbol, MethodSignature[Pattern.Anon])$/;"	types	line:952
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:868
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:909
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = MemberName $/;"	types	line:933
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = RelName $/;"	types	line:849
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = UnloweredMemberName $/;"	types	line:890
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:891
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:934
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = RelDot$/;"	types	line:850
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:892
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:935
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = RelBase$/;"	types	line:851
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = MethodSymbol$/;"	types	line:951
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:867
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:908
Map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    type Map = scala.collection.immutable.Map[String, Entry]$/;"	types	line:33
Member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Member($/;"	classes	line:121
Member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Member(path: Path.Ref, typeVar: Name.Member) extends Ref {$/;"	classes	line:9
MemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class MemberDecl extends Node {$/;"	classes	line:139
MemberEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class MemberEntry extends Entry {$/;"	classes	line:9
MemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class MemberName(name: Name.Member) extends VarName with UnloweredMemberName {$/;"	classes	line:830
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Method($/;"	classes	line:104
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val Method = Name.MethodLocal.toPath$/;"	constants	line:47
MethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodCall(rcvr: Rcvr, name: Name.Method, args: List[NE], data: MCallData)$/;"	classes	line:700
MethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodDecl($/;"	classes	line:209
MethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val MethodGroups = new GuardedBy[List[MethodGroup]](gather)$/;"	constants	line:197
MethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    class MethodGroups(env: Env) {$/;"	classes	line:37
MethodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^case class MethodId($/;"	classes	line:5
MethodKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^sealed abstract class MethodKind/;"	classes	line:31
MethodLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MethodLocal = Name.LocalVar("method")$/;"	constants	line:156
MethodResolutionOrder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^case class MethodResolutionOrder(global: Global) {$/;"	classes	line:18
MethodReturn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodReturn(value: NE) extends LowerStmt {$/;"	classes	line:763
MethodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^case class MethodSignature[+P <: Pattern.Anon]($/;"	classes	line:3
Mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	classes	line:7
MultipleOverridesInSameClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MultipleOverridesInSameClass($/;"	classes	line:114
MustHaveType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustHaveType(path: Path.Typed, ty: Type.Ref) extends Error {$/;"	classes	line:22
MustResolveAmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustResolveAmbiguousInheritance($/;"	classes	line:97
Mutable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^public @interface Mutable {$/;"	interface	line:3
MutableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MutableClass = Class(classOf[harmonic.lang.Mutable])$/;"	constants	line:172
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ParseTlExpr$/;"	types	line:855
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = PathNode$/;"	types	line:939
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ResolveTlExpr$/;"	types	line:896
Name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Name extends Node$/;"	classes	line:809
NewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewCtor(tref: TR, args: List[NE], data: MCallData, ty: TyClass) extends LowerTlExpr {$/;"	classes	line:725
NoReturnHere	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoReturnHere() extends Error {$/;"	classes	line:16
NoSuchMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMember(ty: Type.Ref, uName: Name.UnloweredMember) extends Error {$/;"	classes	line:197
NoSuchMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMethod(ty: Type.Ref, name: Name.Method) extends Error {$/;"	classes	line:206
NoSuchVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchVar(localName: String) extends Error {$/;"	classes	line:230
Node	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Node extends Positional with Product {$/;"	classes	line:781
NotExecutable	/Users/niko/git/intervals-java/Harmonic/test.py	/^class NotExecutable(Exception):$/;"	class	line:193
NotField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotField(name: Name.Member) extends Error {$/;"	classes	line:265
NotInStaticScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotInStaticScope(memberVar: Name.Member) extends Error {$/;"	classes	line:248
NotMarkedOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotMarkedOverride($/;"	classes	line:129
NotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotOverride(className: Name.Class, methodName: Name.Method) extends Error {$/;"	classes	line:30
NotTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotTypeVar(entry: SymTab.MemberEntry) extends Error {$/;"	classes	line:274
Null	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Null(ty: Ty) extends LowerTlExpr {$/;"	classes	line:735
NullType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NullType() extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:500
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalParseTypeRef$/;"	types	line:853
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalResolveTypeRef$/;"	types	line:894
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = TypeRef$/;"	types	line:937
Object	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Object = Type.Class(Name.ObjectClass, List())$/;"	constants	line:38
ObjectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ObjectClass = Class(classOf[java.lang.Object])$/;"	constants	line:160
OneOf3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class OneOf3[+A, +B, +C](value: A) extends AnyOf3[A, B, C]$/;"	classes	line:233
Operator	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        case class Operator(chars: String) extends Token {$/;"	classes	line:23
OptionalParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class OptionalParseTypeRef extends Node$/;"	classes	line:459
OptionalResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait OptionalResolveTypeRef extends Node$/;"	traits	line:462
OverrideClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val OverrideClass = Class(classOf[java.lang.Override])$/;"	constants	line:173
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ParseOwner$/;"	types	line:862
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ResolveOwner \/\/ No longer relevant.$/;"	types	line:946
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ResolveOwner$/;"	types	line:903
Package	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Package extends Qual {$/;"	classes	line:14
PackageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class PackageName(name: Name.Package) extends Name {$/;"	classes	line:813
Param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Param[+S <: VSym] extends AstPattern[S]$/;"	classes	line:364
ParameterAdapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ParameterAdapter($/;"	classes	line:1637
ParseError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ParseError($/;"	classes	line:38
ParseOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseOwner extends ParseRcvr$/;"	traits	line:598
ParsePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParsePath extends ResolveTlExpr$/;"	traits	line:537
ParseRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseRcvr extends Node$/;"	traits	line:597
ParseStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseStmt extends Node {$/;"	traits	line:586
ParseTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTlExpr extends ParseRcvr with ParseOwner with ParseStmt$/;"	traits	line:599
ParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTypeRef extends OptionalParseTypeRef$/;"	traits	line:471
PathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class PathArg(name: Name.Member, rel: PcRel, path: Path.Ref) extends Arg {$/;"	classes	line:27
PathBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathBase(name: VN, sym: VSym) extends ParsePath {$/;"	classes	line:544
PathBaseCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathBaseCall(className: Name.Class, name: Name.Method, args: List[PathNode], ty: Ty) extends ParsePath {$/;"	classes	line:549
PathCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathCall(owner: PathNode, name: Name.Method, args: List[PathNode], ty: Ty) extends ParsePath {$/;"	classes	line:562
PathDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathDot(owner: PathNode, name: MN, ty: Ty) extends ParsePath {$/;"	classes	line:557
PathErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathErr(name: String) extends ParsePath {$/;"	classes	line:539
PathExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathExtendsArg(path: PathNode) extends ExtendsArg {$/;"	classes	line:325
PathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PathNode = ParsePath$/;"	types	line:860
PathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PathNode = ParsePath$/;"	types	line:901
PathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PathNode = TypedPath$/;"	types	line:944
PathRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathRequirement($/;"	classes	line:237
PathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathType(path: PathNode) extends ParseTypeRef {$/;"	classes	line:473
PathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathTypeArg(name: MN, rel: PcRel, path: PathNode) extends TypeArg {$/;"	classes	line:526
PcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcRel$/;"	classes	line:3
PcTransRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcTransRel extends PcRel$/;"	classes	line:17
PcWcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcWcRel extends PcRel$/;"	classes	line:23
PrettyPrinter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^abstract class PrettyPrinter {$/;"	classes	line:3
Qual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Qual {$/;"	classes	line:7
QualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class QualName extends Name$/;"	classes	line:811
QualStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class QualStatic(memberVar: Name.Member) extends Error {$/;"	classes	line:215
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ParseRcvr$/;"	types	line:861
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ResolveRcvr$/;"	types	line:902
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = Super$/;"	types	line:945
ReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ReassignVarLvalue($/;"	classes	line:418
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Ref extends UntypedOwner$/;"	classes	line:19
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Ref extends Anon {$/;"	traits	line:13
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Ref$/;"	classes	line:8
RelBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelBase(nm: String) extends RelName {$/;"	classes	line:108
RelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDecl($/;"	classes	line:270
RelDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDot(context: RelName, component: String) extends RelName {$/;"	classes	line:116
RelName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class RelName extends QualName {$/;"	classes	line:99
Requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^public @interface Requirement {$/;"	interface	line:3
Requires	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^public @interface Requires {$/;"	interface	line:3
Resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^abstract class Resolve(global: Global, compUnit: in.CompUnit) {$/;"	classes	line:20
ResolveBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveBlockParam(scope0: InScope, inParam: in.Param[Unit])$/;"	classes	line:149
ResolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^case class ResolveBody(global: Global, compUnit: in.CompUnit) $/;"	classes	line:24
ResolveClassParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveClassParams(className: Name.Class, scope0: InScope, inParam: in.Param[Unit])$/;"	classes	line:120
ResolveHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^case class ResolveHeader(global: Global, compUnit: in.CompUnit) $/;"	classes	line:47
ResolveLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveLvalues(var scope: InScope, inLvalues: List[in.Lvalue]) {$/;"	classes	line:154
ResolveMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveMethodParams(scope0: InScope, inParams: List[in.Param[Unit]])$/;"	classes	line:136
ResolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveOwner extends ParseOwner with ResolveRcvr$/;"	traits	line:602
ResolveParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    abstract class ResolveParams(var scope: InScope, inParams: List[in.Param[Unit]]) {$/;"	classes	line:92
ResolvePathFinalResult	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        sealed abstract class ResolvePathFinalResult extends ResolvePathResult$/;"	classes	line:340
ResolvePathResult	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        sealed abstract class ResolvePathResult$/;"	classes	line:338
ResolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveRcvr extends ParseRcvr$/;"	traits	line:601
ResolveStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveStmt extends ParseStmt$/;"	traits	line:593
ResolveTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTlExpr extends ParseTlExpr with ResolveOwner with ResolveStmt$/;"	traits	line:603
ResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTypeRef extends OptionalResolveTypeRef$/;"	traits	line:488
ResolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ResolvedSource = new GuardedBy[Ast.Resolve.ClassDecl](body)$/;"	constants	line:136
ResolvedToClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToClass(className: Name.Class) extends ResolvePathFinalResult$/;"	classes	line:341
ResolvedToList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToList(names: List[String]) extends ResolvePathResult$/;"	classes	line:339
ResolvedToPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToPath(path: out.PathNode) extends ResolvePathFinalResult$/;"	classes	line:342
Results	/Users/niko/git/intervals-java/Harmonic/test.py	/^class Results(object):$/;"	class	line:393
Return	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^    public Return(Object value) {$/;"	method	line:11
Return	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^public class Return extends ControlFlowException {$/;"	class	line:6
ReturnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ReturnClass = Class(classOf[harmonic.runtime.Return])$/;"	constants	line:183
ReturnWithAndWithoutValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ReturnWithAndWithoutValue() {$/;"	classes	line:45
SBT	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SBT=${JAVA} -Dsbt.log.noformat=true -Xmx256M -jar sbt-launch-0.7.0.jar$/;"	macro	line:3
SCALA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALA=scala$/;"	macro	line:6
SCALAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALAC=scalac -make:changed $/;"	macro	line:5
STDLIB	/Users/niko/git/intervals-java/Harmonic/Makefile	/^STDLIB=java_standard_library.jar$/;"	macro	line:16
Set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    case class Set(mods: Int) {$/;"	classes	line:16
ShadowedClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedClassParam(name: String) extends Error {$/;"	classes	line:152
ShadowedLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedLocalVar(name: String) extends Error {$/;"	classes	line:170
ShadowedMethodParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedMethodParam(name: String) extends Error {$/;"	classes	line:161
StatementVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class StatementVisitor($/;"	classes	line:727
Static	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Static(name: Name.Class) extends ResolveOwner with ResolveRcvr {$/;"	classes	line:694
StaticField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class StaticField(name: Name.Member) extends MemberEntry$/;"	classes	line:22
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = LowerStmt$/;"	types	line:941
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ParseStmt$/;"	types	line:857
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ResolveStmt$/;"	types	line:898
Subpackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Subpackage($/;"	classes	line:25
SubstdTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdTuple(patterns: List[Pattern.Anon]) extends AnonTuple$/;"	classes	line:38
SubstdVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdVar(ty: Type.Ref) extends AnonVar$/;"	classes	line:36
Super	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Super(ty: Ty) extends ResolveRcvr {$/;"	classes	line:690
SuperClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val SuperClassNames = new GuardedBy[List[Name.Class]](header)$/;"	constants	line:128
Symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^abstract class Symbol {$/;"	classes	line:8
SymbolSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class SymbolSummary($/;"	classes	line:616
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ParseTypeRef$/;"	types	line:854
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ResolveTypeRef$/;"	types	line:895
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = TypeRef$/;"	types	line:938
TcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^sealed abstract class TcRel$/;"	classes	line:3
This	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val This = Name.ThisLocal.toPath$/;"	constants	line:46
ThisLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ThisLocal = Name.LocalVar("this")$/;"	constants	line:154
ThreeOf3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class ThreeOf3[+A, +B, +C](value: C) extends AnyOf3[A, B, C]$/;"	classes	line:235
Tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    type Tokens = StdTokens$/;"	types	line:52
Top	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Top = Object$/;"	constants	line:46
TransitiveCloser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    abstract class TransitiveCloser[T] {$/;"	classes	line:50
TreeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TreeLvalue extends AstPattern[VSym]$/;"	classes	line:388
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Tuple(exprs: List[Expr]) extends ResolveTlExpr {$/;"	classes	line:607
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Tuple(paths: List[Ref]) extends Ref {$/;"	classes	line:38
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Tuple(patterns: List[Pattern.Ref]) extends AnonTuple with Ref {$/;"	classes	line:47
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Tuple(typeRefs: List[Type.Ref]) extends Ref {$/;"	classes	line:17
TupleAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TupleAstPattern[+S <: VSym] extends AstPattern[S] {$/;"	traits	line:343
TupleExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleExtendsArg(args: List[ExtendsArg]) extends ExtendsArg {$/;"	classes	line:321
TupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleLvalue($/;"	classes	line:390
TupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleParam[+S <: VSym]($/;"	classes	line:366
TupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleType(types: List[TR]) extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:504
TwoOf3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class TwoOf3[+A, +B, +C](value: B) extends AnyOf3[A, B, C]$/;"	classes	line:234
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Type.Ref$/;"	types	line:953
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:869
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:910
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Type.Class$/;"	types	line:954
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:870
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:911
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Type.Tuple$/;"	types	line:955
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:871
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:912
TyVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val TyVarName = tyVar.typeVar$/;"	constants	line:416
Type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Type(name: Name.Member) extends MemberEntry {$/;"	classes	line:23
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TypeArg extends Node {$/;"	classes	line:514
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class TypeArg(name: Name.Member, rel: TcRel, ty: Type.Ref) extends Arg {$/;"	classes	line:30
TypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeRef(ty: Type.Ref) extends Node {$/;"	classes	line:449
TypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeTypeArg(name: MN, rel: TcRel, typeRef: TR) extends TypeArg {$/;"	classes	line:519
TypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeVar(path: PathNode, typeVar: MN) extends ResolveTypeRef {$/;"	classes	line:490
Typed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Typed extends TypedOwner {$/;"	classes	line:51
TypedCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedCall($/;"	classes	line:83
TypedCast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedCast(ty: Type.Ref, path: Typed) extends Typed {$/;"	classes	line:62
TypedConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedConstant(obj: Object) extends Typed {$/;"	classes	line:66
TypedField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedField(base: Path.TypedOwner, sym: VarSymbol.Field) extends Typed {$/;"	classes	line:73
TypedIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedIndex(array: Path.Typed, index: Path.Typed) extends Typed {$/;"	classes	line:103
TypedLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedLocal(sym: VarSymbol.Local) extends Typed {$/;"	classes	line:57
TypedNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TypedNode extends Node {$/;"	traits	line:89
TypedOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract trait TypedOwner {$/;"	traits	line:10
TypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypedPath(path: Path.Typed) extends TypedNode with LowerTlExpr {$/;"	classes	line:570
TypedTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedTuple(paths: List[Typed]) extends Typed {$/;"	classes	line:120
UnloweredMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract trait UnloweredMember {$/;"	traits	line:145
UnloweredMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait UnloweredMemberName extends Name {$/;"	traits	line:825
Unscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Unscheduled.java	/^public @interface Unscheduled {$/;"	interface	line:13
UnscheduledClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val UnscheduledClass = Class(classOf[harmonic.lang.Unscheduled])$/;"	constants	line:174
UntypedOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract trait UntypedOwner$/;"	traits	line:9
UsageError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        case class UsageError(val msg: String) extends RuntimeException$/;"	classes	line:22
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = RelName$/;"	types	line:852
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:893
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:936
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:864
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:905
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = VarSymbol.Any$/;"	types	line:948
ValueMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ValueMethod = Method(List("value"))$/;"	constants	line:181
ValuePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class ValuePath {$/;"	classes	line:419
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Var {$/;"	classes	line:113
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Var($/;"	classes	line:40
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^public @interface Var {$/;"	interface	line:3
VarAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarAstPattern[+S <: VSym] extends AstPattern[S] {$/;"	traits	line:357
VarMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val VarMembers = new GuardedBy[List[SymTab.Entry]](header)$/;"	constants	line:131
VarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarName extends Name {$/;"	traits	line:821
VarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarParam[+S <: VSym]($/;"	classes	line:372
VarSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^abstract class VarSymbol[+N <: Name.Var] extends Symbol {$/;"	classes	line:42
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Void = Type.Class(Name.VoidClass, List())$/;"	constants	line:39
VoidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val VoidClass = Class(classOf[java.lang.Void])$/;"	constants	line:158
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, filenm):$/;"	member	line:395
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, fname):$/;"	member	line:211
_execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _execute():$/;"	function	line:479
_run_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _run_test(filenm, experrors):$/;"	function	line:575
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessMap = newAccessMap(Nil)$/;"	constants	line:1828
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessMap = newAccessMap(Nil)$/;"	constants	line:1848
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessMap = newAccessMap(stmts)$/;"	constants	line:1839
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val accessMap = new AccessMap(csym.name)$/;"	constants	line:1815
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val accessMap = new AccessMap(csym.name)$/;"	constants	line:1886
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(className)$/;"	constants	line:1710
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2014
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2069
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2184
accessSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def accessSyms = readSyms ++ writeSyms$/;"	methods	line:633
accessorGetDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorGetDesc(fieldTy: Type.Ref) = {$/;"	methods	line:337
accessorName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorName(memberName: Name.Member) = {$/;"	methods	line:333
accessorSetDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorSetDesc(fieldTy: Type.Ref) = {$/;"	methods	line:341
adaptTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def adaptTo(tarPatterns: List[Pattern.Ref], stmtVisitor: StatementVisitor) {$/;"	methods	line:1659
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:2016
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:2072
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, overriddenSig.parameterPatterns)$/;"	constants	line:1719
add	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def add() = {$/;"	methods	line:255
addBoxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addBoxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:596
addClassToCheckEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def addClassToCheckEnv(env: Env, csym: ClassFromSource) {$/;"	methods	line:165
addControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addControlFlow() = {$/;"	methods	line:73
addCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def addCsym[C <: ClassSymbol](cls: C): C = synchronized {$/;"	methods	line:79
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(entry: SymTab.Entry) = {$/;"	methods	line:252
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:124
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:138
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String): InScope$/;"	methods	line:93
addExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def addExtendsDecl($/;"	methods	line:36
addFor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def addFor(subst: TypedSubst)(csym: ClassFromSource): Unit = debugIndent("addFor(%s)", csym) {$/;"	methods	line:89
addFresh	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addFresh($/;"	methods	line:697
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(AsyncInterval from, AsyncInterval to) {$/;"	method	line:7
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(AsyncInterval from, Point to) {$/;"	method	line:15
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(Point from, AsyncInterval to) {$/;"	method	line:11
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(Point from, Point to) {$/;"	method	line:19
addIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def addIndent { indent += 2}$/;"	methods	line:103
addInstanceFields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addInstanceFields($/;"	methods	line:1763
addIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def addIntrinsic(msym: MethodSymbol) {$/;"	methods	line:58
addMathTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addMathTo() = {$/;"	methods	line:32
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def addMsym(msym: MethodSymbol) = {$/;"	methods	line:55
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def addMsym(msym: MethodSymbol) = msymsBuffer += msym$/;"	methods	line:28
addNullStmtToBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addNullStmtToBody(body: out.Body) = withPosOf(body, {$/;"	methods	line:81
addNullStmtToStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addNullStmtToStmts(stmts: List[out.Stmt]) = {$/;"	methods	line:73
addOverrideSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addOverrideSubst($/;"	methods	line:721
addPatExprToSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addPatExprToSubst(subst: Subst, pair: (Pattern.Ref, in.Expr)): Subst = {$/;"	methods	line:263
addPatPathToSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addPatPathToSubst(subst: Subst, pair: (Pattern.Ref, Path.Ref)): Subst = {$/;"	methods	line:242
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addSym(sym: VarSymbol.Any, accessPath: AccessPath) {$/;"	methods	line:570
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Field) = env$/;"	methods	line:156
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Local) = env.plusLocalVar(sym)$/;"	methods	line:165
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Local) = env.plusLocalVar(sym)$/;"	methods	line:173
addSymbolsDeclaredIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addSymbolsDeclaredIn($/;"	methods	line:1781
addUnboxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addUnboxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:574
addVarMembersFromMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        def addVarMembersFromMember(varMembers: List[SymTab.Entry], decl: in.MemberDecl): List[SymTab.Entry] = {$/;"	methods	line:63
addVarMembersFromParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        def addVarMembersFromParam(varMembers: List[SymTab.Entry], param: in.Param[Unit]): List[SymTab.Entry] = {$/;"	methods	line:74
add_frag_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_frag_exp_error(self, rel, experror):$/;"	function	line:298
add_header_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_header_exp_error(self, rel, experror):$/;"	function	line:280
add_remove_files	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def add_remove_files(self, fnames):$/;"	member	line:404
add_to_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_fragment(self, line):$/;"	function	line:295
add_to_header	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_header(self, line):$/;"	function	line:277
add_to_trailer	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_trailer(self, line):$/;"	function	line:284
add_trailer_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_trailer_exp_error(self, res, experror):$/;"	function	line:287
all	/Users/niko/git/intervals-java/Harmonic/Makefile	/^all: test$/;"	targets	line:18
allEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val allEntries = mro.flatMap { mrosym => $/;"	constants	line:113
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allFieldSymbols: List[VarSymbol.Field] = LoadedData.join.allFieldSymbols$/;"	methods	line:44
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allFieldSymbols = AllFieldSymbols.v$/;"	methods	line:187
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allFieldSymbols: List[VarSymbol.Field]$/;"	methods	line:105
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def allGroups = groups.valuesIterator.toList.flatten$/;"	methods	line:64
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val allGroups = methodGroups.allGroups$/;"	constants	line:32
allImports	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    val allImports = ($/;"	constants	line:76
allInheritedFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def allInheritedFieldSymbols(csym: ClassSymbol): Iterable[VarSymbol.Field] = {$/;"	methods	line:1759
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allIntervalSymbols: List[VarSymbol.Field] = LoadedData.join.allIntervalSymbols$/;"	methods	line:45
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allIntervalSymbols = AllIntervalSymbols.v$/;"	methods	line:190
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allIntervalSymbols: List[VarSymbol.Field]$/;"	methods	line:108
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allMethodSymbols: List[MethodSymbol] = LoadedData.join.allMethodSymbols$/;"	methods	line:43
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allMethodSymbols: List[MethodSymbol] = loweredMethods.map(_._1)$/;"	methods	line:184
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allMethodSymbols: List[MethodSymbol]$/;"	methods	line:102
allNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val allNames = {$/;"	constants	line:24
annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotation = positioned($/;"	constants	line:143
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:140
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotations = rep(annotation) $/;"	constants	line:147
app	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val app = ctor.newInstance().asInstanceOf[Application]$/;"	constants	line:66
appArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        val appArgs = new mutable.ArrayBuffer[String]()$/;"	constants	line:25
appArgsList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val appArgsList: java.util.List[String] = Collections.unmodifiableList(Arrays.asList(appArgs.toArray: _*))$/;"	constants	line:67
appClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val appClassName = optAppClassName.getOrElse {$/;"	constants	line:41
appendAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendAssign(inAssign: in.Assign): Env = {$/;"	methods	line:762
appendLoweredStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendLoweredStmt(stmt: in.Stmt): Env = {$/;"	methods	line:694
applicableMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val applicableMsyms = msyms.filter(potentiallyApplicable)$/;"	constants	line:613
appliesTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def appliesTo(csym: ClassSymbol)(arg: Type.Arg) = {$/;"	methods	line:497
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def apply(node: Ast.Node) = new At(node)$/;"	methods	line:21
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def apply(env: Env) = new InEnv(env)$/;"	methods	line:15
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def apply(global: Global) = new Create(global)$/;"	methods	line:8
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env) = new InEnv(env)$/;"	methods	line:346
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env, optStmts: Option[mutable.ListBuffer[out.Stmt]]) = {$/;"	methods	line:688
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^    def apply(global: Global) = new Merge(global)$/;"	methods	line:8
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def apply(mods: List[Mod]): Set = Set(mods.foldLeft(0)(_ | _.bit))$/;"	methods	line:37
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(cls: java.lang.Class[_]): Class = cls match {$/;"	methods	line:79
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(pkg: java.lang.Package): Package = {$/;"	methods	line:71
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(str: String): Package = {$/;"	methods	line:66
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def apply(global: Global, interFile: File) = {$/;"	methods	line:434
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            def apply(names: List[String]) = {$/;"	methods	line:345
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def apply(pairs: (Path.Ref, Path.Ref)*): Subst = {$/;"	methods	line:63
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def apply(cls: java.lang.Class[_]): Type.Class = Class(Name.Class(cls), List())$/;"	methods	line:35
are	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        \/\/ take it, if it is a good head. Then repeat the operation until all the class are$/;"	classes	line:28
arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val arg: PackratParser[out.Expr] = tuple | blk | asyncBlk$/;"	constants	line:353
argAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val argAsmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:933
argAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val argAsmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:964
argClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val argClassName = arg.name.className$/;"	constants	line:498
argClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        def argClasses(msym: MethodSymbol) =$/;"	methods	line:250
argCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val argCsym = global.csym(argClassName)$/;"	constants	line:499
argPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val argPaths = args.map(_.path.toPath) \/\/ list of untyped paths$/;"	constants	line:563
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val argTys = outArgs.map(_.ty)$/;"	constants	line:980
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val argTys = outArgNodes.map(_.ty)$/;"	constants	line:367
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val args = extendsDecl.args.map(n => subst.typedPath(n.path))$/;"	constants	line:44
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val args = extendsDecl.args.map(lowerExtendsArg)$/;"	constants	line:562
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def args(cps: List[(String, out.Expr)]) = cps.map(_._2)$/;"	methods	line:360
arrayExtends	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    def arrayExtends(ty: Type.Ref) = {$/;"	methods	line:49
as	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** A position for reporting errors related to the class as a whole *\/$/;"	classes	line:34
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName = None$/;"	methods	line:15
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName = Some(this)$/;"	methods	line:46
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName: Option[Class]$/;"	methods	line:11
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asFieldNamed(name: Name.Var): Option[FieldDecl] = None$/;"	methods	line:143
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asFieldNamed(fldName: Name.Var) = {$/;"	methods	line:255
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember) = {$/;"	methods	line:11
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember): Option[MemberEntry]$/;"	methods	line:6
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def asMemberEntryMatching(uName: Name.UnloweredMember) = None        $/;"	methods	line:30
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asMethodNamed(name: Name.Method): Option[MethodDecl] = None$/;"	methods	line:142
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asMethodNamed(mthdName: Name.Method) = {$/;"	methods	line:218
asmAsyncIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmAsyncIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.AsyncInterval])$/;"	constants	line:81
asmBooleanType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmBooleanType = asm.Type.getType(classOf[java.lang.Boolean])$/;"	constants	line:77
asmClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmClassType(name: Name.Class) = asm.Type.getObjectType(name.internalName)$/;"	methods	line:134
asmContextType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmContextType = asm.Type.getType(classOf[ch.ethz.intervals.Context])$/;"	constants	line:85
asmHelperType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmHelperType = asm.Type.getType(classOf[harmonic.runtime.Helper])$/;"	constants	line:86
asmInlineIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmInlineIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.InlineInterval])$/;"	constants	line:82
asmIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.Interval])$/;"	constants	line:80
asmIntervalsType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmIntervalsType = asm.Type.getType(classOf[ch.ethz.intervals.Intervals])$/;"	constants	line:79
asmObjectArrayType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectArrayType = asm.Type.getType("[Ljava\/lang\/Object;")$/;"	constants	line:74
asmObjectType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectType = asm.Type.getType(classOf[java.lang.Object])$/;"	constants	line:75
asmPointType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmPointType = asm.Type.getType(classOf[ch.ethz.intervals.Point])$/;"	constants	line:83
asmStringType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmStringType = asm.Type.getType(classOf[java.lang.String])$/;"	constants	line:78
asmTaskType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmTaskType = asm.Type.getType(classOf[ch.ethz.intervals.Task])$/;"	constants	line:84
asmThrowableType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmThrowableType = asm.Type.getType(classOf[java.lang.Throwable])$/;"	constants	line:87
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType = asm.Type.INT_TYPE$/;"	methods	line:430
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType = fsym.ty.toAsmType$/;"	methods	line:472
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType: asm.Type$/;"	methods	line:421
asmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val asmTys = argumentClasses.drop(rcvr).map(asm.Type.getType)$/;"	constants	line:806
asmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val asmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:811
asmVoidClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmVoidClassType = asm.Type.getType(classOf[java.lang.Void])$/;"	constants	line:76
assemble	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def assemble(self, fragnum, ):$/;"	member	line:229
assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val assign = withPosOf(outExpr, $/;"	constants	line:1203
asyncBlk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val asyncBlk = positioned($/;"	constants	line:345
attachedTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def attachedTo(inlineInterval: Interval) = $/;"	methods	line:200
baseName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        val baseName = name.relPath$/;"	constants	line:54
being	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ For a class being loaded from source, this is the structure:$/;"	classes	line:24
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val best = identifyBestMethod($/;"	constants	line:1050
bestArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val bestArgs = intersectArgs(leftArgsUp, rightArgsUp)$/;"	constants	line:594
bestCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val bestCsym = leftMro.find(rightCsym.isSubclass(_)).get $/;"	constants	line:588
bestMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val bestMsyms = applicableMsyms.filter(isBestChoice)$/;"	constants	line:635
blk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blk = positioned($/;"	constants	line:341
blkBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkBody: PackratParser[(out.OptionalParseTypeRef, out.Param[Unit], List[out.Stmt])] = ($/;"	constants	line:335
blkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkParam: PackratParser[out.Param[Unit]] = tupleBlkParam | varBlkParam$/;"	constants	line:253
blockClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockClassName = genClassName(accessMap.context, tmpl)$/;"	constants	line:1524
blockTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockTy = Type.Class(blockClassName, List())$/;"	constants	line:1525
bnds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val bnds = upperBoundVars(ty)$/;"	constants	line:463
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^      * class body.  It does not invoke any super$/;"	classes	line:1796
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val body: AsyncInterval = master.subinterval($/;"	constants	line:69
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def body: AsyncInterval = intervals("body")$/;"	methods	line:146
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Environment immediately within the class body *\/$/;"	classes	line:149
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val body: AsyncInterval = master.subinterval($/;"	constants	line:65
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ The environment used within the class body.$/;"	classes	line:95
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def body: AsyncInterval$/;"	methods	line:20
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val body = lowerBody(env, decl.body)$/;"	constants	line:137
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val body = positioned($/;"	constants	line:327
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^  * rest of the body.  Before we can resolve a class body, we must first $/;"	classes	line:44
booleanClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanClass = classOf[java.lang.Boolean]$/;"	constants	line:75
booleanTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanTy = Type.Class(booleanClass)$/;"	constants	line:87
boundTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val boundTy = mutualUpperBoundOfList(tys)$/;"	constants	line:530
boundsFromClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            def boundsFromClassType(pathTy: Type.Class) = {$/;"	methods	line:419
box	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def box(box: BoxInfo) {$/;"	methods	line:214
boxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val boxInfo = boxInfoForPrimitiveType(fromAsmTy)$/;"	constants	line:251
boxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val boxInfo = boxInfoForPrimitiveType(toAsmTy)$/;"	constants	line:256
boxInfoForBoxType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def boxInfoForBoxType(asmType: asm.Type) = boxes.find(_.boxType == asmType).get$/;"	methods	line:106
boxInfoForPrimitiveType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def boxInfoForPrimitiveType(asmType: asm.Type) = boxes.find(_.primType == asmType).get$/;"	methods	line:105
boxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val boxedArray = new BoxedArray(accessMap)$/;"	constants	line:1786
boxedArrayPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] val boxedArrayPath = accessMap.pathToFreshSlot(asmObjectArrayType)$/;"	constants	line:593
boxedSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def boxedSyms(sym: VarSymbol.Any) = writeSyms(sym) && sharedSyms(sym)$/;"	methods	line:634
boxes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val boxes = List($/;"	constants	line:95
buffer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        val buffer = new StringBuilder()$/;"	constants	line:45
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Symbols for all interval members defined on this class but not superclasses. *\/$/;"	classes	line:107
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Symbols for all methods defined on this class but not superclasses. *\/$/;"	classes	line:101
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Symbols for all methods defined on this class but not superclasses. *\/$/;"	classes	line:104
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        \/** Creates a new class name in same package but with the given suffix. *\/$/;"	packages	line:60
byInduction	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byInduction = P1 match {$/;"	constants	line:322
byRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byRel = pathRels.flatMap {$/;"	constants	line:368
bySimplify	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val bySimplify = P1 match {$/;"	constants	line:355
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val byteCode: AsyncInterval = master.subinterval($/;"	constants	line:123
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def byteCode: AsyncInterval = intervals("byteCode")$/;"	methods	line:153
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val byteCode: AsyncInterval = master.subinterval($/;"	constants	line:119
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def byteCode: AsyncInterval$/;"	methods	line:27
cache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val cache = new mutable.HashMap[AccessPath, AccessPath]()$/;"	constants	line:1230
callData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def callData($/;"	methods	line:359
callPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val callPart = ident~arg                           ^^ { case i~a => (i, a) }$/;"	constants	line:355
cancelInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def cancelInlineInterval($/;"	methods	line:1469
casted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val casted = {$/;"	constants	line:1665
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:14
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:23
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:29
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:14
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def check(cvis: asm.ClassVisitor) = {$/;"	methods	line:376
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val check: AsyncInterval = master.subinterval($/;"	constants	line:109
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def check: AsyncInterval = intervals("check")$/;"	methods	line:151
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val check: AsyncInterval = master.subinterval($/;"	constants	line:105
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def check: AsyncInterval$/;"	methods	line:25
checkAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkAssign(env: Env, pair: (in.Lvalue, in.Expr)): Env = {$/;"	methods	line:112
checkBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var checkBytecode = true$/;"	local variables	line:21
checkEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def checkEnv: Env$/;"	methods	line:97
checkExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkExpr(expr: in.LowerTlExpr): Type.Ref = {$/;"	methods	line:84
checkOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkOwner(owner: Path.TypedOwner): Unit = {$/;"	methods	line:32
checkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkParam(pair: (Pattern.Anon, in.TypedPath)): Unit = {$/;"	methods	line:78
checkParamType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkParamType(pair: (Pattern.Anon, Path.Typed)): Unit = {$/;"	methods	line:39
checkPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPath(path: Path.Typed): Unit = {$/;"	methods	line:43
checkPathHasType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPathHasType(path: Path.Typed, ty: Type.Ref): Unit = {$/;"	methods	line:26
checkPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPathNode(path: in.TypedPath): Unit = {$/;"	methods	line:72
checkStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkStmt(env: Env, stmt: in.LowerStmt): Env = {$/;"	methods	line:135
checker	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val checker = check(writer)$/;"	constants	line:382
classBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val classBounds = List[Type.Ref]() \/\/ FIXME$/;"	constants	line:421
classDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val classDecl = csym.loweredSource$/;"	constants	line:178
classDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val classDecl = positioned($/;"	constants	line:156
classEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def classEnv = ClassEnv.v$/;"	methods	line:151
classExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val classExt = ".class"$/;"	constants	line:12
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def classFiles(name: Name.Class) = relativeFiles(classPaths, classExt)(name)$/;"	methods	line:63
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val classFiles = config.classFiles(className)$/;"	constants	line:156
classMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val classMap = $/;"	constants	line:72
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def className = if(async) Name.AsyncBlockClass else Name.BlockClass$/;"	methods	line:624
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val className = Name.Class(cls)$/;"	constants	line:124
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val className = extendsDecl.className.name$/;"	constants	line:43
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(clsName, nm)$/;"	constants	line:32
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(pkgName, nm)$/;"	constants	line:23
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = resolveToClassOrObject(relName.pos, relNameToRelList(relName))$/;"	constants	line:126
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                        val className = Name.Class(outerClassName, name)$/;"	constants	line:525
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                        val className = resolveToClassOrObject(tref.pos, name :: names)$/;"	constants	line:520
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:548
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:554
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val className = resolveName(base).name$/;"	constants	line:236
classNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                        val classNames = msym.overrides.map(_.clsName).toList$/;"	constants	line:104
classParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def classParam = ClassParam.v$/;"	methods	line:147
classParamAndEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def classParamAndEnv(csym: ClassFromSource): (out.Param[VarSymbol.Field], Env) = {$/;"	methods	line:19
classPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var classPaths = List(new File("."))$/;"	local variables	line:14
classScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val classScope = InScope(constructSymbolTable(csym))$/;"	constants	line:37
classSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def classSymbol(csym: ClassFromSource) {$/;"	methods	line:177
classTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val classTy = Type.Class(className, List())$/;"	constants	line:438
classlessName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                            val classlessName = Name.ClasslessMember(text)$/;"	constants	line:427
clean	/Users/niko/git/intervals-java/Harmonic/Makefile	/^clean:$/;"	targets	line:21
cleanupStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def cleanupStatement(stmt: in.Stmt) {$/;"	methods	line:1133
close_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def close_all(self):$/;"	member	line:465
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val cls = {$/;"	constants	line:45
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val cls = ty.getRawType.asInstanceOf[Class[_]]$/;"	constants	line:123
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val cls: java.lang.Class[_]$/;"	constants	line:13
clsFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val clsFile = fileWithExtension(".class")$/;"	constants	line:399
clsName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val clsName: Name.Class,         \/** Class in which the method is defined. *\/$/;"	constants	line:30
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:23
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:29
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:36
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:43
comma	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma[A](p: PackratParser[A]) = repsep(p, ",")<~opt(",")$/;"	methods	line:65
comma1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma1[A](p: PackratParser[A]) = rep1sep(p, ",")<~opt(",")$/;"	methods	line:66
command	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def command(self, cmd, retcode, stdout, stderr):$/;"	member	line:422
comp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^            val comp = str.split('.')$/;"	constants	line:67
compUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val compUnit = positioned($/;"	constants	line:99
compare_errors	/Users/niko/git/intervals-java/Harmonic/test.py	/^def compare_errors(expected, stdout, stderr):$/;"	function	line:519
compile	/Users/niko/git/intervals-java/Harmonic/Makefile	/^compile: ${GENERATEDJAVA}$/;"	targets	line:29
compile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def compile() = {$/;"	methods	line:17
complete	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def complete {$/;"	methods	line:169
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component = nm$/;"	methods	line:110
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component: String$/;"	methods	line:102
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def compute(item: T) = expand(Queue(item), Set())$/;"	methods	line:53
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            def compute(subinterval: Interval) = {$/;"	methods	line:222
computeCheckEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def computeCheckEnv(csym: ClassFromSource) {$/;"	methods	line:172
computeOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def computeOverrides($/;"	methods	line:91
computeVersions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def computeVersions($/;"	methods	line:2032
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val config: Config,$/;"	constants	line:10
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val config = new Config()$/;"	constants	line:9
constrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val constrainedType = positioned($/;"	constants	line:291
constructPathFromPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def constructPathFromPattern(pattern: Pattern.Ref): Path.Typed = pattern match {$/;"	methods	line:1647
constructSymbolTable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def constructSymbolTable(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:87
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ the arguments of a class constructor.  Note that only$/;"	classes	line:318
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Invoke java class constructor$/;"	classes	line:2190
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def constructor = Constructor.v$/;"	methods	line:155
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def constructors: List[MethodSymbol] = LoadedData.join.constructors$/;"	methods	line:42
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def constructors = {$/;"	methods	line:161
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def constructors: List[MethodSymbol]$/;"	methods	line:83
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def contains(mod: Mod) = (mods & mod.bit) != 0$/;"	methods	line:18
controlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def controlFlow($/;"	methods	line:92
convert	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def convert(toAsmTy: asm.Type, fromAsmTy: asm.Type) {$/;"	methods	line:232
convert	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def convert(toTy: Type.Ref, fromTy: Type.Ref) {$/;"	methods	line:314
convertNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def convertNeeded(toTy: Type.Ref, fromTy: Type.Ref): Boolean = {$/;"	methods	line:120
cookRawSuperClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^    def cookRawSuperClasses(csym: ClassSymbol, rawSuperClassNames: List[Name.Class]) = {$/;"	methods	line:20
cpu	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:13
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val create: AsyncInterval = master.subinterval($/;"	constants	line:86
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def create: AsyncInterval = intervals("create")$/;"	methods	line:148
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val create: AsyncInterval = master.subinterval($/;"	constants	line:82
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def create: AsyncInterval$/;"	methods	line:22
createArrayIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def createArrayIfNeeded(mvis: asm.MethodVisitor) = {$/;"	methods	line:601
createMemberIntervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def createMemberIntervals(csym: ClassFromSource) {$/;"	methods	line:13
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        def createSubst(msym: MethodSymbol) = mthdSubst(msym, inRcvr, inArgs)$/;"	methods	line:375
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def createSubst(msym: MethodSymbol) = mthdSubst(msym, inRcvr, inArgs)$/;"	methods	line:981
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def createSubst(msym: MethodSymbol) = {$/;"	methods	line:567
createSymbolForConstructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def createSymbolForConstructor(csym: ClassFromSource) = {$/;"	methods	line:28
createSymbolOnce	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def createSymbolOnce(func: => (List[in.Annotation], out.TypeRef)) = {$/;"	methods	line:130
createSymbolOnce	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def createSymbolOnce(func: => (in.MethodDecl, List[out.Param[VarSymbol.Local]], out.TypeRef)) = {$/;"	methods	line:44
createSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def createSymbols(compUnit: Ast.Parse.CompUnit) = synchronized {$/;"	methods	line:105
create_error_list	/Users/niko/git/intervals-java/Harmonic/test.py	/^def create_error_list(stdout, stderr):$/;"	function	line:493
cross	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def cross[J](js: Iterable[J]) = $/;"	methods	line:59
crossAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def crossAll(paths: List[Path.Ref]): List[List[Path.Ref]] = {$/;"	methods	line:306
crossedTls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val crossedTls = crossAll(tl)$/;"	constants	line:309
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = global.csym(className)$/;"	constants	line:156
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = global.csym(entry.name.className)$/;"	constants	line:122
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = global.csym(className)$/;"	constants	line:229
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = global.csym(name.className)$/;"	constants	line:264
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                    val csym = addCsym(new ClassFromSource(className, this, compUnit, cdecl))$/;"	constants	line:113
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def csym(name: Name.Class) = synchronized {$/;"	methods	line:75
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(className)$/;"	constants	line:489
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(className)$/;"	constants	line:903
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(memberName.className)$/;"	constants	line:743
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(memberVar.className)$/;"	constants	line:394
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(name)$/;"	constants	line:1046
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val csym = global.csym(name.className)$/;"	constants	line:769
ctor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val ctor = {$/;"	constants	line:57
ctor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val ctor = Name.InitMethod.javaName$/;"	constants	line:73
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ctorSymbol(mthd: reflect.Constructor[_]) = {$/;"	methods	line:149
ctormvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val ctormvis = interwr.cvis.visitMethod($/;"	constants	line:1318
ctors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val ctors = cls.getConstructors$/;"	constants	line:42
ctx	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    val ctx = new harmonic.lang.ApplicationContext() {$/;"	constants	line:69
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ class data, and create any necessary edges between our intervals and$/;"	classes	line:53
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        val data = new Data(csym.pos)$/;"	constants	line:97
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def data[C](cls: java.lang.Class[C]): C = synchronized {$/;"	methods	line:43
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] val data: MethodResolutionOrder.Data = global.data(classOf[MethodResolutionOrder.Data])$/;"	constants	line:19
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val data = local.get$/;"	constants	line:117
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val data = local.get$/;"	constants	line:123
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val data = local.get$/;"	constants	line:128
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val data = local.get$/;"	constants	line:133
debug	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debug(fmt: String, args: Any*) = {$/;"	methods	line:116
debugAddIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debugAddIndent {$/;"	methods	line:122
debugIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debugIndent[R](fmt: String, args: Any*)(func: => R) = {$/;"	methods	line:132
debugRemoveIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debugRemoveIndent {$/;"	methods	line:127
declLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declLvalue = positioned($/;"	constants	line:264
declOp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declOp = ($/;"	constants	line:186
declPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declPart = ident~tupleMthdParam ^^ { case i~p => (i, p) }$/;"	constants	line:180
declaration	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ - merge: merges all the lowered members into a lowered class declaration.$/;"	classes	line:42
declaredSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val declaredSyms = summary.declaredSyms + sym$/;"	constants	line:694
def	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^        \/\/ Hold off on scheduling header until class def'n is complete:$/;"	classes	line:59
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:188
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:125
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:220
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:251
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:282
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:332
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:362
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:392
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:423
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:455
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^      default: L3$/;"	label	line:94
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^      default: L1$/;"	label	line:54
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^      default: L1$/;"	label	line:80
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^      default: L2$/;"	label	line:106
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^      default: L2$/;"	label	line:134
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^      default: L2$/;"	label	line:162
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:113
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:143
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:174
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:207
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:239
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:270
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:320
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:350
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:380
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:411
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:53
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:83
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:154
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:423
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:218
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:218
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:281
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:311
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:341
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:372
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:113
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:143
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:174
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:207
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:239
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:270
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:320
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:350
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:380
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:411
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:53
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^      default: L3$/;"	label	line:83
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:154
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:218
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:188
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:188
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:154
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:218
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:281
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:311
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:341
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:372
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:188
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:219
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:281
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:311
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:341
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:372
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^      default: L2$/;"	label	line:34
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^      default: L4$/;"	label	line:40
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^      default: L2$/;"	label	line:34
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^      default: L4$/;"	label	line:40
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^      default: L2$/;"	label	line:34
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:123
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:155
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:187
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:218
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:250
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:300
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:33
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:330
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:360
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:391
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:63
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^      default: L3$/;"	label	line:93
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^      default: L1$/;"	label	line:31
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^      default: L2$/;"	label	line:34
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^      default: L2$/;"	label	line:34
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^      default: L4$/;"	label	line:40
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^      default: L1$/;"	label	line:31
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^      default: L1$/;"	label	line:31
default	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^      default: L1$/;"	label	line:31
define	/Users/niko/git/intervals-java/Harmonic/test.py	/^def define(varnm, defval):$/;"	function	line:158
defined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Creates a `Type.Class` for the class defined by this symbol. *\/$/;"	classes	line:46
definedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def definedClasses(cunit: CompUnit) =$/;"	methods	line:882
defining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Static.class: a Java class defining static members for all $/;"	classes	line:30
defn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Creates source symbols from all class defn. in `compUnit`.$/;"	classes	line:102
depth	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:13
deriveAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveAccessMap($/;"	methods	line:1223
deriveIntervalTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveIntervalTask($/;"	methods	line:1293
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = deriveAccessMap(blockClassName, tmplwr.cvis, tmpl.stmts)$/;"	constants	line:1549
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = new AccessMap(cname)$/;"	constants	line:1228
desc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val desc = plainMethodDescFromSig(msym.msig)$/;"	constants	line:957
descFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val descFunc = if(withMroIndex) mroMethodDescFromSig _ else plainMethodDescFromSig _$/;"	constants	line:1693
dfltLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val dfltLabel = new asm.Label()$/;"	constants	line:2078
diff	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def diff(self, expected, diff):$/;"	member	line:434
dirs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def dirs(paths: String) = {$/;"	methods	line:49
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Byte l, Double r) { return l * r; }$/;"	method	line:345
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Byte r) { return l * r; }$/;"	method	line:420
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Double r) { return l * r; }$/;"	method	line:435
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Float r) { return l * r; }$/;"	method	line:432
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Integer r) { return l * r; }$/;"	method	line:426
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Long r) { return l * r; }$/;"	method	line:429
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Short r) { return l * r; }$/;"	method	line:423
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Float l, Double r) { return l * r; }$/;"	method	line:417
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Integer l, Double r) { return l * r; }$/;"	method	line:381
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Long l, Double r) { return l * r; }$/;"	method	line:399
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Short l, Double r) { return l * r; }$/;"	method	line:363
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Byte l, Float r) { return l * r; }$/;"	method	line:342
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Byte r) { return l * r; }$/;"	method	line:402
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Float r) { return l * r; }$/;"	method	line:414
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Integer r) { return l * r; }$/;"	method	line:408
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Long r) { return l * r; }$/;"	method	line:411
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Short r) { return l * r; }$/;"	method	line:405
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Integer l, Float r) { return l * r; }$/;"	method	line:378
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Long l, Float r) { return l * r; }$/;"	method	line:396
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Short l, Float r) { return l * r; }$/;"	method	line:360
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Byte r) { return l * r; }$/;"	method	line:330
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Integer r) { return l * r; }$/;"	method	line:336
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Short r) { return l * r; }$/;"	method	line:333
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Byte r) { return l * r; }$/;"	method	line:366
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Integer r) { return l * r; }$/;"	method	line:372
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Short r) { return l * r; }$/;"	method	line:369
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Byte r) { return l * r; }$/;"	method	line:348
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Integer r) { return l * r; }$/;"	method	line:354
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Short r) { return l * r; }$/;"	method	line:351
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Byte l, Long r) { return l * r; }$/;"	method	line:339
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Integer l, Long r) { return l * r; }$/;"	method	line:375
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Byte r) { return l * r; }$/;"	method	line:384
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Integer r) { return l * r; }$/;"	method	line:390
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Long r) { return l * r; }$/;"	method	line:393
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Short r) { return l * r; }$/;"	method	line:387
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Short l, Long r) { return l * r; }$/;"	method	line:357
divider	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def divider(self):$/;"	member	line:446
doSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubst(pat_from: Pattern.Ref, pat_to: Pattern.Ref): Subst = {$/;"	methods	line:54
doSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubsts(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]): Subst = {$/;"	methods	line:71
drop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def drop(n: Int): FileReader = $/;"	methods	line:425
dropHead	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                def dropHead(l: List[ClassSymbol]): Option[List[ClassSymbol]] = {$/;"	methods	line:50
dumpBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpBytecode = false$/;"	local variables	line:20
dumpLoweredTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpLoweredTrees = false$/;"	local variables	line:19
dumpParsedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpParsedTrees = false$/;"	local variables	line:17
dumpResolvedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpResolvedTrees = false$/;"	local variables	line:18
elapsedMilli	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedMilli = System.currentTimeMillis - start$/;"	constants	line:156
elapsedMin	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedMin = elapsedSec \/ 60$/;"	constants	line:158
elapsedSec	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedSec = elapsedMilli \/ 1000$/;"	constants	line:157
elimCovariantReturns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def elimCovariantReturns(mthds: Array[reflect.Method]) = {$/;"	methods	line:202
elimPrimitiveConflicts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def elimPrimitiveConflicts(msyms: List[MethodSymbol]) = debugIndent("elimPrimitiveConflicts(%s)", cls) {$/;"	methods	line:246
emitDebugInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var emitDebugInfo = true$/;"	local variables	line:25
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val empty = SymbolSummary(Set(), Set(), Set(), Set())$/;"	constants	line:638
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def empty(global: Global) = Env($/;"	methods	line:11
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        val empty = Set(0)$/;"	constants	line:36
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    val empty = new Subst(Map())$/;"	constants	line:61
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    val empty: Map = scala.collection.immutable.Map()$/;"	constants	line:35
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    val empty = new TypedSubst(Map(), Map())$/;"	constants	line:63
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    private[this] val emptyEnv = Env.empty(global)$/;"	constants	line:12
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    private[this] val emptyEnv = Env.empty(global)$/;"	constants	line:17
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^        val emptyEnv = Env.empty(global)$/;"	constants	line:15
emptyScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val emptyScope = InScope(Map())$/;"	constants	line:33
end	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def end() {$/;"	methods	line:395
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val endLabel = new asm.Label()$/;"	constants	line:1370
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val endLabel = new asm.Label()$/;"	constants	line:1901
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val endLabel = new asm.Label()$/;"	constants	line:1201
ensureLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def ensureLoadable(cls: Class[_]) {$/;"	methods	line:5
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val env = mro.foldLeft(Env.empty(global))(addClassToCheckEnv)$/;"	constants	line:174
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val env = csym.classEnv$/;"	constants	line:90
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        var env = csym.checkEnv$/;"	local variables	line:29
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env = csym.classEnv$/;"	constants	line:136
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:185
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:677
env0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env0 = emptyEnv.plusThis(thisTy, thisSym)$/;"	constants	line:22
equals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    override def equals(obj: Any) = {$/;"	methods	line:8
equatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equatable(path: Path.Ref) = debugIndent("equatable(%s)", path) { new Equater().compute(path) }$/;"	methods	line:378
equatablePath1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val equatablePath1 = equatable(path1)$/;"	constants	line:388
equatablePath2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val equatablePath2 = equatable(path2)$/;"	constants	line:389
equatableTypeVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def equatableTypeVars(tyVar: Type.Member) = {$/;"	methods	line:408
equateVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equateVars(ty: Type.Ref) = new Bounder(TcEq).compute(ty)$/;"	methods	line:446
err	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val err = $/;"	constants	line:10
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:873
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:914
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = Type.Top$/;"	methods	line:957
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def errTy: Ty$/;"	methods	line:68
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def error(name: Name.Method, clsName: Name.Class) = {$/;"	methods	line:8
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val error = Error(pos, msgKey, msgArgs.toList)$/;"	constants	line:19
error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def error(self, message):$/;"	member	line:449
errorField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    def errorField(name: Name.Member, optExpTy: Option[Type.Ref]) = {$/;"	methods	line:17
errorLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    def errorLocal(name: Name.LocalVar, optExpTy: Option[Type.Ref]) = {$/;"	methods	line:34
errorPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def errorPath(name: String) = {$/;"	methods	line:354
errorSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val errorSym = MethodSymbol.error(Name.InitMethod, targetCsym.name)$/;"	constants	line:577
errors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    private[this] val errors = new mutable.ListBuffer[Error]()$/;"	constants	line:14
esc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def esc = elem("escape", c => c == '`')$/;"	methods	line:29
escape	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def escape(str: String) = {$/;"	methods	line:49
execInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execInlineInterval($/;"	methods	line:1434
execStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def execStatement(stmt: in.Stmt) {$/;"	methods	line:1080
execStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1176
execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^def execute(res, args):$/;"	function	line:477
expArgumentTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val expArgumentTy = optTypeArg(Name.BlockA, optExpTy).getOrElse(Type.Void)$/;"	constants	line:1110
expTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val expTy = optTypeFromLocal(env, lv)$/;"	constants	line:847
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def expand(lvalue: Pattern.Anon, inAsmTypes: List[asm.Type]): List[asm.Type] = {$/;"	methods	line:756
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def expand(queue0: Queue[T], result: Set[T]): Set[T] = {$/;"	methods	line:55
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^            val expansions = resolveRelList(context)$/;"	constants	line:101
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val expansions = resolveRelList(relList)$/;"	constants	line:107
expects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                            throw new UsageError("Application class expects parameters.")$/;"	classes	line:62
expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr: PackratParser[out.Expr] = positioned($/;"	constants	line:393
expr0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr0: PackratParser[out.Expr] = positioned($/;"	constants	line:373
extPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val extPath = Path.Field(path.toPath, name)$/;"	constants	line:799
extTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val extTy = Type.Member(path.toPath, name)$/;"	constants	line:803
extendedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def extendedClasses = ExtendedClasses.v$/;"	methods	line:201
extendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedInterval(inter: Interval) = ExtendedInterval(inter)$/;"	methods	line:218
extendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedIterable[E](iterable: Iterable[E]) = new ExtendedIterable(iterable)$/;"	methods	line:65
extendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedList[E](list: List[E]): ExtendedList[E] = new ExtendedList(list)$/;"	methods	line:79
extendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    implicit def extendedMap(m: Map) = ExtendedMap(m)$/;"	methods	line:40
extendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedMethodVisitor(mvis: asm.MethodVisitor) = ExtendedMethodVisitor(mvis)$/;"	methods	line:329
extendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedOption[E](option: Option[E]): ExtendedOption[E] = new ExtendedOption(option)$/;"	methods	line:92
extendedParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedParam(pat: Param[VSym]): ExtendedParam = $/;"	methods	line:973
extendedTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedTypeRef(ty: Type.Ref): ExtendedTypeRef = ExtendedTypeRef(ty)$/;"	methods	line:118
extendedTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedTypedPath(path: Path.Typed): ExtendedTypedPath = $/;"	methods	line:980
extendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val extendsArg: PackratParser[out.ExtendsArg] = ($/;"	constants	line:118
extendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val extendsDecl = positioned($/;"	constants	line:134
extract_fragments	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_fragments(filenm):$/;"	function	line:305
extract_metadata	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_metadata(filenm):$/;"	function	line:344
fallback	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def fallback(inDecl: in.FieldDecl) = {$/;"	methods	line:151
fallback	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def fallback(inDecl: in.MethodDecl) = {$/;"	methods	line:69
fieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldDecl = positioned($/;"	constants	line:225
fieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldLvalue = positioned($/;"	constants	line:261
fieldName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fieldName = freshVarName(optName)$/;"	constants	line:1238
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def fieldNamed(name: Name.Member): Option[VarSymbol.Field] = allFieldSymbols.find(_.isNamed(name))$/;"	methods	line:47
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def fieldNamed(name: Name.Member) = {$/;"	methods	line:169
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def fieldNamed(name: Name.Member): Option[VarSymbol.Field]$/;"	methods	line:91
fieldPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val fieldPath = fsym.kind match {$/;"	constants	line:1769
fieldSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymTabEntry(fld: reflect.Field) = {$/;"	methods	line:70
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymbol(fld: reflect.Field) = {$/;"	methods	line:132
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def fieldSymbol(memberName: Ast.MemberName) = {$/;"	methods	line:767
fieldSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^                    val fieldSyms = csym.loweredSource.pattern.symbols$/;"	constants	line:75
fieldValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldValue = positioned($/;"	constants	line:220
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^            val file = new File(path, baseName + ext)$/;"	constants	line:56
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = file$/;"	methods	line:21
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(cls.toString)$/;"	methods	line:41
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(name.toString)$/;"	methods	line:34
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def file: java.io.File$/;"	methods	line:6
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            def file = interFile$/;"	methods	line:429
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val file = $/;"	constants	line:25
fileWithExtension	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def fileWithExtension(ext: String) = {$/;"	methods	line:352
fillInStackTrace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^    public ControlFlowException fillInStackTrace() {$/;"	method	line:5
findSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def findSym(memberVar: Name.Member) = {$/;"	methods	line:180
first	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            var first = true$/;"	local variables	line:711
firstRight	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstRight[L,R](left0: L)(func: ((L, E) => Either[L,R])) = {$/;"	methods	line:52
firstSome	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstSome[F](func: (E => Option[F])) = {$/;"	methods	line:45
firstSuperClassOfferingMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def firstSuperClassOfferingMethod(pos: Position, mthdName: Name.Method): Type.Ref = {$/;"	methods	line:1150
flatArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val flatArgNodes = flattenAssignment(msym.msig.parameterPatterns, outArgNodes)$/;"	constants	line:377
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val flatArgs = flattenAssignment(msym.msig.parameterPatterns, outArgs)$/;"	constants	line:983
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val flatArgs = flattenAssignment(msym.msig.parameterPatterns, outArgs)$/;"	constants	line:970
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val flatArgs = flattenAssignment(msym.msig.parameterPatterns, args)$/;"	constants	line:583
flatPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val flatPaths = flatArgs.map(_.path)$/;"	constants	line:999
flattenAssignment	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def flattenAssignment($/;"	methods	line:305
flattenPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def flattenPair(pos: out.TypedPath)(pair: (Pattern.Anon, Path.Typed)): List[out.TypedPath] = {$/;"	methods	line:309
floatTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val floatTypes = List[Class[_]]($/;"	constants	line:18
flush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def flush() = {$/;"	methods	line:391
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:458
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:461
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - AstPattern is a base class for Param and Lvalue$/;"	classes	line:337
forAnnotationsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forAnnotationsNamed(annotationNames: List[Name.Class]) = {$/;"	methods	line:52
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClass(cls: java.lang.Class[_]) = new InterPosition() {$/;"	methods	line:40
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forClass(cls: java.lang.Class[_]) = {$/;"	methods	line:44
forClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClassNamed(name: Name.Class) = new InterPosition() {$/;"	methods	line:33
forClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    def forClassType(classTy: Type.Class): List[ClassSymbol] = {$/;"	methods	line:92
forEach	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <A> Void forEach($/;"	method	line:50
forFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forFile(file: java.io.File) = new InterPosition() {$/;"	methods	line:20
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = None$/;"	methods	line:523
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:530
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(name: VarName): Option[PathTypeArg]$/;"	methods	line:516
forJavaModifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forJavaModifiers(bits: Int) = {$/;"	methods	line:40
forLoweredAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forLoweredAnnotations(annotations: List[Ast.Lower.Annotation]) = {$/;"	methods	line:60
forMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forMember(mem: java.lang.reflect.Member) = {$/;"	methods	line:48
forResolvedAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forResolvedAnnotations(annotations: List[Ast.Resolve.Annotation]) = {$/;"	methods	line:56
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^    def forSym(csym: ClassFromSource): Unit = {$/;"	methods	line:11
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^    def forSym(csym: ClassFromSource) = {$/;"	methods	line:96
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    def forSym(csym: ClassSymbol): Unit = debugIndent("GatherOverrides(%s)", csym) {$/;"	methods	line:15
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    def forSym(csym: ClassSymbol): List[ClassSymbol] = data.synchronized {$/;"	methods	line:62
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = None$/;"	methods	line:529
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:522
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(name: VarName): Option[TypeTypeArg]$/;"	methods	line:515
format_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def format_error(outfilenm, linenum, msg):$/;"	function	line:175
format_error	/Users/niko/git/intervals-java/Harmonic/test_config.py	/^def format_error(outfilenm, linenum, msg):$/;"	function	line:7
fragment_count	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def fragment_count(self):$/;"	member	line:220
freshCounter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] var freshCounter = 0$/;"	local variables	line:190
freshInteger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def freshInteger() = {$/;"	methods	line:192
freshName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val freshName = Name.LocalVar("(env-%s)".format(global.freshInteger()))$/;"	constants	line:704
freshVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshVarName(base: Option[Name.Var]) = {$/;"	methods	line:67
fromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val fromSym = global.csym(fromName)$/;"	constants	line:124
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val fsym = lowerMember.toOptFieldSymbol(name).get$/;"	constants	line:1826
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val fsym = lowerMember.toOptFieldSymbol(name).get$/;"	constants	line:1837
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val fsym = lookupFieldOrError(csym.toType, name, None)$/;"	constants	line:265
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val fsym = VarSymbol.errorField(memberVar, optExpTy)$/;"	constants	line:927
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val fsym = fieldSymbol(memberName)$/;"	constants	line:832
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val fsym = fieldSymbol(memberName)$/;"	constants	line:870
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val fsym = csym.fieldNamed(memberVar) match {$/;"	constants	line:904
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val fsym = new VarSymbol.Field($/;"	constants	line:137
fsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^            val fsyms: List[VarSymbol.Field] = classParam.symbols$/;"	constants	line:171
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fvis = cvis.visitField($/;"	constants	line:1241
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val fvis = cvis.visitField(O.ACC_PRIVATE, javaName, javaDesc, null, null)$/;"	constants	line:2286
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val gather: AsyncInterval = master.subinterval($/;"	constants	line:116
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def gather: AsyncInterval = intervals("gather")$/;"	methods	line:152
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val gather: AsyncInterval = master.subinterval($/;"	constants	line:112
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def gather: AsyncInterval$/;"	methods	line:26
gatherMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def gatherMethodGroups($/;"	methods	line:73
genClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def genClassName(context: Name.Class, node: Ast.Node) = {$/;"	methods	line:45
generatePreAndPostCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def generatePreAndPostCode(stmts: List[in.Stmt])(doBody: => Unit) {$/;"	methods	line:1193
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    E get(int index);$/;"	method	line:4
getArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getArgs = appArgsList$/;"	constants	line:73
getArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    List<String> getArgs();$/;"	method	line:21
getErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getErr = System.err$/;"	constants	line:72
getErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    PrintStream getErr();$/;"	method	line:18
getHarmonicField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def getHarmonicField(fsym: VarSymbol.Field) = {$/;"	methods	line:182
getIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getIn = System.in$/;"	constants	line:70
getIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    InputStream getIn();$/;"	method	line:12
getOut	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getOut = System.out$/;"	constants	line:71
getOut	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    PrintStream getOut();$/;"	method	line:15
getRoot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getRoot = root$/;"	constants	line:74
getRoot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    Interval getRoot();$/;"	method	line:24
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    val global: Global,$/;"	constants	line:7
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    val global: Global$/;"	constants	line:5
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val global: Global,$/;"	constants	line:12
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val global: Global,$/;"	constants	line:10
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val global: Global$/;"	constants	line:10
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^                val global = new Global(config, new Reporter(config))$/;"	constants	line:12
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = methodGroups.group(msym)$/;"	constants	line:96
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = new MethodGroup(msym.name, msym.msig)$/;"	constants	line:41
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def group(msym: MethodSymbol) =$/;"	methods	line:67
groups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] val groups = new mutable.HashMap[Name.Method, List[MethodGroup]]()$/;"	constants	line:38
handle_negative_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_negative_test(res, experrors, retcode, stdout, stderr):$/;"	function	line:545
handle_positive_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_positive_test(res, exp_output, retcode, stdout, stderr):$/;"	function	line:559
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Unscheduled.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^package harmonic.runtime;$/;"	package	line:1
harmonicInit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val harmonicInit = "$Harmonic$init"$/;"	constants	line:20
harmonicInitDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def harmonicInitDesc(name: Name.Class) = {$/;"	methods	line:136
has	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ Most of these intervals do not have to do anything as this class has$/;"	classes	line:51
hasErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def hasErrors = !errors.isEmpty$/;"	methods	line:16
head	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val head = superLists(idx).head$/;"	constants	line:49
head	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            val head = superList.head$/;"	constants	line:34
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val header: AsyncInterval = master.subinterval($/;"	constants	line:58
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def header: AsyncInterval = intervals("header")$/;"	methods	line:145
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val header: AsyncInterval = master.subinterval($/;"	constants	line:57
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def header: AsyncInterval$/;"	methods	line:19
helper	/Users/niko/git/intervals-java/Harmonic/test.py	/^        def helper(str):$/;"	member	line:411
here	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * nor do we generate the contents of the FooTask class here.$/;"	classes	line:1396
hprof	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:13
i	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        var i = 0$/;"	local variables	line:77
id	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def id = MethodId(clsName, name, msig)$/;"	methods	line:36
identifyBestFromMcall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def identifyBestFromMcall(msyms: List[MethodSymbol], rcvrTy: Type.Ref) =$/;"	methods	line:991
identifyBestMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def identifyBestMethod($/;"	methods	line:949
idx	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            \/\/    val idx = stack.indexOf(csym)$/;"	constants	line:70
ifElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifElse($/;"	method	line:26
ifNone	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def ifNone(func: => Option[E]) = option match {$/;"	methods	line:87
ifNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void ifNull($/;"	method	line:16
ifNullElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifNullElse($/;"	method	line:38
if_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void if_($/;"	method	line:7
ignoreErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var ignoreErrors = false$/;"	local variables	line:22
impThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impThis = positioned($/;"	constants	line:387
impVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impVoid = ($/;"	constants	line:406
implClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val implClassName = csym.name.withSuffix(implSuffix)$/;"	constants	line:2266
implSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val implSuffix = "$Harmonic$Impl"$/;"	constants	line:18
importDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val importDecl = positioned($/;"	constants	line:112
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    type CND <: Ast.Name    \/\/ Name of class in declaration (starts out unqual, becomes qual)$/;"	classes	line:37
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val in.DeclareVarLvalue(anns, _, name, ()) = lv$/;"	constants	line:780
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val in.RelDot(base, mname) = relDot$/;"	constants	line:235
inBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def inBlock = (flags & IN_BLOCK) != 0$/;"	methods	line:734
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = Member(className, text)        $/;"	methods	line:151
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = this$/;"	methods	line:132
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class): Member$/;"	methods	line:148
inMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    val inMemberDecl: in.MemberDecl$/;"	constants	line:12
inRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val inRcvr = in.Static(className)$/;"	constants	line:436
ind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var ind = 0$/;"	local variables	line:22
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def indent() {$/;"	methods	line:24
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def indent() {$/;"	methods	line:46
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indent(): Unit$/;"	methods	line:4
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        var indent: Int = 0$/;"	local variables	line:101
indented	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indented(start: String, end: String)(func: => Unit) {$/;"	methods	line:9
infTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val infTypeRef = positioned($/;"	constants	line:275
inferredReturnType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def inferredReturnType(env: Env, stmts: List[out.Stmt]) = {$/;"	methods	line:85
initInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def initInlineInterval($/;"	methods	line:1398
initialValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def initialValue() = synchronized {$/;"	methods	line:109
inlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def inlineInterval[R](name: String)(func: (Interval => R)): R = {$/;"	methods	line:220
inputFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val inputFiles = new ListBuffer[File]()$/;"	constants	line:15
integer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def integer(idx: Int) = Constant(java.lang.Integer.valueOf(idx))$/;"	methods	line:43
integer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def integer(idx: Int) = TypedConstant(java.lang.Integer.valueOf(idx))$/;"	methods	line:127
integralTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val integralTypes = List[Class[_]]($/;"	constants	line:11
inter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] val inter: Interval = {$/;"	constants	line:16
interAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interAccessMap = deriveAccessMap(taskClassName, interwr.cvis, body.stmts)$/;"	constants	line:1311
interPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val interPath = csym.loweredSource.thisSym.toTypedPath \/ fsym$/;"	constants	line:2246
interStmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val interStmtVisitor = new StatementVisitor(0, interAccessMap, IntConstant(0), runmvis)$/;"	constants	line:1361
interfaceMethodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interfaceMethodSig = MethodSignature($/;"	constants	line:1588
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val internalImplName = global.csym(name).internalImplName$/;"	constants	line:1041
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def internalImplName = name.internalName$/;"	methods	line:10
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def internalImplName = name.internalName + ByteCode.implSuffix$/;"	methods	line:18
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def internalImplName: String$/;"	methods	line:32
internalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def internalName = base.toInternalPrefix + name$/;"	methods	line:55
intersectArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def intersectArgs(leftArgs: List[Type.Arg], rightArgs: List[Type.Arg]) = {$/;"	methods	line:504
intersects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def intersects(seq: Seq[E]): Boolean =$/;"	methods	line:62
intervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val intervalDecl = positioned($/;"	constants	line:209
intervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    private[this] lazy val intervals = {$/;"	constants	line:57
interwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interwr = new ClassWriter(taskClassName, noSuffix, body.pos)$/;"	constants	line:1298
intrinsics	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val intrinsics = new mutable.HashMap[(Name.Qual, Name.Method), List[MethodSymbol]]()$/;"	constants	line:56
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** When a new instance of this class is created, what should we REALLY instantiate? *\/$/;"	classes	line:31
isAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isAbstract = contains(Abstract)$/;"	methods	line:22
isAtomicPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def isAtomicPath(path: Path.Typed) = path match {$/;"	methods	line:1223
isBestChoice	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def isBestChoice(msym: MethodSymbol) = {$/;"	methods	line:630
isBetterChoiceThan	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def isBetterChoiceThan(msym_better: MethodSymbol, msym_worse: MethodSymbol) = {$/;"	methods	line:616
isCompatibleWith	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def isCompatibleWith($/;"	methods	line:46
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInPathArg: Boolean = false$/;"	methods	line:15
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true        $/;"	methods	line:27
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true$/;"	methods	line:20
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInTypeArg: Boolean = false$/;"	methods	line:16
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInTypeArg = true$/;"	methods	line:24
isDeclaredByCls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isDeclaredByCls(member: reflect.Member) = (member.getDeclaringClass == cls)$/;"	methods	line:17
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^            override def isError = true$/;"	methods	line:20
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def isError: Boolean = false$/;"	methods	line:11
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^            override def isError = true$/;"	methods	line:20
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^            override def isError = true$/;"	methods	line:37
isFromClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def isFromClassNamed(aName: Name.Qual) = (clsName == aName)$/;"	methods	line:38
isGoodHead	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        def isGoodHead(superList: List[ClassSymbol]) = {$/;"	methods	line:33
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isInstanceFieldNamed(aName: Name.Member): Boolean = false$/;"	methods	line:7
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isInstanceFieldNamed(aName: Name.Member): Boolean = (name == aName)$/;"	methods	line:19
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def isNamed(aName: Name.Qual) = (name == aName)$/;"	methods	line:20
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def isNamed(aName: Name.Method) = (name == aName)$/;"	methods	line:39
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    def isNamed(aName: Name.Var) = (name == aName)    $/;"	methods	line:53
isNotAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotAbstract = !contains(Abstract)$/;"	methods	line:23
isNotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotOverride = !contains(Override)$/;"	methods	line:26
isNotStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotStatic = !contains(Static)$/;"	methods	line:29
isNotUnscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotUnscheduled = !contains(Unscheduled)$/;"	methods	line:32
isOperCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperCont(c: Char) = c != EofCh && !c.isWhitespace && !sep.contains(c)$/;"	methods	line:33
isOperStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperStart(c: Char) = isOperCont(c) && !c.isLetter && !c.isDigit$/;"	methods	line:34
isOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isOverride = contains(Override)$/;"	methods	line:25
isPreferable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        def isPreferable(oldClass: java.lang.Class[_], newClass: java.lang.Class[_]): Option[Boolean] = {$/;"	methods	line:226
isPrivate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isPrivate(member: reflect.Member) = (member.getModifiers & reflect.Modifier.PRIVATE) != 0$/;"	methods	line:16
isSatisfiedForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSatisfiedForPath(path: Path.Typed)(arg: Type.Arg): Boolean = {$/;"	methods	line:796
isStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isStatic = contains(Static)$/;"	methods	line:28
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def isSubclass(superCsym: ClassSymbol): Boolean = {$/;"	methods	line:67
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def isSubclass(ty_sub: Type.Ref, ty_sup: Type.Ref): Boolean = {$/;"	methods	line:761
isSuitable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isSuitable(member: reflect.Member) = isDeclaredByCls(member) && !isPrivate(member)$/;"	methods	line:18
isSuitableArgument	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSuitableArgument(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:635
isSuitableArgumentBounded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def isSuitableArgumentBounded(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:607
isUnscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isUnscheduled = contains(Unscheduled)$/;"	methods	line:31
iterableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableClass = classOf[java.lang.Iterable[_]]$/;"	constants	line:78
iterableTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableTy = Type.Class(iterableClass)$/;"	constants	line:90
jBit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	constants	line:7
javaDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val javaDesc = fsym.ty.toAsmType.getDescriptor$/;"	constants	line:2284
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val javaName = accessorName(fsym.name)$/;"	constants	line:2283
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = parts.mkString("$")$/;"	methods	line:107
javaReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val javaReader = Util.javaReaderFromFile(interFile)$/;"	constants	line:435
javaReaderFromFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromFile(file: java.io.File) = new java.io.FileReader(file)$/;"	methods	line:16
javaReaderFromPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromPath(path: String) = javaReaderFromFile(new java.io.File(path))$/;"	methods	line:15
join	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def join = {$/;"	methods	line:9
join	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def join() = {$/;"	methods	line:195
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val key = (msym.name, msym.msig.parameterPatterns)$/;"	constants	line:254
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val key = (mthd.getName, mthd.getParameterTypes.toList)$/;"	constants	line:206
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val key = (msym.clsName, msym.name)$/;"	constants	line:59
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val kind: MethodKind,            \/** Intrinsic, harmonic, java, etc. *\/$/;"	constants	line:29
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val kind: FieldKind$/;"	constants	line:14
label	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val label = new asm.Label()$/;"	constants	line:322
labels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val labels = msyms.map(_ => new asm.Label()).toArray$/;"	constants	line:2079
lbSuperTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val lbSuperTys = lowerBoundVars(ty)$/;"	constants	line:813
lbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val lbs = wt.getLowerBounds$/;"	constants	line:83
leftArgsUp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftArgsUp = leftArgs.filter(appliesTo(bestCsym))$/;"	constants	line:592
leftCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftCsym = global.csym(leftName)$/;"	constants	line:585
leftMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val leftMap = leftArgs.map(arg => (arg.name, arg)).toMap$/;"	constants	line:505
leftMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftMro = MethodResolutionOrder(global).forSym(leftCsym)$/;"	constants	line:587
leftTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val leftTy = Type.Class(leftClass)$/;"	constants	line:43
length	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    int length();$/;"	method	line:6
lexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    val lexical = new HlLexical$/;"	constants	line:53
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:22
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:28
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:35
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:42
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:24
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:37
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:44
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = "<unknown>"$/;"	methods	line:30
list	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val list = csym :: merge(csym, superLists)$/;"	constants	line:84
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    protected[this] def loadData = {$/;"	methods	line:11
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    protected[this] def loadData: Data$/;"	methods	line:36
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    protected[this] def loadData = Data($/;"	methods	line:7
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    protected[this] def loadData = Data($/;"	methods	line:20
loadFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def loadFrom(args: Array[String]): Boolean = {$/;"	methods	line:76
loadSourceFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        def loadSourceFile(file: java.io.File) {$/;"	methods	line:127
loadVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def loadVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:174
loadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def loadedOrLoadable(className: Name.Class) = synchronized {$/;"	methods	line:87
local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    private[this] val local = new java.lang.ThreadLocal[DebugData]() {$/;"	constants	line:107
localIsDefined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def localIsDefined(name: Name.LocalVar) = $/;"	methods	line:139
localName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val localName = positioned(varIdent ^^ { s => Ast.LocalName(Name.LocalVar(s)) })    $/;"	constants	line:87
localize	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var localize = false$/;"	local variables	line:24
locateSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def locateSource(className: Name.Class) = synchronized {        $/;"	methods	line:122
log	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def log(self, text):$/;"	member	line:454
lookupBean	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupBean($/;"	methods	line:192
lookupEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupEntry(csym: ClassSymbol, uName: Name.UnloweredMember): CanFail[SymTab.MemberEntry] = {$/;"	methods	line:109
lookupField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupField($/;"	methods	line:176
lookupFieldOrError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupFieldOrError($/;"	methods	line:213
lookupInstanceMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupInstanceMethods($/;"	methods	line:234
lookupInstanceMethodsDefinedOnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupInstanceMethodsDefinedOnClass($/;"	methods	line:224
lookupIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def lookupIntrinsic(className: Name.Qual, methodName: Name.Method): Option[List[MethodSymbol]] = {$/;"	methods	line:65
lookupMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupMember[R]($/;"	methods	line:148
lookupThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupThis = $/;"	methods	line:142
lookupTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupTypeVar($/;"	methods	line:166
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val lower: AsyncInterval = master.subinterval($/;"	constants	line:76
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def lower: AsyncInterval = intervals("lower")$/;"	methods	line:147
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val lower: AsyncInterval = master.subinterval($/;"	constants	line:72
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def lower: AsyncInterval$/;"	methods	line:21
lowerAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerAnnotation(ann: in.Annotation) = withPosOf(ann,$/;"	methods	line:546
lowerAnyParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerAnyParams[S <: VarSymbol.Any]($/;"	methods	line:178
lowerBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerBlock(optExpTy: Option[Type.Ref])(tmpl: in.Block) = withPosOf(tmpl, {$/;"	methods	line:1109
lowerBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBlockParam(env: Env, expTy: Type.Ref, inParam: in.Param[Unit]) = {$/;"	methods	line:170
lowerBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBody(env: Env, body: in.Body): out.Body = {$/;"	methods	line:672
lowerBoundVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lowerBoundVars(ty: Type.Ref) = new Bounder(TcSup).compute(ty)$/;"	methods	line:456
lowerCast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerCast(expr: in.Cast) = withPosOf(expr, {$/;"	methods	line:1143
lowerClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerClassParam(csym: ClassSymbol, classEnv: Env, inParam: in.Param[Unit]) = {$/;"	methods	line:153
lowerDeclaredVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerDeclaredVar(lv: in.DeclareVarLvalue, ty: Type.Ref, rv: out.Expr) = {$/;"	methods	line:779
lowerExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExpr(optExpTy: Option[Type.Ref])(expr: in.Expr): out.Expr = expr match {$/;"	methods	line:1171
lowerExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExtendsArg(arg: in.ExtendsArg): out.TypedPath = withPosOf(arg, {$/;"	methods	line:550
lowerExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExtendsDecl(extendsDecl: in.ExtendsDecl) = withPosOf(extendsDecl, {$/;"	methods	line:560
lowerField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerField(optExpTy: Option[Type.Ref])(expr: in.Field) = withPosOf(expr, {$/;"	methods	line:888
lowerFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerFieldDecl($/;"	methods	line:132
lowerFromInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerFromInExpr(pair: (in.Lvalue, in.Expr)): Unit = {$/;"	methods	line:838
lowerFromOutExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerFromOutExpr(pair: (in.Lvalue, out.Expr)): Unit = {$/;"	methods	line:807
lowerImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerImpThis(expr: in.Expr) = withPosOf(expr, {$/;"	methods	line:1139
lowerIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerIntervalDecl($/;"	methods	line:63
lowerLiteralExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLiteralExpr(expr: in.Literal) = withPosOf(expr, {$/;"	methods	line:945
lowerMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMemberDecl($/;"	methods	line:43
lowerMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def lowerMembers = LowerMembers.v$/;"	methods	line:159
lowerMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerMethodCall(optExpTy: Option[Type.Ref])(mcall: in.MethodCall) = withPosOf(mcall, {$/;"	methods	line:990
lowerMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodDecl($/;"	methods	line:98
lowerMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodParams(classEnv: Env, inParams: List[in.Param[Unit]]) = {$/;"	methods	line:162
lowerNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewCtor(expr: in.NewCtor) = withPosOf(expr, {$/;"	methods	line:1043
lowerNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNull(optExpTy: Option[Type.Ref])(expr: in.Null) = withPosOf(expr, {$/;"	methods	line:1079
lowerParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerParam($/;"	methods	line:187
lowerPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerPath(path: in.PathNode): out.TypedPath = {$/;"	methods	line:466
lowerReassignedField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerReassignedField(memberName: Ast.MemberName, fsym: VarSymbol.Field, rv: out.Expr) = {$/;"	methods	line:800
lowerReassignedVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerReassignedVar(localName: Ast.LocalName, sym: VarSymbol.Local, rv: out.Expr) = {$/;"	methods	line:793
lowerRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerRelDecl($/;"	methods	line:53
lowerRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerRequirement(req: in.PathRequirement) = withPosOf(req, out.PathRequirement($/;"	methods	line:540
lowerStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerStmts(env0: Env, stmts: List[in.Stmt]): List[out.Stmt] = {$/;"	methods	line:676
lowerToTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerToTypedPath(optExpTy: Option[Type.Ref])(expr: in.Expr): Path.Typed = {$/;"	methods	line:1186
lowerToTypedPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerToTypedPathNode(optExpTy: Option[Type.Ref])(expr: in.Expr): out.TypedPath = {$/;"	methods	line:1190
lowerTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTuple(optExpTy: Option[Type.Ref])(tuple: in.Tuple) = withPosOf(tuple, {$/;"	methods	line:1084
lowerTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeRef(tref: in.ResolveTypeRef): out.TypeRef = withPosOf(tref, {$/;"	methods	line:534
loweredMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def loweredMethods = LoweredMethods.v$/;"	methods	line:179
loweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def loweredSource = LoweredSource.v$/;"	methods	line:182
lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val lvalue: PackratParser[out.Lvalue] = tupleLvalue | declLvalue | reassignLvalue | fieldLvalue$/;"	constants	line:269
lvsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val lvsym = locals.get(name).getOrElse(VarSymbol.errorLocal(name, None))$/;"	constants	line:259
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        def main(args: Array[String]): Unit = {$/;"	methods	line:37
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    def main(args: Array[String]) {$/;"	methods	line:91
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^    def main(args: Array[String]) {$/;"	methods	line:8
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^    public Object main(ApplicationContext ctx);$/;"	method	line:6
main	/Users/niko/git/intervals-java/Harmonic/test.py	/^def main(args):$/;"	function	line:651
map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^class Subst(private val map: Map[Path.Ref, Path.Ref]) {$/;"	constants	line:5
mapContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def mapContext[C,F](context: C, func: (E => (C, F))): (C, List[F]) = {$/;"	methods	line:68
master	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    var master: Interval = null$/;"	local variables	line:15
masterDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val masterDesc = descFunc(masterSig)$/;"	constants	line:1694
matches	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def matches(unlowerName: UnloweredMember) = unlowerName match {$/;"	methods	line:127
matchesByClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def matchesByClass(pattern: Pattern.Ref, ty: Type.Ref): Boolean = {$/;"	methods	line:776
matching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val matching = msyms.takeWhile(_.isFromClassNamed(csym.name))$/;"	constants	line:2045
mathOps	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val mathOps = List($/;"	constants	line:25
maxIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxIndex = 0$/;"	local variables	line:594
maxSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxSlot = 0$/;"	local variables	line:562
maxThreadId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        private[this] var maxThreadId = 0$/;"	local variables	line:108
measure	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def measure[R](label: String)(func: => R) = {$/;"	methods	line:151
member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val member: PackratParser[out.MemberDecl] = ($/;"	constants	line:164
memberCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val memberCsym = global.csym(memberVar.className)$/;"	constants	line:181
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def memberDecl = {$/;"	methods	line:26
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val memberName = Name.Member(name, fld.getName)$/;"	constants	line:71
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val memberName = varName$/;"	constants	line:89
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                                    val memberName = Name.Member(className, text)$/;"	constants	line:421
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:402
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:541
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val memberName = resolveMemberName(expr.name)$/;"	constants	line:643
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val memberVar = expr.name.name.inDefaultClass(Name.ObjectClass)$/;"	constants	line:926
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val memberVar = expr.name.name match {$/;"	constants	line:892
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val members: AsyncInterval = master.subinterval($/;"	constants	line:93
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def members: AsyncInterval = intervals("members")$/;"	methods	line:149
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** List of class members being lowered. *\/$/;"	classes	line:157
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val members: AsyncInterval = master.subinterval($/;"	constants	line:89
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def members: AsyncInterval$/;"	methods	line:23
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^        val merge: AsyncInterval = master.subinterval($/;"	constants	line:101
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def merge: AsyncInterval = intervals("merge")$/;"	methods	line:150
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val merge: AsyncInterval = master.subinterval($/;"	constants	line:97
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def merge: AsyncInterval$/;"	methods	line:24
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] def merge(csym: ClassSymbol, superLists: List[List[ClassSymbol]]): List[ClassSymbol] = {$/;"	methods	line:23
mergeMemberIntervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^    def mergeMemberIntervals(csym: ClassFromSource) {$/;"	methods	line:13
mergeSuperSymbolTables	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def mergeSuperSymbolTables(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:59
methodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val methodDecl = positioned($/;"	constants	line:171
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def methodGroups = MethodGroups.v$/;"	methods	line:198
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val methodGroups = gatherMethodGroups(csym, env)$/;"	constants	line:30
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val methodGroups = new MethodGroups(env)$/;"	constants	line:77
methodMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val methodMap = new mutable.HashMap[(Name.Method, List[Pattern.Ref]), MethodSymbol]()$/;"	constants	line:247
methodMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val methodMap = new mutable.HashMap[(String, List[Class[_]]), reflect.Method]()$/;"	constants	line:203
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val methodName = Name.Method(List(prop))$/;"	constants	line:200
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val methodName: Name.Method,$/;"	constants	line:16
methodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val methodSig = MethodSignature($/;"	constants	line:1551
methodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def methodSignature(msig: MethodSignature[Pattern.Anon]) = {$/;"	methods	line:51
methodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def methodSymbol(mthd: reflect.Method) = {$/;"	methods	line:170
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def methodsNamed(name: Name.Method): List[MethodSymbol] = allMethodSymbols.filter(_.isNamed(name))$/;"	methods	line:46
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def methodsNamed(mthdName: Name.Method) = {$/;"	methods	line:165
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def methodsNamed(name: Name.Method): List[MethodSymbol]$/;"	methods	line:87
minimalUpperBoundClassTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def minimalUpperBoundClassTys(ty: Type.Ref) = {$/;"	methods	line:478
minimalUpperBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def minimalUpperBoundType(ty: Type.Ref) = {$/;"	methods	line:462
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Byte l, Double r) { return l - r; }$/;"	method	line:129
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Byte r) { return l - r; }$/;"	method	line:204
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Double r) { return l - r; }$/;"	method	line:219
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Float r) { return l - r; }$/;"	method	line:216
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Integer r) { return l - r; }$/;"	method	line:210
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Long r) { return l - r; }$/;"	method	line:213
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Short r) { return l - r; }$/;"	method	line:207
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Float l, Double r) { return l - r; }$/;"	method	line:201
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Integer l, Double r) { return l - r; }$/;"	method	line:165
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Long l, Double r) { return l - r; }$/;"	method	line:183
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Short l, Double r) { return l - r; }$/;"	method	line:147
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Byte l, Float r) { return l - r; }$/;"	method	line:126
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Byte r) { return l - r; }$/;"	method	line:186
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Float r) { return l - r; }$/;"	method	line:198
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Integer r) { return l - r; }$/;"	method	line:192
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Long r) { return l - r; }$/;"	method	line:195
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Short r) { return l - r; }$/;"	method	line:189
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Integer l, Float r) { return l - r; }$/;"	method	line:162
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Long l, Float r) { return l - r; }$/;"	method	line:180
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Short l, Float r) { return l - r; }$/;"	method	line:144
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Byte r) { return l - r; }$/;"	method	line:114
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Integer r) { return l - r; }$/;"	method	line:120
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Short r) { return l - r; }$/;"	method	line:117
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Byte r) { return l - r; }$/;"	method	line:150
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Integer r) { return l - r; }$/;"	method	line:156
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Short r) { return l - r; }$/;"	method	line:153
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Byte r) { return l - r; }$/;"	method	line:132
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Integer r) { return l - r; }$/;"	method	line:138
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Short r) { return l - r; }$/;"	method	line:135
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Byte l, Long r) { return l - r; }$/;"	method	line:123
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Integer l, Long r) { return l - r; }$/;"	method	line:159
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Byte r) { return l - r; }$/;"	method	line:168
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Integer r) { return l - r; }$/;"	method	line:174
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Long r) { return l - r; }$/;"	method	line:177
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Short r) { return l - r; }$/;"	method	line:171
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Short l, Long r) { return l - r; }$/;"	method	line:141
mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val mod = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:782
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def modifiers: Modifier.Set = LoadedData.join.modifiers$/;"	methods	line:39
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val modifiers = Modifier.forMember(fld)$/;"	constants	line:72
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def modifiers = {$/;"	methods	line:139
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val modifiers = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:229
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val modifiers: Modifier.Set,$/;"	constants	line:28
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def modifiers: Modifier.Set$/;"	methods	line:10
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val modifiers: Modifier.Set,$/;"	constants	line:11
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val modifiers: Modifier.Set,$/;"	constants	line:26
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val modifiers: Modifier.Set$/;"	constants	line:43
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val mro = MethodResolutionOrder(global).forSym(csym)$/;"	constants	line:173
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = MethodResolutionOrder(global).forClassType(classTy)$/;"	constants	line:240
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = MethodResolutionOrder(global).forClassType(classTy)$/;"	constants	line:466
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val mro = MethodResolutionOrder(global).forSym(csym)$/;"	constants	line:110
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val mro = MethodResolutionOrder(global).forSym(csym)$/;"	constants	line:78
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val mro = MethodResolutionOrder(global).forSym(env.thisCsym)$/;"	constants	line:1153
mroCache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val mroCache = new mutable.HashMap[ClassSymbol, List[ClassSymbol]]()$/;"	constants	line:10
mroIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mroIndex = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1715
mroInt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mroInt = accessMap.pathToFreshSlot(asm.Type.INT_TYPE) $/;"	constants	line:2071
mroMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def mroMethodDescFromSig(msig: MethodSignature[Pattern.Anon]): String = {$/;"	methods	line:147
msg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        def msg = $/;"	methods	line:9
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val msig = path.msig$/;"	constants	line:923
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val msig = path.msig$/;"	constants	line:951
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:640
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:971
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val msig = msym.msig$/;"	constants	line:292
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:19
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:32
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val msig = {$/;"	constants	line:90
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msym = csym.constructor$/;"	constants	line:1802
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msym = csym.constructor$/;"	constants	line:2173
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val msym = new MethodSymbol($/;"	constants	line:51
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msyms = computeVersions(group, MethodResolutionOrder(global).forSym(csym), group.msyms)$/;"	constants	line:2075
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val msyms = mroCsym.allMethodSymbols$/;"	constants	line:80
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = csym.constructors$/;"	constants	line:1047
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(outRcvr.ty, mcall.name)$/;"	constants	line:1009
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(outRcvr.ty, methodName)$/;"	constants	line:451
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(ty, mcall.name)$/;"	constants	line:1024
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = global.staticMethods(className, mcall.name)$/;"	constants	line:996
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = global.staticMethods(className, methodName)$/;"	constants	line:439
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val msyms = targetCsym.constructors$/;"	constants	line:575
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def msyms = msymsBuffer.toList$/;"	methods	line:29
msymsBuffer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    private[this] val msymsBuffer = new mutable.ListBuffer[MethodSymbol]()$/;"	constants	line:26
mthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val mthdParam: PackratParser[out.Param[Unit]] = tupleMthdParam | varMthdParam$/;"	constants	line:244
mthdScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val mthdScope = resolveParam.scope$/;"	constants	line:299
mthdSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def mthdSubst(msym: MethodSymbol, rcvr: in.Rcvr, args: List[in.Expr]) = {$/;"	methods	line:291
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(data: MCallData) = data._1$/;"	methods	line:963
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:879
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:920
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def mthdSym(data: MCallData): MSym$/;"	methods	line:74
must	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ However, to fulfill the `Block` interface, the class must also $/;"	classes	line:1618
must	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^  * given class must provide equivalent arguments$/;"	classes	line:14
mutualUpperBound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def mutualUpperBound(pair: (Type.Ref, Type.Ref)): Type.Ref = {$/;"	methods	line:545
mutualUpperBoundOfList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def mutualUpperBoundOfList(tys: List[Type.Ref]): Type.Ref = {$/;"	methods	line:534
mutualUpperBoundUnmatchedTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def mutualUpperBoundUnmatchedTuple(tys: List[Type.Ref], otherTy: Type.Ref) = {$/;"	methods	line:529
mutualUpperBoundVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def mutualUpperBoundVar(varTy: Type.Member, otherTy: Type.Ref) = {$/;"	methods	line:520
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mvis = cvis.visitMethod($/;"	constants	line:1876
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1700
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1803
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1936
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1958
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:2122
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:2175
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitMethodWithMro(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:2068
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitPlainMethod(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:2013
mvisGet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val mvisGet = visitFieldAccessor(0, csym, cvis, fsym, accessorGetDesc)$/;"	constants	line:2289
mvisMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisMro = visitMethodWithMro(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1981
mvisPlain	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisPlain = visitPlainMethod(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1979
mvisSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val mvisSet = visitFieldAccessor(0, csym, cvis, fsym, accessorSetDesc)$/;"	constants	line:2296
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    throw new UsageError("No application class name provided.")$/;"	classes	line:42
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.UnloweredMember$/;"	methods	line:826
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.Var$/;"	methods	line:822
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    val name: Name.Class,$/;"	constants	line:6
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    val name: Name.Class,$/;"	constants	line:4
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^                    val name = Name.Class(cls)$/;"	constants	line:113
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val name = Name.Class(ty)$/;"	constants	line:101
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val name: Name.Class,$/;"	constants	line:11
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val name: Name.Class,$/;"	constants	line:9
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val name: Name.Class$/;"	constants	line:9
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Maps a class name to its symbol.  Only accessed under lock. *\/$/;"	classes	line:71
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val name = Name.LocalVar(tmpVarName(outExpr))$/;"	constants	line:1201
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val name = memberName.name$/;"	constants	line:768
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val name: Name.Method,           \/** Name of the method. *\/$/;"	constants	line:31
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        \/** Creates a new class name in same package but with the given suffix. *\/$/;"	classes	line:60
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val name = Name.Method(parts.map(_._1))$/;"	constants	line:174
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Member$/;"	methods	line:10
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Var$/;"	methods	line:5
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def name: Name.Member$/;"	methods	line:25
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val name: Name.LocalVar,$/;"	constants	line:27
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val name: Name.Member,$/;"	constants	line:12
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val name: N$/;"	constants	line:44
named	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Loads a class named `className`.  If it fails, reports an $/;"	classes	line:91
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ ___ Generating fresh, unique class names _____________________________$/;"	classes	line:39
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ class names.$/;"	classes	line:24
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ body: resolves members in the body to absolute class names, etc.$/;"	classes	line:37
newAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def newAccessMap(stmts: List[in.Stmt]) = {$/;"	methods	line:1814
newExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newExpr = positioned($/;"	constants	line:362
newGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def newGroup(msym: MethodSymbol) = {$/;"	methods	line:40
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type.Ref) = $/;"	methods	line:154
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type.Ref) = $/;"	methods	line:163
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type.Ref) = $/;"	methods	line:171
nextCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^            val nextCsym = queued.dequeue()$/;"	constants	line:59
nextMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val nextMro = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1888
nextSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^                    val nextSubst = fieldSyms.zip(args).foldLeft(TypedSubst.empty) { case (s, (fsym, arg)) =>$/;"	constants	line:76
nl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var nl = false$/;"	local variables	line:23
noBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noBlkParam = positioned($/;"	constants	line:331
noExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noExtendsArg = positioned($/;"	constants	line:130
noSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val noSuffix = ""$/;"	constants	line:17
normalize_whitespace	/Users/niko/git/intervals-java/Harmonic/test.py	/^def normalize_whitespace(str):$/;"	function	line:516
notAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val notAbstract = matching.filter(_.modifiers.isNotAbstract)$/;"	constants	line:2047
notArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val notArg = not(guard("(" | "{" | "{{"))$/;"	constants	line:317
notEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def notEquatable(env: Env)(pair: (Path.Typed, Path.Typed)): Boolean = debugIndent("notEquatable(%s)", pair) {$/;"	methods	line:31
notEsc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def notEsc = elem("escape", c => c != '`' && c != EofCh && c != '\\n')$/;"	methods	line:30
notLegal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def notLegal(c: Char) = !Character.isJavaIdentifierPart(c)$/;"	methods	line:50
numericTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val numericTypes = integralTypes ++ floatTypes$/;"	constants	line:23
objectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectClass = classOf[java.lang.Object]$/;"	constants	line:77
objectTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectTy = Type.Class(objectClass)$/;"	constants	line:89
of	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Symbols which are accessed from an inner class of some kind: $/;"	classes	line:628
op	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val op = {$/;"	constants	line:171
oper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val oper = ($/;"	constants	line:69
operCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operCont = elem("operCont", isOperCont)$/;"	methods	line:37
operPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val operPart = oper~expr0 ^^ { case o~r => (o, r) }$/;"	constants	line:391
operStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operStart = elem("operStart", isOperStart)            $/;"	methods	line:36
optAppClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        var optAppClassName: Option[String] = None$/;"	local variables	line:24
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val optBody = mdecl.optBody.map(lowerBody(env, _))$/;"	constants	line:103
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optBody = ($/;"	constants	line:215
optClassTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optClassTupleParam = positioned($/;"	constants	line:149
optExpTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTys = msym.msig.parameterPatterns.map(p => Some(subst.ty(p.ty)))$/;"	constants	line:968
optFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] var optFieldSymbol: Option[VarSymbol.Field] = None$/;"	local variables	line:126
optMthdSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] var optMthdSymbol: Option[MethodSymbol] = None$/;"	local variables	line:40
optRes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optRes = mcall.rcvr match {$/;"	constants	line:994
optSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def optSubst(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]) = {$/;"	methods	line:81
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optTy = env.upperBoundVars(expTy).firstSome {$/;"	constants	line:204
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optTy = mro.firstSome { $/;"	constants	line:1154
optTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeArg(TypeVarName: Name.Var, optExpTy: Option[Type.Ref]) = optExpTy match {$/;"	methods	line:1098
optTypeFromLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeFromLocal(env: Env, lvalue0: in.Lvalue): Option[Type.Ref] = {$/;"	methods	line:730
optTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optTypeRef: PackratParser[out.OTR] = reqTypeRef | infTypeRef$/;"	constants	line:273
optl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def optl[A](p: PackratParser[List[A]]) = opt(p) ^^ { _.getOrElse(List()) }$/;"	methods	line:67
or	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^      * whether they are defined in this class or in a superclass. Populated $/;"	classes	line:195
orErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def orErr(err: => Error): CanFail[E] = option match {$/;"	methods	line:82
out	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val out = new java.io.FileOutputStream(clsFile)$/;"	constants	line:402
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outAnnotations = annotations.map(InEnv(env).lowerAnnotation)$/;"	constants	line:224
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val outAnnotations = anns.map(InEnv(outEnv).lowerAnnotation)$/;"	constants	line:781
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = annotations.map(scope.resolveAnnotation)$/;"	constants	line:174
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = varParam.annotations.map(scope.resolveAnnotation)$/;"	constants	line:106
outArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgNodes = inArgs.map(lowerPath)$/;"	constants	line:437
outArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgNodes = inArgs.map(lowerPath)$/;"	constants	line:450
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = inArgs.map(lowerToTypedPathNode(None))$/;"	constants	line:979
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = optExpTys.zip(inArgs).map { case (t,a) => lowerToTypedPathNode(t)(a) }$/;"	constants	line:969
outAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outAssign = withPosOf(inAssign,$/;"	constants	line:879
outAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outAssign = withPosOf(stmt, out.Assign(resolveLvs.outLvalues, outRvs))$/;"	constants	line:600
outBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val outBase = resolvePathToPath(base)$/;"	constants	line:434
outBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outBase = resolvePathToPath(base)$/;"	constants	line:542
outBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outBody = scopeWithInline.resolveBody(body)$/;"	constants	line:612
outDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val outDecl = memberDecl.asInstanceOf[out.FieldDecl]$/;"	constants	line:171
outDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val outDecl = memberDecl.asInstanceOf[out.MethodDecl]$/;"	constants	line:100
outEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            var outEnv = env$/;"	local variables	line:763
outExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outExprs = new mutable.ListBuffer[out.Expr]()$/;"	constants	line:765
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outLvalues = new mutable.ListBuffer[out.ElemLvalue]()$/;"	constants	line:764
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outLvalues = lvalues.map(resolveLvalue)$/;"	constants	line:157
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outLvalues = inLvalues.map(resolveLvalue)$/;"	constants	line:231
outMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] val outMemberDecl = new GuardedBy[out.MemberDecl](inter)$/;"	constants	line:23
outMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def outMethodCall(r: out.Rcvr, cps: List[(String, out.Expr)]) = {$/;"	methods	line:357
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:122
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:151
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = params.map(lowerParam(Type.Top, _))$/;"	constants	line:216
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:211
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:198
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outParams = tupleParam.params.map(resolveParam)$/;"	constants	line:101
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outParams = inParams.map(resolveParam)$/;"	constants	line:117
outRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRcvr = lowerToTypedPath(None)(inRcvr)$/;"	constants	line:1008
outRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRcvr = typedPathForPath(inRcvr)$/;"	constants	line:449
outReturnTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                    val outReturnTref = Lower(global).InEnv(env).lowerTypeRef(inReturnTref)$/;"	constants	line:81
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerExpr(Some(fsym.ty))(rv)$/;"	constants	line:871
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerExpr(Some(sym.ty))(rv)$/;"	constants	line:865
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerExpr(Some(ty))(rv)$/;"	constants	line:854
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerExpr(expTy)(rv)$/;"	constants	line:848
outRvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRvs = sublvs.indices.map { idx =>$/;"	constants	line:811
outRvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outRvs = rvs.map(resolveExpr)$/;"	constants	line:598
outStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmt = withPosOf(stmt, out.InlineInterval(name, outBody, ()))$/;"	constants	line:613
outStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmt = withPosOf(stmt, out.MethodReturn(resolveExpr(expr)))$/;"	constants	line:606
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts = optTypeArg(Name.BlockR, optExpTy) match {$/;"	constants	line:1115
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmts = resolveLvs.scope.resolveStmts(stmts)$/;"	constants	line:601
outStmts0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts0 = lowerStmts(subenv, tmpl.stmts)$/;"	constants	line:1112
outTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                    val outTref = Lower(global).InEnv(csym.classEnv).lowerTypeRef(inTref)$/;"	constants	line:161
outTypeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outTypeArgs = typeArgs.map(resolveTypeArg)$/;"	constants	line:555
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(tref)$/;"	constants	line:175
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(varParam.tref)$/;"	constants	line:107
outputDir	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var outputDir = new File(".")$/;"	local variables	line:16
overriddenDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val overriddenDesc = descFunc(overriddenSig)$/;"	constants	line:1695
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    \/\/ Unfortunately, if a class overrides a method with a covariant$/;"	classes	line:199
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * in the current class overrides a method with signature $/;"	classes	line:744
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def overrides($/;"	methods	line:749
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val overrides = new mutable.ListBuffer[MethodSymbol]()$/;"	constants	line:53
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val owner = receiver.ty.toAsmType.getInternalName$/;"	constants	line:956
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def owner(owner: Path.UntypedOwner): Path.UntypedOwner = owner match {$/;"	methods	line:10
ownerAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val ownerAsmTy = asm.Type.getType(ownerClass)$/;"	constants	line:962
ownerPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ownerPath = lowerToTypedPath(None)(ownerExpr)$/;"	constants	line:922
ownerTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ownerTypedPath = typedPathForPath(owner)$/;"	constants	line:413
packageDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageDecl = positioned($/;"	constants	line:105
packageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageName = positioned($/;"	constants	line:91
param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val param = new ResolveBlockParam(this, tmpl.param)$/;"	constants	line:688
paramAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramAsmTys = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:2174
paramPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramPaths = paramAsmTys.map(accessMap.pathToFreshSlot)$/;"	constants	line:2186
paramPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def paramPattern(pair: (reflect.Type, Int)) = {$/;"	methods	line:142
parameter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Lowered version of class parameter *\/$/;"	classes	line:145
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val parameterPatterns: List[P]        $/;"	constants	line:5
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^        val parameterPatterns = name.parts.zipWithIndex.map { case (_, i) => $/;"	constants	line:9
parameterTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val parameterTys = msym.msig.parameterPatterns.map(p => subst.ty(p.ty))$/;"	constants	line:607
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - Param for method and class parameters$/;"	classes	line:334
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Store class parameters and parameters for all superclasses:$/;"	classes	line:2199
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val params = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:157
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val params = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:164
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val params = parts.map(_._2)$/;"	constants	line:175
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        \/\/ types.  They are permitted to reference other class params, but$/;"	classes	line:31
parseArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        private[this] def parseArgs(args: Array[String]) {$/;"	methods	line:27
parser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val parser = new Parse()$/;"	constants	line:436
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val path = accessMap.syms(lv.sym)$/;"	constants	line:1116
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val path = accessMap.syms(lv.sym)$/;"	constants	line:1123
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val path = pathToFreshSlot(sym.ty.toAsmType)$/;"	constants	line:575
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^                val path = env.lookupThis.toTypedPath \/ sym$/;"	constants	line:128
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val path = lowerToTypedPathNode(None)(rv)$/;"	constants	line:859
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val path = typedPathForExpr(rv)$/;"	constants	line:810
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val path = lowerToTypedPathNode(None)(expr)$/;"	constants	line:712
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val path = expr match {$/;"	constants	line:275
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val path = positioned($/;"	constants	line:311
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def path(p: Path.Ref): Path.Ref = (map.get(p), p) match {$/;"	methods	line:15
pathArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val pathArgs = args.map(resolvePathToPath)$/;"	constants	line:443
pathAsExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathAsExpr = positioned($/;"	constants	line:319
pathExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathExtendsArg = positioned($/;"	constants	line:126
pathForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def pathForPath(path: in.PathNode): Path.Ref = {$/;"	methods	line:462
pathHasType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathHasType(path: Path.Typed, ty: Type.Ref): Boolean = {$/;"	methods	line:811
pathIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathIsFinalBy(path: Path.Typed, inter: Path.Typed): Boolean = {$/;"	methods	line:840
pathToFreshSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pathToFreshSlot(asmTy: asm.Type) = {$/;"	methods	line:564
pathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathType = positioned($/;"	constants	line:287
pathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathTypeArg = positioned($/;"	constants	line:301
paths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val paths = args.map(n => lowerExtendsArg(n).path)$/;"	constants	line:554
paths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val paths = optExpTy match {$/;"	constants	line:1085
pathsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathsAreEquatable(path1: Path.Ref, path2: Path.Ref) = equatable(path1) contains path2$/;"	methods	line:379
pathsAreRelatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathsAreRelatable(rel: PcRel)(path1: Path.Ref, path2: Path.Ref): Boolean = {$/;"	methods	line:383
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(P1: Path.Ref, Rel: PcRel): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:102
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel): List[(Path.Ref, Path.Ref)] = pathRels.flatMap { $/;"	methods	line:92
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel, P2: Path.Ref): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:97
pats	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val pats = msym.msig.parameterPatterns$/;"	constants	line:568
pattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def pattern(p: Pattern.Anon): Pattern.Anon = p match {$/;"	methods	line:34
patterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def patterns: List[Pattern.Anon]$/;"	methods	line:27
pcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pcRel = ($/;"	constants	line:191
plainMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def plainMethodDescFromSig(msig: MethodSignature[Pattern.Anon]): String = {$/;"	methods	line:140
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Byte l, Double r) { return l + r; }$/;"	method	line:21
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Byte r) { return l + r; }$/;"	method	line:96
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Double r) { return l + r; }$/;"	method	line:111
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Float r) { return l + r; }$/;"	method	line:108
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Integer r) { return l + r; }$/;"	method	line:102
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Long r) { return l + r; }$/;"	method	line:105
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Short r) { return l + r; }$/;"	method	line:99
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Float l, Double r) { return l + r; }$/;"	method	line:93
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Integer l, Double r) { return l + r; }$/;"	method	line:57
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Long l, Double r) { return l + r; }$/;"	method	line:75
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Short l, Double r) { return l + r; }$/;"	method	line:39
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Byte l, Float r) { return l + r; }$/;"	method	line:18
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Byte r) { return l + r; }$/;"	method	line:78
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Float r) { return l + r; }$/;"	method	line:90
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Integer r) { return l + r; }$/;"	method	line:84
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Long r) { return l + r; }$/;"	method	line:87
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Short r) { return l + r; }$/;"	method	line:81
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Integer l, Float r) { return l + r; }$/;"	method	line:54
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Long l, Float r) { return l + r; }$/;"	method	line:72
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Short l, Float r) { return l + r; }$/;"	method	line:36
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Byte r) { return l + r; }$/;"	method	line:6
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Integer r) { return l + r; }$/;"	method	line:12
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Short r) { return l + r; }$/;"	method	line:9
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Byte r) { return l + r; }$/;"	method	line:42
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Integer r) { return l + r; }$/;"	method	line:48
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Short r) { return l + r; }$/;"	method	line:45
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Byte r) { return l + r; }$/;"	method	line:24
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Integer r) { return l + r; }$/;"	method	line:30
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Short r) { return l + r; }$/;"	method	line:27
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Byte l, Long r) { return l + r; }$/;"	method	line:15
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Integer l, Long r) { return l + r; }$/;"	method	line:51
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Byte r) { return l + r; }$/;"	method	line:60
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Integer r) { return l + r; }$/;"	method	line:66
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Long r) { return l + r; }$/;"	method	line:69
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Short r) { return l + r; }$/;"	method	line:63
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Short l, Long r) { return l + r; }$/;"	method	line:33
plusField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def plusField(p: Pair[(VarSymbol.Local, VarSymbol.Field), Path.Typed]) = {$/;"	methods	line:17
plusLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusLocalVar(sym: VarSymbol.Local) = copy(locals = locals + (sym.name -> sym))$/;"	methods	line:74
plusLocalVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusLocalVars(syms: Iterable[VarSymbol.Local]) = syms.foldLeft(this)(_ plusLocalVar _)$/;"	methods	line:76
plusPathRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRel(rel: (Path.Ref, PcRel, Path.Ref)) = copy(pathRels = rel :: pathRels)$/;"	methods	line:80
plusPathRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRels(rels: List[(Path.Ref, PcRel, Path.Ref)]) = rels.foldLeft(this)(_ plusPathRel _)$/;"	methods	line:82
plusThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusThis(thisTy: Type.Class, sym: VarSymbol.Local) = plusLocalVar(sym).copy(thisTy = thisTy)$/;"	methods	line:78
plusTypeRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRel(rel: (Type.Member, TcRel, Type.Ref)) = copy(typeRels = rel :: typeRels)$/;"	methods	line:84
plusTypeRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRels(rels: List[(Type.Member, TcRel, Type.Ref)]) = rels.foldLeft(this)(_ plusTypeRel _)$/;"	methods	line:86
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def pos = InterPosition.forClassNamed(name)$/;"	methods	line:12
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def pos = parseCdecl.pos$/;"	methods	line:16
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def pos: Position$/;"	methods	line:35
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val pos: Position,$/;"	constants	line:27
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def pos = new OffsetPosition(source, offset) with InterPosition {$/;"	methods	line:428
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def pos: Position$/;"	methods	line:9
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val pos: Position,$/;"	constants	line:10
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val pos: Position,$/;"	constants	line:25
posString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def posString(pos: Position) = {$/;"	methods	line:24
potentiallyApplicable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def potentiallyApplicable(msym: MethodSymbol) = {$/;"	methods	line:605
pps_sub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sub = msig_sub.parameterPatterns$/;"	constants	line:753
pps_sup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sup = msig_sup.parameterPatterns$/;"	constants	line:754
preExecStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def preExecStatement(stmt: in.Stmt) {$/;"	methods	line:1067
preferNew	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def preferNew($/;"	methods	line:219
prevGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val prevGroups = groups.get(msym.name).getOrElse(Nil)$/;"	constants	line:56
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def print(out: PrettyPrinter) {$/;"	methods	line:782
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:131
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:174
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:202
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:223
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:242
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:260
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:277
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:291
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:309
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:351
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:380
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:410
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:424
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:435
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:507
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:579
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:610
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:633
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:649
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:669
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:684
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:710
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:728
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:757
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:768
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def print(out: PrintStream) = this.synchronized {$/;"	methods	line:31
printOptBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printOptBody(out: PrettyPrinter, optBody: Option[Body]) = optBody match {$/;"	methods	line:188
printSep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSep(out: PrettyPrinter, asts: List[Node], sep: String) {$/;"	methods	line:85
printSepFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSepFunc(out: PrettyPrinter, asts: List[Node], sepfunc: (() => Unit)) {$/;"	methods	line:77
printc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printc(out: PrettyPrinter) {$/;"	methods	line:796
printdot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printdot(out: PrettyPrinter) {$/;"	methods	line:791
println	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def println(out: PrettyPrinter) {$/;"	methods	line:801
printsemiln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsemiln(out: PrettyPrinter) {$/;"	methods	line:587
printsp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsp(out: PrettyPrinter) {$/;"	methods	line:786
privateData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val privateData = new mutable.HashMap[java.lang.Class[_], Any]()$/;"	constants	line:41
processOper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        protected def processOper(name: String) = {$/;"	methods	line:46
prop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val prop = "get%c%s".format(text.charAt(0).toUpper, text.substring(1))$/;"	constants	line:199
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeBoxAndUnbox$Harmonic$Impl implements test\/bytecode\/BytecodeBoxAndUnbox  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeBoxAndUnbox$Harmonic$Static implements test\/bytecode\/BytecodeBoxAndUnbox  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeBoxAndUnbox.s	/^public abstract interface test\/bytecode\/BytecodeBoxAndUnbox implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeCtorParams$Harmonic$Impl implements test\/bytecode\/BytecodeCtorParams  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeCtorParams$Harmonic$Static implements test\/bytecode\/BytecodeCtorParams  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams.s	/^public abstract interface test\/bytecode\/BytecodeCtorParams implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeCtorParams1$Harmonic$Impl implements test\/bytecode\/BytecodeCtorParams1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeCtorParams1$Harmonic$Static implements test\/bytecode\/BytecodeCtorParams1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams1.s	/^public abstract interface test\/bytecode\/BytecodeCtorParams1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeCtorParams2$Harmonic$Impl implements test\/bytecode\/BytecodeCtorParams2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeCtorParams2$Harmonic$Static implements test\/bytecode\/BytecodeCtorParams2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeCtorParams2.s	/^public abstract interface test\/bytecode\/BytecodeCtorParams2 implements test\/bytecode\/BytecodeCtorParams1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeFields$Harmonic$Impl implements test\/bytecode\/BytecodeFields  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeFields$Harmonic$Static implements test\/bytecode\/BytecodeFields  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeFields.s	/^public abstract interface test\/bytecode\/BytecodeFields implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$7$22.s	/^public class test\/bytecode\/BytecodeForEach$7$22 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeForEach$Harmonic$Impl implements test\/bytecode\/BytecodeForEach  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeForEach$Harmonic$Static implements test\/bytecode\/BytecodeForEach  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeForEach.s	/^public abstract interface test\/bytecode\/BytecodeForEach implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeHelloWorld$Harmonic$Impl implements test\/bytecode\/BytecodeHelloWorld  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeHelloWorld$Harmonic$Static implements test\/bytecode\/BytecodeHelloWorld  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeHelloWorld.s	/^public abstract interface test\/bytecode\/BytecodeHelloWorld implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$12$18.s	/^public class test\/bytecode\/BytecodeIf$12$18 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$16$17.s	/^public class test\/bytecode\/BytecodeIf$16$17 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$18$16.s	/^public class test\/bytecode\/BytecodeIf$18$16 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$22$18.s	/^public class test\/bytecode\/BytecodeIf$22$18 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$24$16.s	/^public class test\/bytecode\/BytecodeIf$24$16 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$8$17.s	/^public class test\/bytecode\/BytecodeIf$8$17 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeIf$Harmonic$Impl implements test\/bytecode\/BytecodeIf  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeIf$Harmonic$Static implements test\/bytecode\/BytecodeIf  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIf.s	/^public abstract interface test\/bytecode\/BytecodeIf implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeInitFields$Harmonic$Impl implements test\/bytecode\/BytecodeInitFields  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeInitFields$Harmonic$Static implements test\/bytecode\/BytecodeInitFields  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInitFields.s	/^public abstract interface test\/bytecode\/BytecodeInitFields implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$9$9.s	/^public class test\/bytecode\/BytecodeInline$9$9 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeInline$Harmonic$Impl implements test\/bytecode\/BytecodeInline  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeInline$Harmonic$Static implements test\/bytecode\/BytecodeInline  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeInline.s	/^public abstract interface test\/bytecode\/BytecodeInline implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeIntervals$Harmonic$Impl implements test\/bytecode\/BytecodeIntervals  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeIntervals$Harmonic$Static implements test\/bytecode\/BytecodeIntervals  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals.s	/^public abstract interface test\/bytecode\/BytecodeIntervals implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$5$5.s	/^public class test\/bytecode\/BytecodeIntervals1$5$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$9$5.s	/^public class test\/bytecode\/BytecodeIntervals1$9$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeIntervals1$Harmonic$Impl implements test\/bytecode\/BytecodeIntervals1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeIntervals1$Harmonic$Static implements test\/bytecode\/BytecodeIntervals1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeIntervals1.s	/^public abstract interface test\/bytecode\/BytecodeIntervals1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeNullInsert$Harmonic$Impl implements test\/bytecode\/BytecodeNullInsert  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeNullInsert$Harmonic$Static implements test\/bytecode\/BytecodeNullInsert  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeNullInsert.s	/^public abstract interface test\/bytecode\/BytecodeNullInsert implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$10$22.s	/^public class test\/bytecode\/BytecodeReturn$10$22 implements harmonic\/lang\/Block  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeReturn$Harmonic$Impl implements test\/bytecode\/BytecodeReturn  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeReturn$Harmonic$Static implements test\/bytecode\/BytecodeReturn  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeReturn.s	/^public abstract interface test\/bytecode\/BytecodeReturn implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSchedule$Harmonic$Impl implements test\/bytecode\/BytecodeSchedule  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSchedule$Harmonic$Static implements test\/bytecode\/BytecodeSchedule  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule.s	/^public abstract interface test\/bytecode\/BytecodeSchedule implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$9$5.s	/^public class test\/bytecode\/BytecodeSchedule1$9$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSchedule1$Harmonic$Impl implements test\/bytecode\/BytecodeSchedule1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSchedule1$Harmonic$Static implements test\/bytecode\/BytecodeSchedule1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule1.s	/^public abstract interface test\/bytecode\/BytecodeSchedule1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$22$5.s	/^public class test\/bytecode\/BytecodeSchedule2$22$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSchedule2$Harmonic$Impl implements test\/bytecode\/BytecodeSchedule2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSchedule2$Harmonic$Static implements test\/bytecode\/BytecodeSchedule2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSchedule2.s	/^public abstract interface test\/bytecode\/BytecodeSchedule2 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSeven$Harmonic$Impl implements test\/bytecode\/BytecodeSeven  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSeven$Harmonic$Static implements test\/bytecode\/BytecodeSeven  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSeven.s	/^public abstract interface test\/bytecode\/BytecodeSeven implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuper$Harmonic$Impl implements test\/bytecode\/BytecodeSuper  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper$Harmonic$Static implements test\/bytecode\/BytecodeSuper  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper.s	/^public abstract interface test\/bytecode\/BytecodeSuper implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper0$Harmonic$Static implements test\/bytecode\/BytecodeSuper0  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper0.s	/^public abstract interface test\/bytecode\/BytecodeSuper0 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuper3$Harmonic$Impl implements test\/bytecode\/BytecodeSuper3  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper3$Harmonic$Static implements test\/bytecode\/BytecodeSuper3  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper3.s	/^public abstract interface test\/bytecode\/BytecodeSuper3 implements test\/bytecode\/BytecodeSuper0  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuper4$Harmonic$Impl implements test\/bytecode\/BytecodeSuper4  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper4$Harmonic$Static implements test\/bytecode\/BytecodeSuper4  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper4.s	/^public abstract interface test\/bytecode\/BytecodeSuper4 implements test\/bytecode\/BytecodeSuperAdd1 test\/bytecode\/BytecodeSuper3  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuper5$Harmonic$Impl implements test\/bytecode\/BytecodeSuper5  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper5$Harmonic$Static implements test\/bytecode\/BytecodeSuper5  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper5.s	/^public abstract interface test\/bytecode\/BytecodeSuper5 implements test\/bytecode\/BytecodeSuper0  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuper6$Harmonic$Impl implements test\/bytecode\/BytecodeSuper6  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuper6$Harmonic$Static implements test\/bytecode\/BytecodeSuper6  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuper6.s	/^public abstract interface test\/bytecode\/BytecodeSuper6 implements test\/bytecode\/BytecodeSuperAdd1 test\/bytecode\/BytecodeSuper5  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeSuperAdd1$Harmonic$Impl implements test\/bytecode\/BytecodeSuperAdd1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeSuperAdd1$Harmonic$Static implements test\/bytecode\/BytecodeSuperAdd1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeSuperAdd1.s	/^public abstract interface test\/bytecode\/BytecodeSuperAdd1 implements test\/bytecode\/BytecodeSuper0  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeUnschedule$Harmonic$Impl implements test\/bytecode\/BytecodeUnschedule  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeUnschedule$Harmonic$Static implements test\/bytecode\/BytecodeUnschedule  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule.s	/^public abstract interface test\/bytecode\/BytecodeUnschedule implements harmonic\/lang\/Application  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$9$5.s	/^public class test\/bytecode\/BytecodeUnschedule1$9$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeUnschedule1$Harmonic$Impl implements test\/bytecode\/BytecodeUnschedule1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeUnschedule1$Harmonic$Static implements test\/bytecode\/BytecodeUnschedule1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule1.s	/^public abstract interface test\/bytecode\/BytecodeUnschedule1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$22$5.s	/^public class test\/bytecode\/BytecodeUnschedule2$22$5 extends harmonic\/runtime\/HarmonicTask  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Impl.s	/^public class test\/bytecode\/BytecodeUnschedule2$Harmonic$Impl implements test\/bytecode\/BytecodeUnschedule2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2$Harmonic$Static.s	/^public class test\/bytecode\/BytecodeUnschedule2$Harmonic$Static implements test\/bytecode\/BytecodeUnschedule2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/bytecode/BytecodeUnschedule2.s	/^public abstract interface test\/bytecode\/BytecodeUnschedule2 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Impl.s	/^public class test\/gather\/GatherDiamondA$Harmonic$Impl implements test\/gather\/GatherDiamondA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA$Harmonic$Static.s	/^public class test\/gather\/GatherDiamondA$Harmonic$Static implements test\/gather\/GatherDiamondA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondA.s	/^public abstract interface test\/gather\/GatherDiamondA {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Impl.s	/^public class test\/gather\/GatherDiamondB$Harmonic$Impl implements test\/gather\/GatherDiamondB  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB$Harmonic$Static.s	/^public class test\/gather\/GatherDiamondB$Harmonic$Static implements test\/gather\/GatherDiamondB  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondB.s	/^public abstract interface test\/gather\/GatherDiamondB implements test\/gather\/GatherDiamondA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Impl.s	/^public class test\/gather\/GatherDiamondC$Harmonic$Impl implements test\/gather\/GatherDiamondC  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC$Harmonic$Static.s	/^public class test\/gather\/GatherDiamondC$Harmonic$Static implements test\/gather\/GatherDiamondC  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondC.s	/^public abstract interface test\/gather\/GatherDiamondC implements test\/gather\/GatherDiamondA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Impl.s	/^public class test\/gather\/GatherDiamondD$Harmonic$Impl implements test\/gather\/GatherDiamondD  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD$Harmonic$Static.s	/^public class test\/gather\/GatherDiamondD$Harmonic$Static implements test\/gather\/GatherDiamondD  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherDiamondD.s	/^public abstract interface test\/gather\/GatherDiamondD implements test\/gather\/GatherDiamondB test\/gather\/GatherDiamondC  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Impl.s	/^public class test\/gather\/GatherExtends1$Harmonic$Impl implements test\/gather\/GatherExtends1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1$Harmonic$Static.s	/^public class test\/gather\/GatherExtends1$Harmonic$Static implements test\/gather\/GatherExtends1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherExtends1.s	/^public abstract interface test\/gather\/GatherExtends1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Impl.s	/^public class test\/gather\/GatherTriangleA$Harmonic$Impl implements test\/gather\/GatherTriangleA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA$Harmonic$Static.s	/^public class test\/gather\/GatherTriangleA$Harmonic$Static implements test\/gather\/GatherTriangleA  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/gather/GatherTriangleA.s	/^public abstract interface test\/gather\/GatherTriangleA {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Impl.s	/^public class test\/lower\/LowerIntrinsicMath$Harmonic$Impl implements test\/lower\/LowerIntrinsicMath  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath$Harmonic$Static.s	/^public class test\/lower\/LowerIntrinsicMath$Harmonic$Static implements test\/lower\/LowerIntrinsicMath  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerIntrinsicMath.s	/^public abstract interface test\/lower\/LowerIntrinsicMath {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Impl.s	/^public class test\/lower\/LowerOverloading$Harmonic$Impl implements test\/lower\/LowerOverloading  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading$Harmonic$Static.s	/^public class test\/lower\/LowerOverloading$Harmonic$Static implements test\/lower\/LowerOverloading  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/lower/LowerOverloading.s	/^public abstract interface test\/lower\/LowerOverloading {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Impl.s	/^public class test\/resolve\/ResolveLazyLoad1$Harmonic$Impl implements test\/resolve\/ResolveLazyLoad1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1$Harmonic$Static.s	/^public class test\/resolve\/ResolveLazyLoad1$Harmonic$Static implements test\/resolve\/ResolveLazyLoad1  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad1.s	/^public abstract interface test\/resolve\/ResolveLazyLoad1 {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Impl.s	/^public class test\/resolve\/ResolveLazyLoad2$Harmonic$Impl implements test\/resolve\/ResolveLazyLoad2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2$Harmonic$Static.s	/^public class test\/resolve\/ResolveLazyLoad2$Harmonic$Static implements test\/resolve\/ResolveLazyLoad2  {$/;"	label	line:4
public	/Users/niko/git/intervals-java/Harmonic/bin-test/test/resolve/ResolveLazyLoad2.s	/^public abstract interface test\/resolve\/ResolveLazyLoad2 {$/;"	label	line:4
purgeNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val purgeNames = Set(mro.tail.map(_.name): _*)$/;"	constants	line:467
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:432
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:452
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:474
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:499
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:529
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor): Unit$/;"	methods	line:424
pushAnonymousBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAnonymousBlock($/;"	methods	line:1521
pushAsyncInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAsyncInterval($/;"	methods	line:1490
pushConvertingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def pushConvertingTo(asmTypes: Array[asm.Type]) {$/;"	methods	line:797
pushExprValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValue(expr: in.Expr) {$/;"	methods	line:1017
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toAsmTy: asm.Type, expr: in.Expr) {$/;"	methods	line:1003
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toTy: Type.Ref, expr: in.Expr) {$/;"	methods	line:1008
pushIntegerConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushIntegerConstant(value: Int) = value match {$/;"	methods	line:205
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:456
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:479
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:506
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:539
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:439
pushMethodArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushMethodArgs($/;"	methods	line:784
pushPathRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathRvalues(lvalue: Pattern.Anon, rvalue: Path.Typed, asmTypes: List[asm.Type]): List[asm.Type] = {$/;"	methods	line:736
pushPathValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValue(path: Path.Typed) {$/;"	methods	line:833
pushPathValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValueDowncastingTo(toAsmTy: asm.Type, path: Path.Typed) {$/;"	methods	line:828
pushPathValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValueDowncastingTo(toTy: Type.Ref, path: Path.Typed) {$/;"	methods	line:824
pushResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1157
pushStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def pushStatement(stmt: in.Stmt) {$/;"	methods	line:1144
pushSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushSym(sym: VarSymbol.Any, mvis: asm.MethodVisitor) = syms(sym).push(mvis)$/;"	methods	line:588
quals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val quals = resolveRelList(names)$/;"	constants	line:346
queue2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val queue2 = $/;"	constants	line:59
queued	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^        val queued = new mutable.Queue[ClassSymbol]()$/;"	constants	line:55
rawData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^            val rawData = loadData$/;"	constants	line:62
rawSuperClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        val rawSuperClassNames = cdecl.extendsDecls.map { case in.ExtendsDecl(relName, _, ()) =>$/;"	constants	line:58
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rcvr = asm.Type.getObjectType(msym.clsName.internalName)$/;"	constants	line:156
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rcvr = asm.Type.getObjectType(msym.clsName.internalName)$/;"	constants	line:163
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val rcvr = in.varExpr(tvar)$/;"	constants	line:1049
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val rcvr: PackratParser[out.Rcvr] = positioned($/;"	constants	line:368
reader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val reader = new FileReader(interFile, PagedSeq.fromReader(javaReader), 0)$/;"	constants	line:438
reassignLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reassignLvalue = positioned($/;"	constants	line:258
redirect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def redirect(optName: Option[Name.Var], accessPath: AccessPath): AccessPath = {$/;"	methods	line:1233
redirectedAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val redirectedAccessPath = redirect(Some(sym.name), accessPath)$/;"	constants	line:1281
reflClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val reflClasses = config.reflectiveClasses(className)$/;"	constants	line:157
reflectiveClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def reflectiveClasses(name: Name.Qual) = {$/;"	methods	line:65
relBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relBase = positioned(varIdent ^^ out.RelBase)$/;"	constants	line:78
relDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDecl = positioned($/;"	constants	line:231
relDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDot = positioned($/;"	constants	line:80
relName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relName = relDot | relBase$/;"	constants	line:85
relNameToRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def relNameToRelList(relName: in.RelName): List[String] = relName match {$/;"	methods	line:120
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val relPath = className.relPath + suffix + ext$/;"	constants	line:353
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def relPath: String = internalName$/;"	methods	line:52
relativeFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def relativeFiles(paths: List[File], ext: String)(name: Name.Class) = {$/;"	methods	line:53
remEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val remEntries = otherEntries.filterNot { entry =>$/;"	constants	line:123
remaining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val remaining = msyms.drop(matching.length)$/;"	constants	line:2046
remove	/Users/niko/git/intervals-java/Harmonic/test.py	/^def remove(filenm):$/;"	function	line:472
removeIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def removeIndent { indent -= 2}$/;"	methods	line:104
remove_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def remove_all(self):$/;"	member	line:459
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:103
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:119
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:133
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:144
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:153
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:162
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:17
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:171
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:180
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:189
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:198
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:207
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:216
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:225
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:23
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:231
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:237
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:243
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:249
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:257
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:266
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:275
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:31
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:41
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:46
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:57
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:73
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(global: Global, pos: Position) {$/;"	methods	line:88
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    def report(global: Global, pos: Position): Unit$/;"	methods	line:11
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def report(pos: Position, msgKey: String, msgArgs: String*) = synchronized {$/;"	methods	line:18
reported	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val reported = new mutable.HashSet[(MethodSymbol, MethodSymbol)]()$/;"	constants	line:134
reporter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val reporter: Reporter$/;"	constants	line:11
representing	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Creates a new class representing the statements$/;"	classes	line:1516
reqTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reqTypeRef = ":"~>typeRef$/;"	constants	line:279
requireLoadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def requireLoadedOrLoadable(pos: Position, className: Name.Class) = synchronized {$/;"	methods	line:93
requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val requirement = positioned($/;"	constants	line:182
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    val res = app.main(ctx)$/;"	constants	line:76
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val res = func(stashSlot)$/;"	constants	line:583
resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val resolve = new ResolveClassParams(csym.name, emptyScope, cdecl.pattern)$/;"	constants	line:34
resolveAbsToQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveAbsToQual(relName: in.RelName): Option[Name.Qual] = {$/;"	methods	line:52
resolveAgainst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainst(ctxName: Name.Qual, nm: String) = {$/;"	methods	line:40
resolveAgainstClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstClass(clsName: Name.Class, nm: String): Option[Name.Class] = {$/;"	methods	line:31
resolveAgainstPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstPackage(pkgName: Name.Package, nm: String): Name.Qual = {$/;"	methods	line:22
resolveAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveAnnotation(ann: in.Annotation) = withPosOf(ann, $/;"	methods	line:275
resolveBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBlock(tmpl: in.Block) = withPosOf(tmpl, {$/;"	methods	line:687
resolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBody(body: in.Body) = withPosOf(body, $/;"	methods	line:698
resolveClassBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveClassBody(csym: ClassFromSource, cdecl: in.ClassDecl) = {$/;"	methods	line:27
resolveClassHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^    def resolveClassHeader($/;"	methods	line:51
resolveDeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveDeclareVarLvalue($/;"	methods	line:168
resolveDottedMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveDottedMemberName(relDot: in.RelDot) = withPosOf(relDot, {$/;"	methods	line:234
resolveExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExpr(expr: in.Expr): out.Expr = withPosOf(expr, expr match {$/;"	methods	line:663
resolveExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExtendsArg(arg: in.ExtendsArg): out.ExtendsArg = withPosOf(arg, {$/;"	methods	line:266
resolveExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExtendsDecl(extendsDecl: in.ExtendsDecl) = withPosOf(extendsDecl, {$/;"	methods	line:258
resolveField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveField(expr: in.Field) = withPosOf(expr, {$/;"	methods	line:642
resolveFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldDecl(className: Name.Class, decl: in.FieldDecl) = withPosOf(decl, {$/;"	methods	line:318
resolveFieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldLvalue($/;"	methods	line:224
resolveImport	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveImport(imp: in.ImportDecl) = {        $/;"	methods	line:64
resolveIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveIntervalDecl(className: Name.Class, decl: in.IntervalDecl) = withPosOf(decl, {$/;"	methods	line:288
resolveLiteral	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLiteral(expr: in.Literal) = {$/;"	methods	line:678
resolveLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLvalue(lvalue: in.Lvalue): out.Lvalue = withPosOf(lvalue, lvalue match {$/;"	methods	line:155
resolveLvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val resolveLvs = new ResolveLvalues(this, lvs)$/;"	constants	line:599
resolveMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMember(className: Name.Class, mem: in.MemberDecl): out.MemberDecl = withPosOf(mem, {$/;"	methods	line:279
resolveMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveMemberName(relName: in.RelName) = withPosOf(relName, {$/;"	methods	line:240
resolveMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodCall(expr: in.MethodCall) = {$/;"	methods	line:654
resolveMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodDecl(decl: in.MethodDecl) = withPosOf(decl, {$/;"	methods	line:297
resolveName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveName(relName: in.RelName): Ast.ClassName = withPosOf(relName, {$/;"	methods	line:125
resolveNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveNewCtor(expr: in.NewCtor): out.NewCtor = withPosOf(expr, {$/;"	methods	line:618
resolveOptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOptionalTypeRef(otref: in.OptionalParseTypeRef): out.OptionalResolveTypeRef = {$/;"	methods	line:502
resolveOverloading	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def resolveOverloading($/;"	methods	line:597
resolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOwner(owner: in.Owner): out.Owner = withPosOf(owner, {$/;"	methods	line:627
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val resolveParam = new ResolveMethodParams(this, decl.params)$/;"	constants	line:298
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveParam(param: in.Param[Unit]): out.Param[Unit] = withPosOf(param, param match {$/;"	methods	line:95
resolvePathToAny	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToAny(path: in.PathNode): ResolvePathResult = withPosOfRes(path, {$/;"	methods	line:360
resolvePathToClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToClassName(path: in.PathNode): Name.Class = {$/;"	methods	line:487
resolvePathToFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToFinal(path: in.PathNode): ResolvePathFinalResult = {$/;"	methods	line:461
resolvePathToPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToPath(path: in.PathNode): out.PathNode = withPosOf(path, {$/;"	methods	line:469
resolvePathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathTypeArg(targ: in.PathTypeArg): out.PathTypeArg = withPosOf(targ, {$/;"	methods	line:583
resolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRcvr(rcvr: in.Rcvr): out.Rcvr = withPosOf(rcvr, {$/;"	methods	line:647
resolveReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveReassignVarLvalue($/;"	methods	line:187
resolveRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRelDecl(decl: in.RelDecl) = withPosOf(decl, {$/;"	methods	line:327
resolveRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveRelList(relList: List[String]): List[Name.Qual] = relList match {$/;"	methods	line:89
resolveRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRequirement(requirement: in.PathRequirement) = withPosOf(requirement, {$/;"	methods	line:310
resolveStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveStmts(stmts: List[in.Stmt]): List[out.Stmt] = stmts match {$/;"	methods	line:591
resolveToClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveToClass(pos: Position, relList: List[String]): Option[Name.Class] = {$/;"	methods	line:106
resolveToClassOrObject	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveToClassOrObject(pos: Position, relList: List[String]): Name.Class = {$/;"	methods	line:115
resolveTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTuple(tuple: in.Tuple) = withPosOf(tuple, $/;"	methods	line:683
resolveTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTupleParam(tupleParam: in.TupleParam[Unit]) = withPosOf(tupleParam, {$/;"	methods	line:100
resolveTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeArg(targ: in.TypeArg): out.TypeArg = withPosOf(targ, targ match {$/;"	methods	line:572
resolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeRef(tref: in.ParseTypeRef): out.ResolveTypeRef = withPosOf(tref, tref match {$/;"	methods	line:511
resolveTypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeTypeArg(targ: in.TypeTypeArg): out.TypeTypeArg = withPosOf(targ, {$/;"	methods	line:577
resolveVarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveVarParam(varParam: in.VarParam[Unit]) = withPosOf(varParam, {$/;"	methods	line:105
resolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def resolvedSource = ResolvedSource.v$/;"	methods	line:137
rest	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def rest: FileReader =$/;"	methods	line:421
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val result = AccessField(thisAccessPath, fieldName.text, asmType)$/;"	constants	line:1261
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val result = new StringBuilder(str.length + n * 2)$/;"	constants	line:54
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        val result = new mutable.HashMap[Name.Class, (Name.Class, in.ExtendsDecl, List[Path.Typed])]()$/;"	constants	line:27
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val result = freshCounter$/;"	constants	line:193
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val result = loadedOrLoadable(className)$/;"	constants	line:94
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val result = new mutable.ListBuffer[out.Stmt]()$/;"	constants	line:678
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val result = expansions.firstSome(_.asClassName)$/;"	constants	line:108
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val result = func$/;"	constants	line:137
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val result = inter.newAsyncChild(new AbstractTask() {$/;"	constants	line:183
resultAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val resultAsmTy = asm.Type.getType(resultClass)$/;"	constants	line:932
resultAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val resultAsmTy = asm.Type.getType(resultClass)$/;"	constants	line:963
ret	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val ret = msym.msig.returnTy.toAsmType$/;"	constants	line:155
ret	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val ret = msym.msig.returnTy.toAsmType$/;"	constants	line:162
retTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val retTypes = stmts.flatMap {$/;"	constants	line:86
retainPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                def retainPair(pair: (String, SymTab.Entry)) = {$/;"	methods	line:70
returnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnClass = numericTypes(returnIndex)$/;"	constants	line:42
returnIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnIndex = ($/;"	constants	line:37
returnResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def returnResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1171
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(data: MCallData) = data._2.returnTy$/;"	methods	line:964
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:880
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:921
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def returnTy(data: MCallData): Ty$/;"	methods	line:75
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnTy = Type.Class(returnClass)$/;"	constants	line:45
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val returnTy = tmpl.returnTref match {$/;"	constants	line:1121
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val returnTy = (mdecl.returnTref, optBody) match {$/;"	constants	line:105
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val returnTy: Type.Ref,$/;"	constants	line:4
rightArgsUp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val rightArgsUp = rightArgs.filter(appliesTo(bestCsym))$/;"	constants	line:593
rightCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val rightCsym = global.csym(rightName)$/;"	constants	line:586
rightTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val rightTy = Type.Class(rightClass)$/;"	constants	line:44
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def run(inlineInterval: Interval) = $/;"	methods	line:202
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                override def run(current: Interval): Unit = func(current)$/;"	methods	line:184
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public abstract void run();$/;"	method	line:16
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public final void run(Interval current) {$/;"	method	line:19
runmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val runmvis = interwr.cvis.visitMethod($/;"	constants	line:1351
rvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rvalues = srcPatterns.map(constructPathFromPattern)$/;"	constants	line:1657
sFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sFile = fileWithExtension(".s")$/;"	constants	line:361
sameLength	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def sameLength(lst1: List[_], lst2: List[_]) = (lst1.length == lst2.length)$/;"	methods	line:40
sanityCheckGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def sanityCheckGroup($/;"	methods	line:119
scopeWithInline	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val scopeWithInline = addEntry(SymTab.LocalVar(name.name))$/;"	constants	line:611
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        private[this] def sep = if(async) ("{{", "}}") else ("{", "}")$/;"	methods	line:626
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val sep = "()[]{};@\\"\\'."$/;"	constants	line:32
set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    void set(int index, E value);$/;"	method	line:5
setHarmonicField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def setHarmonicField(fsym: VarSymbol.Field) = {$/;"	methods	line:191
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {}$/;"	methods	line:14
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {$/;"	methods	line:203
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def setMethodGroups(groups: List[MethodGroup]): Unit$/;"	methods	line:40
setPosition	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def setPosition(pos: Position) {$/;"	methods	line:320
set_compile_opts	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def set_compile_opts(self, opts):$/;"	member	line:407
signatures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        \/\/ Both of these class signatures mapped to the same Harmonic types.$/;"	classes	line:236
slot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val slot = maxSlot$/;"	constants	line:565
sorted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val sorted = errors.toList.sortWith((e1, e2) => e1.pos < e2.pos)$/;"	constants	line:32
sourceExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val sourceExt = ".harm"$/;"	constants	line:11
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def sourceFiles(name: Name.Class) = relativeFiles(sourcePaths, sourceExt)(name)$/;"	methods	line:62
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val sourceFiles = config.sourceFiles(className)$/;"	constants	line:155
sourcePaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var sourcePaths = List(new File("."))$/;"	local variables	line:13
specialize	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def specialize(self, cmd):$/;"	member	line:410
stack	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] var stack: List[ClassSymbol] = Nil$/;"	local variables	line:20
start	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val start = System.currentTimeMillis$/;"	constants	line:152
startLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val startLabel = new asm.Label()$/;"	constants	line:1364
startLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val startLabel = new asm.Label()$/;"	constants	line:1896
start_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def start_fragment(self, name):$/;"	function	line:290
stashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stashSlot = maxSlot$/;"	constants	line:581
staticMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def staticMethods(className: Name.Class, methodName: Name.Method) = {$/;"	methods	line:184
staticMroMethodDescFromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def staticMroMethodDescFromSym(msym: MethodSymbol): String = {$/;"	methods	line:161
staticPlainMethodDescFromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def staticPlainMethodDescFromSym(msym: MethodSymbol): String = {$/;"	methods	line:154
staticSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val staticSuffix = "$Harmonic$Static"$/;"	constants	line:19
stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmt: PackratParser[out.Stmt] = positioned($/;"	constants	line:398
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1829
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1840
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1849
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(verInt + 1), mvis)$/;"	constants	line:2091
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor($/;"	constants	line:1578
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor(0, accessMap, nextMro, mvis)$/;"	constants	line:1894
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1720
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:2019
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:2188
stmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmts: PackratParser[List[out.Stmt]] = ($/;"	constants	line:410
stmtsSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtsSummary = stmts.foldLeft(SymbolSummary.empty)(summarizeSymbolsInStmt)$/;"	constants	line:695
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:459
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:483
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:511
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:543
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:442
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:463
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:487
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:515
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:552
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor): Unit$/;"	methods	line:445
storeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:178
str	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val str = "%03x: ".format(data.threadId) + (" " * data.indent) + fmt.format(args: _*)$/;"	constants	line:118
strs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            val strs = name.parts.zip(args).map { case (p, a) =>$/;"	constants	line:704
subCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val subCsym = global.csym(subName)$/;"	constants	line:824
subinterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def subinterval[R]($/;"	methods	line:174
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = lvalues$/;"	methods	line:393
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = params$/;"	methods	line:369
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns: List[AstPattern[S]]$/;"	methods	line:344
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val subst = pps_sub.zip(pps_sup).foldLeft(Subst.empty)(addOverrideSubst)$/;"	constants	line:755
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = createSubst(msym) \/\/ must succeed or else would not be appl.$/;"	constants	line:639
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:967
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val subst = createSubst(msym)$/;"	constants	line:606
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^            var subst = Subst.vt(varNames -> args)$/;"	local variables	line:92
substForFlatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def substForFlatArgs(flatArgs: List[Path.Typed]) = {$/;"	methods	line:41
substFromPatExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def substFromPatExprs(pats: List[Pattern.Ref], asts: List[in.Expr]): Subst = {$/;"	methods	line:286
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(P1: Path.Ref): Iterable[Path.Ref] = {$/;"	methods	line:321
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(item: T): Iterable[T]$/;"	methods	line:69
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(ty: Type.Ref) = ty match {$/;"	methods	line:400
summarizeSymbolsInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInExpr(summary: SymbolSummary, expr: in.Expr): SymbolSummary = {$/;"	methods	line:669
summarizeSymbolsInPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInPath(summary: SymbolSummary, path: Path.Typed): SymbolSummary = {$/;"	methods	line:651
summarizeSymbolsInPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInPathNode(summary: SymbolSummary, node: in.TypedPath) = {$/;"	methods	line:665
summarizeSymbolsInStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmt(summary: SymbolSummary, stmt: in.Stmt): SymbolSummary = {$/;"	methods	line:688
summarizeSymbolsInStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmts(stmts: List[in.Stmt]) = {$/;"	methods	line:719
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1229
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1787
summaryExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryExprs = exprs.foldLeft(summary)(summarizeSymbolsInExpr)$/;"	constants	line:710
summaryTmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryTmpl = summarizeSymbolsInStmts(tmpl.stmts)$/;"	constants	line:672
supCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val supCsym = global.csym(supName)$/;"	constants	line:825
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val superClassNames = csym.superClassNames$/;"	constants	line:2147
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def superClassNames: List[Name.Class] = LoadedData.join.superClassNames$/;"	methods	line:40
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def superClassNames = SuperClassNames.join$/;"	methods	line:129
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def superClassNames: List[Name.Class]$/;"	methods	line:52
superClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val superClasses = opt("extends"~>comma1(extendsDecl)) ^^ {$/;"	constants	line:138
superCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^            val superCsym = global.csym(superName) $/;"	constants	line:24
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superCsyms = superNames.map(global.csym)$/;"	constants	line:81
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superCsyms = csym.superClassNames.map(global.csym)$/;"	constants	line:60
superLists	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superLists = superCsyms.map(forSym)$/;"	constants	line:82
superNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superNames = csym.superClassNames$/;"	constants	line:80
superSymTab	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        var superSymTab = mergeSuperSymbolTables(csym)$/;"	local variables	line:88
superSymtabs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superSymtabs = superCsyms.map(constructSymbolTable)$/;"	constants	line:61
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: S$/;"	methods	line:358
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: VSym$/;"	methods	line:397
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sym = new VarSymbol.Local(NoPosition, Modifier.Set.empty, name, ty)$/;"	constants	line:1652
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val sym = lookupFieldOrError(typedBase.ty, name, None)$/;"	constants	line:271
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val sym = env.locals(localName.name)$/;"	constants	line:827
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val sym = env.locals(localName.name)$/;"	constants	line:864
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = env.locals(localName)$/;"	constants	line:389
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(outExpr.pos, Modifier.Set.empty, name, outExpr.ty)$/;"	constants	line:1202
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(stmt.pos, Modifier.Set.empty, name.name, Type.InlineInterval)$/;"	constants	line:702
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = newSym(name.pos, modifiers, name.name, ty)$/;"	constants	line:230
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val sym = VarSymbol.errorLocal(Name.LocalVar(name), None)$/;"	constants	line:355
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val sym = new VarSymbol.Local(name.pos, mod, name.name, ty)$/;"	constants	line:783
symPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val symPath = accessMap.syms(decl.vsym)$/;"	constants	line:1403
sym_pat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_pat = global.csym(name_pat)$/;"	constants	line:611
sym_val	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_val = global.csym(name_val)$/;"	constants	line:610
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ Every class symbol potentially has several intervals corresponding$/;"	classes	line:14
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                \/\/ Find the most specific class symbol that is a supertype of both:$/;"	classes	line:582
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                \/\/ Restrict the arguments to those defined on that class symbol:$/;"	classes	line:590
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S] = List(sym)$/;"	methods	line:361
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S] = subpatterns.flatMap(_.symbols)$/;"	methods	line:347
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S]$/;"	methods	line:340
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ to different processing phases.  For some class symbols, these intervals$/;"	classes	line:15
symbolsDeclaredInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsDeclaredInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:646
symbolsReassignedInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsReassignedInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:641
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val syms = new mutable.HashMap[VarSymbol.Any, AccessPath]()$/;"	constants	line:561
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targ = typeArg(Name.ArrayElem, ty.getComponentType).get$/;"	constants	line:96
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targ = typeArg(Name.ArrayElem, ty.getGenericComponentType).get$/;"	constants	line:106
targetCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val targetCsym = global.csym(extendsDecl.className.name)$/;"	constants	line:573
targs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targs = tparams.zip(ty.getActualTypeArguments).flatMap(typeArg)$/;"	constants	line:126
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1401
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1437
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1493
tcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tcRel = ($/;"	constants	line:203
templateClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val templateClass = classOf[harmonic.lang.Block[_, _]]$/;"	constants	line:79
templateTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def templateTy($/;"	methods	line:106
test	/Users/niko/git/intervals-java/Harmonic/Makefile	/^test: compile$/;"	targets	line:37
test_file	/Users/niko/git/intervals-java/Harmonic/test.py	/^def test_file(filenm):$/;"	function	line:571
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:117
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:146
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val text = name.name.text$/;"	constants	line:191
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Impl.class: a Java class that implements Foo, suitable$/;"	classes	line:28
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    \/** Base class that captures the basic pattern of computing$/;"	classes	line:48
theOldCollegeTry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def theOldCollegeTry(lvalue: in.Lvalue): Type.Ref = lvalue match {$/;"	methods	line:733
thisAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisAccessPath = derivedAccessMap.pathToFreshSlot(asmClassType(cname))$/;"	constants	line:1231
thisCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def thisCsym = $/;"	methods	line:145
thisField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            def thisField(memberName: Name.Member) = {$/;"	methods	line:361
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisPath = accessMap.addUnboxedSym(csym.loweredSource.thisSym)$/;"	constants	line:1887
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisPath = accessMap.addUnboxedSym(thisSym)$/;"	constants	line:1816
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPath = accessMap.addUnboxedSym(csym.loweredSource.thisSym)$/;"	constants	line:2185
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(className, List()).toAsmType) \/\/ reserve this ptr$/;"	constants	line:1711
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(csym.name, List()).toAsmType) \/\/ reserve this ptr$/;"	constants	line:2015
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(csym.name, List()).toAsmType)$/;"	constants	line:2070
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisSym = csym.loweredSource.thisSym$/;"	constants	line:1812
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^                    val thisSym = csym.loweredSource.thisSym$/;"	constants	line:74
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val thisSym = env.lookupThis$/;"	constants	line:566
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisSym = new VarSymbol.Local(csym.pos, Modifier.Set.empty, Name.ThisLocal, thisTy)$/;"	constants	line:21
thisTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisTy = Type.Class(csym.name, List())$/;"	constants	line:20
threadId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val threadId = maxThreadId$/;"	constants	line:110
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Byte l, Double r) { return l * r; }$/;"	method	line:237
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Byte r) { return l * r; }$/;"	method	line:312
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Double r) { return l * r; }$/;"	method	line:327
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Float r) { return l * r; }$/;"	method	line:324
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Integer r) { return l * r; }$/;"	method	line:318
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Long r) { return l * r; }$/;"	method	line:321
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Short r) { return l * r; }$/;"	method	line:315
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Float l, Double r) { return l * r; }$/;"	method	line:309
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Integer l, Double r) { return l * r; }$/;"	method	line:273
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Long l, Double r) { return l * r; }$/;"	method	line:291
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Short l, Double r) { return l * r; }$/;"	method	line:255
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Byte l, Float r) { return l * r; }$/;"	method	line:234
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Byte r) { return l * r; }$/;"	method	line:294
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Float r) { return l * r; }$/;"	method	line:306
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Integer r) { return l * r; }$/;"	method	line:300
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Long r) { return l * r; }$/;"	method	line:303
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Short r) { return l * r; }$/;"	method	line:297
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Integer l, Float r) { return l * r; }$/;"	method	line:270
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Long l, Float r) { return l * r; }$/;"	method	line:288
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Short l, Float r) { return l * r; }$/;"	method	line:252
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Byte r) { return l * r; }$/;"	method	line:222
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Integer r) { return l * r; }$/;"	method	line:228
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Short r) { return l * r; }$/;"	method	line:225
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Byte r) { return l * r; }$/;"	method	line:258
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Integer r) { return l * r; }$/;"	method	line:264
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Short r) { return l * r; }$/;"	method	line:261
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Byte r) { return l * r; }$/;"	method	line:240
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Integer r) { return l * r; }$/;"	method	line:246
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Short r) { return l * r; }$/;"	method	line:243
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Byte l, Long r) { return l * r; }$/;"	method	line:231
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Integer l, Long r) { return l * r; }$/;"	method	line:267
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Byte r) { return l * r; }$/;"	method	line:276
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Integer r) { return l * r; }$/;"	method	line:282
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Long r) { return l * r; }$/;"	method	line:285
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Short r) { return l * r; }$/;"	method	line:279
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Short l, Long r) { return l * r; }$/;"	method	line:249
tmpVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def tmpVarName(from: Ast.Node) = {$/;"	methods	line:668
tmplmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplmvis = tmplwr.cvis.visitMethod($/;"	constants	line:1557
tmplwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplwr = new ClassWriter(blockClassName, noSuffix, tmpl.pos)$/;"	constants	line:1526
toAsmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def toAsmType: asm.Type = ty match {$/;"	methods	line:110
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(context.toPackage(pkg), component)$/;"	methods	line:119
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(pkg, nm)$/;"	methods	line:112
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package): Name.Class$/;"	methods	line:104
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = ""$/;"	methods	line:19
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = base.toInternalPrefix + name + "\/"$/;"	methods	line:29
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = internalName + "$"$/;"	methods	line:39
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix: String$/;"	methods	line:8
toList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def toList = All.filter(contains)$/;"	methods	line:20
toNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toNode: TypedPath = TypedPath(path)$/;"	methods	line:977
toNodeWithPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toNodeWithPosOf(n: Node): TypedPath = withPosOf(n, toNode)$/;"	methods	line:978
toOptFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptFieldSymbol(MemName: Name.Member): Option[VarSymbol.Field] = {$/;"	methods	line:128
toOptMethodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptMethodSymbol(MthdName: Name.Method): Option[MethodSymbol] = {$/;"	methods	line:42
toOptTypeArgOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toOptTypeArgOf(csym: ClassSymbol)(targ: in.TypeArg) = {$/;"	methods	line:496
toOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toOwner = this$/;"	methods	line:14
toOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toOwner = toPath$/;"	methods	line:54
toOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toOwner: UntypedOwner$/;"	methods	line:11
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(context.toPackage(pkg), component)$/;"	methods	line:120
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(pkg, nm)$/;"	methods	line:113
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package): Name.Package$/;"	methods	line:105
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPath = Path.Local(this)$/;"	methods	line:139
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Constant(obj)$/;"	methods	line:67
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Index(array.toPath, index.toPath)$/;"	methods	line:104
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Call(receiver.toOwner, msym.id, args.map(_.toPath))$/;"	methods	line:100
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Cast(ty, path.toPath)$/;"	methods	line:63
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Field(base.toOwner, sym.name)$/;"	methods	line:74
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Local(sym.name)$/;"	methods	line:58
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Tuple(paths.map(_.toPath))$/;"	methods	line:121
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath: Path.Ref$/;"	methods	line:53
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        def toPath = Path.Local(name)$/;"	methods	line:30
toPatternRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toPatternRef: Pattern.Ref = pat match {$/;"	methods	line:968
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = ""$/;"	methods	line:21
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = toString + "."$/;"	methods	line:31
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = toString + "."$/;"	methods	line:44
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix: String$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, kind, right)$/;"	methods	line:276
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, rel, right)$/;"	methods	line:240
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:527
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, typeRef)$/;"	methods	line:520
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), tref, name)$/;"	methods	line:378
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), tref, name)$/;"	methods	line:408
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(context, component)$/;"	methods	line:117
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(owner, name)$/;"	methods	line:682
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:491
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s[%s]".format(className, typeArgs.mkString(", "))$/;"	methods	line:495
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s) = (%s)".format(lvalues.mkString(", "), rvalues.mkString(", "))$/;"	methods	line:667
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(args.mkString(", "))$/;"	methods	line:322
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(exprs.mkString(", "))$/;"	methods	line:608
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(subpatterns.mkString(", "))$/;"	methods	line:349
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(types.mkString(", "))$/;"	methods	line:505
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)(%s)".format(typeRef, expr)$/;"	methods	line:647
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<(Void)null>"$/;"	methods	line:741
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<err:%s>".format(name)$/;"	methods	line:541
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<infer>"$/;"	methods	line:466
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<this>"$/;"	methods	line:746
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "@%s".format(name)$/;"	methods	line:289
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[class %s%s]".format($/;"	methods	line:170
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[interval %s(%s)]".format(name, parent)$/;"	methods	line:200
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[method %s]".format(name)$/;"	methods	line:217
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "extends %s(%s)".format(className, args.mkString(", "))$/;"	methods	line:307
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s -> %s".format(fromName, toName)$/;"	methods	line:152
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s.*".format(fromName)$/;"	methods	line:158
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "interval %s {...}".format(name)$/;"	methods	line:755
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s".format(tref, args.mkString("(", "", ")"))$/;"	methods	line:726
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "null"$/;"	methods	line:736
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "return(%s)".format(value)$/;"	methods	line:766
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "super"$/;"	methods	line:691
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "{...}"$/;"	methods	line:578
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = ($/;"	methods	line:478
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = Type.Null.toString$/;"	methods	line:501
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:422
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:433
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:545
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:695
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:814
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:818
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:827
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:831
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:835
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:839
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = nm$/;"	methods	line:109
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = obj.toString$/;"	methods	line:661
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = owner + "." + name$/;"	methods	line:558
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString        $/;"	methods	line:474
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:326
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:571
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = ty.toString$/;"	methods	line:450
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:550
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:563
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:628
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:703
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:42
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    override def toString = {$/;"	methods	line:31
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    override def toString = {$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    override def toString = "[(%s): %s]".format($/;"	methods	line:7
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    override def toString = "MethodSymbol(%s, %x)".format(name, System.identityHashCode(this))$/;"	methods	line:34
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        override def toString = "ModSet(%s)".format(toList.mkString(", "))$/;"	methods	line:17
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "(%s.%s)".format(className, text)$/;"	methods	line:125
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "<root>"$/;"	methods	line:22
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:32
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:58
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = parts.mkString("", "()", "()")$/;"	methods	line:109
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = text$/;"	methods	line:140
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            override def toString = "operator '%s'".format(chars)$/;"	methods	line:24
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "%s.%s(%s)".format(receiver, methodId, args.mkString(", "))$/;"	methods	line:33
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "%s[%s]".format(array, index)$/;"	methods	line:36
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "(%s)".format(paths.mkString(","))$/;"	methods	line:39
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "(%s)%s".format(ty, path)$/;"	methods	line:24
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = base.toString + "." + f.toString$/;"	methods	line:30
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = obj.toString$/;"	methods	line:27
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:101
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:118
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:123
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:60
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:64
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:71
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = toPath.toString$/;"	methods	line:81
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = v.toString$/;"	methods	line:21
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "->"$/;"	methods	line:20
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "="$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "inlineSubOf"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "locks"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsRd"$/;"	methods	line:34
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsWr"$/;"	methods	line:30
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "subOf"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":>"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = "<:"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:28
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, ty)$/;"	methods	line:31
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "(%s)".format(typeRefs.mkString(", "))$/;"	methods	line:18
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "Null"$/;"	methods	line:21
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = $/;"	methods	line:13
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def toString = $/;"	methods	line:198
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:47
toSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val toSym = global.csym(toName)$/;"	constants	line:123
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toTag = "$Harmonic$"$/;"	methods	line:20
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toTag = base.toTag + name + "$"$/;"	methods	line:30
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toTag = base.toTag + name + "$"$/;"	methods	line:42
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toTag: String$/;"	methods	line:9
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ()$/;"	methods	line:875
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ()$/;"	methods	line:916
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ty$/;"	methods	line:959
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def toTy(ty: Type.Ref): Ty$/;"	methods	line:70
toType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def toType: Type.Class = name.toType$/;"	methods	line:47
toType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toType = Type.Class(this, Nil)$/;"	methods	line:48
toTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toTypeRef(tref: in.ResolveTypeRef): Type.Ref = {$/;"	methods	line:472
toTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        def toTypedPath = Path.TypedLocal(this)$/;"	methods	line:31
token	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def token: Parser[Token] = ( $/;"	methods	line:39
tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val tokens = new parser.lexical.Scanner(reader)$/;"	constants	line:439
tops	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val tops = group.msyms.foldLeft(group.msyms) {$/;"	constants	line:131
tparams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val tparams = cls.getTypeParameters.toList.map(tv => Name.Member(className, tv.getName))$/;"	constants	line:125
trace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def trace(cvis: asm.ClassVisitor) = {$/;"	methods	line:357
transitiveSuperClassSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    lazy val transitiveSuperClassSymbols: Set[ClassSymbol] = {$/;"	constants	line:54
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:876
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:917
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = tref.ty$/;"	methods	line:960
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def trefTy(tref: TR): Ty$/;"	methods	line:72
tryLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tryLabel = new asm.Label()$/;"	constants	line:1196
tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tuple = positioned($/;"	constants	line:349
tupleBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleBlkParam = positioned($/;"	constants	line:246
tupleExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleExtendsArg = positioned($/;"	constants	line:122
tupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleLvalue = positioned($/;"	constants	line:255
tupleMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleMthdParam = positioned($/;"	constants	line:237
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:878
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:919
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = Type.Tuple(tys)$/;"	methods	line:962
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def tupleTy(tys: List[Ty]): TyTuple$/;"	methods	line:73
tupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleType = positioned($/;"	constants	line:283
tvar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val tvar = Name.LocalVar(tmpVarName(expr))$/;"	constants	line:1048
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = errTy$/;"	methods	line:540
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = returnTy(data)$/;"	methods	line:702
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = toTy(path.ty)$/;"	methods	line:572
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = trefTy(typeRef)$/;"	methods	line:645
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:199
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:666
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:754
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:764
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:359
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:546
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:341
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:90
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: TyTuple = tupleTy(subpatterns.map(_.ty))$/;"	methods	line:345
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val ty = InEnv(env).checkExpr(rv)$/;"	constants	line:114
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val ty = InEnv(outEnv).toTypeRef(inTref)$/;"	constants	line:818
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val ty = InEnv(outEnv).toTypeRef(inTref)$/;"	constants	line:853
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = firstSuperClassOfferingMethod(mcall.rcvr.pos, mcall.name)$/;"	constants	line:1023
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = tref match {$/;"	constants	line:225
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:1080
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val ty = decl.tref match {$/;"	constants	line:138
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty = msig.returnTy$/;"	methods	line:99
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty = sym.ty$/;"	methods	line:59
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty: Type.Ref$/;"	methods	line:52
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val ty = Type.Tuple(paths.map(_.ty))$/;"	constants	line:122
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val ty = {$/;"	constants	line:106
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val ty = {$/;"	constants	line:68
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val ty = {$/;"	constants	line:75
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Ref$/;"	methods	line:8
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Tuple = Type.Tuple(patterns.map(_.ty))$/;"	methods	line:28
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def ty(t: Type.Ref): Type.Ref = t match {$/;"	methods	line:39
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:18
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:35
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val ty: Type.Ref$/;"	constants	line:28
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val ty: Type.Ref,$/;"	constants	line:13
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val ty: Type.Ref$/;"	constants	line:45
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            \/\/ p has class type `pathTy` == `c[args]`:$/;"	classes	line:418
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c[...]` must be class type:$/;"	classes	line:552
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c` could be path or class type:$/;"	classes	line:516
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a` must be class type:$/;"	classes	line:546
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeArg(pair: (Name.Member, reflect.Type)): Option[Type.TypeArg] = pair match {$/;"	methods	line:81
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeArg: PackratParser[out.TypeArg] = typeTypeArg | pathTypeArg$/;"	constants	line:295
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def typeArg(targ: Type.Arg): Type.Arg = targ match {$/;"	methods	line:46
typeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typeArgs = inTypeArgs.flatMap(toOptTypeArgOf(csym))$/;"	constants	line:490
typeArgsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typeArgsAreEquatable(targ1: Type.Arg, targ2: Type.Arg): Boolean = {$/;"	methods	line:646
typeEquatableWith	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typeEquatableWith(ty1: Type.Ref)(ty2: Type.Ref): Boolean = {$/;"	methods	line:686
typeOfPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typeOfPath(path: Path.Ref) = typedPath(path).ty$/;"	methods	line:296
typeParamSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeParamSymTabEntry(tv: reflect.TypeVariable[_]) = {$/;"	methods	line:77
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeRef(ty: reflect.Type): Type.Ref = ty match {$/;"	methods	line:94
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeRef: PackratParser[out.TR] = constrainedType | pathType | tupleType$/;"	constants	line:281
typeT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val typeT = Type.Member(Path.This, Name.Member(iterableTy.name, "T"))$/;"	constants	line:206
typeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeTypeArg = positioned($/;"	constants	line:297
typeVarBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def typeVarBounds(tyVar: Type.Member) = {$/;"	methods	line:415
typedBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val typedBase = typedPath(base)$/;"	constants	line:270
typedOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def typedOwner(owner: Path.TypedOwner): Path.TypedOwner = {$/;"	methods	line:21
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typedPath(path: Path.Ref): Path.Typed = path match {$/;"	methods	line:257
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typedPath = typedPathForPath(path)$/;"	constants	line:477
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def typedPath(path: Path.Typed): Path.Typed = {$/;"	methods	line:28
typedPathForExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForExpr(outExpr: out.Expr) = {$/;"	methods	line:1230
typedPathForExprFilter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForExprFilter(filter: (Path.Typed => Boolean))(outExpr: out.Expr): Path.Typed = {$/;"	methods	line:1194
typedPathForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForPath(path: in.PathNode): Path.Typed = {$/;"	methods	line:353
typedPathNodeForExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathNodeForExpr(outExpr: out.Expr): out.TypedPath = {$/;"	methods	line:1234
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * means that we remove redundant class types; i.e., if $/;"	classes	line:459
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * type variables.  It does not return supertypes of class types. *\/$/;"	classes	line:450
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * type variables.  It does not return supertypes of class types. *\/$/;"	classes	line:455
typesAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typesAreEquatable(ty1: Type.Ref, ty2: Type.Ref): Boolean = {$/;"	methods	line:682
typesAreEquatable1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typesAreEquatable1(pair: (Type.Ref, Type.Ref)): Boolean = {$/;"	methods	line:660
tys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val tys = msig.parameterPatterns.flatMap(_.varTys)$/;"	constants	line:816
ub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val ub = minimalUpperBoundType(varTy)$/;"	constants	line:521
ubSubTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val ubSubTys = upperBoundVars(path.ty)$/;"	constants	line:812
ubs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val ubs = wt.getUpperBounds$/;"	constants	line:84
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonTuple) = Some(anon.patterns)$/;"	methods	line:33
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonVar) = Some(anon.ty)$/;"	methods	line:23
unbox	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def unbox(box: BoxInfo) {$/;"	methods	line:223
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def undent() {$/;"	methods	line:27
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def undent() {$/;"	methods	line:49
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def undent(): Unit$/;"	methods	line:5
unknown	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    val unknown = new Position() {$/;"	constants	line:27
upperBoundVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def upperBoundVars(ty: Type.Ref) = new Bounder(TcSub).compute(ty)$/;"	methods	line:451
usage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def usage(err: PrintStream) {$/;"	methods	line:27
useReflection	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var useReflection = true$/;"	local variables	line:23
using	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * We also generate the FooTask class using `deriveIntervalTask`. *\/$/;"	classes	line:1433
v	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                val v = cls.getConstructor().newInstance()$/;"	constants	line:47
v	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def v: T = {$/;"	methods	line:14
v_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def v_=(v: T) = {$/;"	methods	line:19
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    private[this] var value: Option[T] = None$/;"	local variables	line:7
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^    public R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^    R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^  public String value();$/;"	method	line:4
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^    public Requirement[] value();$/;"	method	line:4
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^    public final Object value;$/;"	field	line:9
varBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varBlkParam = positioned($/;"	constants	line:249
varExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def varExpr(name: Name.LocalVar) = {$/;"	methods	line:923
varIdent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varIdent = ident | "this"$/;"	constants	line:76
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def varMembers: List[SymTab.Entry] = LoadedData.join.varMembers$/;"	methods	line:41
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def varMembers = VarMembers.join$/;"	methods	line:132
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def varMembers: List[SymTab.Entry]$/;"	methods	line:75
varMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varMthdParam = positioned($/;"	constants	line:240
varName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varName = relBase | "("~>relName<~")"$/;"	constants	line:88
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^            val varNames = msym.msig.parameterPatterns.flatMap(_.varNames)$/;"	constants	line:91
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames = List(name)$/;"	methods	line:44
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames = patterns.flatMap(_.varNames)$/;"	methods	line:48
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames: List[Name.LocalVar]$/;"	methods	line:14
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = List(ty)        $/;"	methods	line:19
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = patterns.flatMap(_.varTys)$/;"	methods	line:29
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys: List[Type.Ref]$/;"	methods	line:9
version	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    val version = "1.0"$/;"	constants	line:15
visitFieldAccessor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitFieldAccessor($/;"	methods	line:1985
visitMethodWithMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitMethodWithMro($/;"	methods	line:1951
visitPlainMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitPlainMethod($/;"	methods	line:1929
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^        val visited = new mutable.HashSet[ClassSymbol]()$/;"	constants	line:56
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val visited = new mutable.HashSet[T]()$/;"	constants	line:51
voidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidClass = classOf[java.lang.Void]$/;"	constants	line:76
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = ()$/;"	methods	line:874
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = ()$/;"	methods	line:915
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = Type.Void$/;"	methods	line:958
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def voidTy: Ty$/;"	methods	line:69
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidTy = Type.Class(voidClass)$/;"	constants	line:88
vp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def vp(lists: (List[Name.LocalVar], List[Path.Ref])) = {$/;"	methods	line:67
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:877
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:918
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(vsym: VSym) = vsym.ty$/;"	methods	line:961
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def vsymTy(vsym: VSym): Ty$/;"	methods	line:71
vt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def vt(lists: (List[Name.LocalVar], List[Path.Typed])) = {$/;"	methods	line:72
wcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val wcRel = ($/;"	constants	line:197
we	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                    \/\/ Check that we got (at least) the class we expected to find:$/;"	classes	line:135
which	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ Creates a name for the class which will be generated for node `node`$/;"	classes	line:41
while_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void while_($/;"	method	line:59
will	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * onto the bytecode stack.  The class will have fields$/;"	classes	line:1518
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Returns an access map for a method-local class with$/;"	classes	line:1214
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** True if a class with the name `className` has been$/;"	classes	line:84
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        \/\/ Process the rest of the class with all members in scope:$/;"	classes	line:36
withOptReturnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def withOptReturnTy(optReturnTy: Option[Type.Ref]) = copy(optReturnTy = optReturnTy)$/;"	methods	line:88
withPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOf[P <: Positional, Q <: Product with Positional](from: P, to: Q): Q = {$/;"	methods	line:18
withPosOfOpt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfOpt[P <: Positional, Q <: Product with Positional](from: P, to: Option[Q]): Option[Q] = {$/;"	methods	line:29
withPosOfR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfR[P <: Positional, Q, R <: Product with Positional](from: P, to: Either[Q, R]): Either[Q, R] = {$/;"	methods	line:33
withPosOfRes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def withPosOfRes(path: in.PathNode, res: ResolvePathResult) = res match {$/;"	methods	line:354
withStashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def withStashSlot[R](func: (Int => R)) = {$/;"	methods	line:580
withSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def withSuffix(suffix: String) = Class(base, name + suffix)$/;"	methods	line:61
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, implSuffix, csym.pos)$/;"	constants	line:2262
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, noSuffix, csym.pos)$/;"	constants	line:2144
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, staticSuffix, csym.pos)$/;"	constants	line:2321
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def write(fmt: String, args: Any*) {$/;"	methods	line:30
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def write(fmt: String, args: Any*) {$/;"	methods	line:52
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def write(fmt: String, args: Any*): Unit$/;"	methods	line:6
writeClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeClassSymbol(csym: ClassFromSource) = {$/;"	methods	line:2348
writeEmptyCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeEmptyCtor($/;"	methods	line:2117
writeForwardingMethodIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethodIfNeeded($/;"	methods	line:1684
writeForwardingMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethods($/;"	methods	line:1737
writeImplClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeImplClass(csym: ClassFromSource) {$/;"	methods	line:2261
writeImplCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeImplCtor($/;"	methods	line:2169
writeInterClassInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterClassInterface(csym: ClassFromSource) {$/;"	methods	line:2143
writeIntervalCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def writeIntervalCtor = {$/;"	methods	line:1317
writeIntervalRun	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def writeIntervalRun = {$/;"	methods	line:1350
writeMethodInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMethodInterface($/;"	methods	line:1974
writeMroMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMroMethodImpl($/;"	methods	line:2063
writePlainToMroDispatch	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writePlainToMroDispatch($/;"	methods	line:2008
writeStaticClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticClass(csym: ClassFromSource) {$/;"	methods	line:2320
writeStaticConstructorMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticConstructorMethodImpl($/;"	methods	line:1798
writeStaticMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticMethodImpl($/;"	methods	line:1869
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def writeln(fmt: String, args: Any*) {$/;"	methods	line:37
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def writeln(fmt: String, args: Any*) {$/;"	methods	line:61
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def writeln(fmt: String, args: Any*): Unit$/;"	methods	line:7
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val writer = new java.io.FileWriter(sFile)$/;"	constants	line:364
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val writer = new asm.ClassWriter(asm.ClassWriter.COMPUTE_MAXS | asm.ClassWriter.COMPUTE_FRAMES)$/;"	constants	line:381
