!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
%Gen.java	/Users/niko/git/intervals-java/Harmonic/Makefile	/^%Gen.java: %Gen.py$/;"	targets	line:37
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class A(i: Int) extends Fact.Backward$/;"	classes	line:11
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^public interface AsyncBlock<R, A> extends Block<R, A> {$/;"	interface	line:3
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^public interface Block<R, A> {$/;"	interface	line:7
Abstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^public @interface Abstract {$/;"	interface	line:3
AbstractBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class AbstractBody() extends AbstractableBody {$/;"	classes	line:663
AbstractClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AbstractClass = Class(classOf[harmonic.lang.Abstract])$/;"	constants	line:230
AbstractableBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    abstract class AbstractableBody extends AnyBody$/;"	classes	line:661
AccessField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessField($/;"	classes	line:521
AccessHarmonicAccessor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessHarmonicAccessor($/;"	classes	line:465
AccessIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessIndex($/;"	classes	line:491
AccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class AccessMap(val context: Name.Class)$/;"	classes	line:556
AccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class AccessPath extends ValuePath {$/;"	classes	line:434
AccessVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessVar($/;"	classes	line:445
All	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    val All = List(Abstract, Mutable, Override, Static, Unscheduled)$/;"	constants	line:15
AllFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllFieldSymbols = new GuardedBy[List[VarSymbol.Field]](merge)$/;"	constants	line:254
AllGhostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllGhostSymbols = new GuardedBy[List[GhostSymbol]](create)$/;"	constants	line:226
AllIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllIntervalSymbols = new GuardedBy[List[VarSymbol.Field]](merge)$/;"	constants	line:257
AllOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val AllOverrides = new GuardedBy[Map[MethodSymbol, List[MethodSymbol]]](gather)$/;"	constants	line:63
AllOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val AllOverrides = new GuardedBy[Map[MethodSymbol, List[MethodSymbol]]](gather)$/;"	constants	line:291
AllOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def AllOverrides: GuardedBy[Map[MethodSymbol, List[MethodSymbol]]]$/;"	methods	line:119
Alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    class Alpha($/;"	classes	line:124
AmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousInheritance($/;"	classes	line:59
AmbiguousMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousMember(options: List[SymTab.MemberEntry]) extends ErrorProduct$/;"	classes	line:96
AmbiguousMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousMethodCall(numberOfOptions: Int) extends ErrorProduct$/;"	classes	line:37
Annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Annotation($/;"	classes	line:354
Anon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait Anon extends Any {$/;"	traits	line:34
AnonTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed case class AnonTuple(patterns: List[Pattern.Anon]) extends Anon with AnyTuple {$/;"	classes	line:42
AnonVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed case class AnonVar(ty: Type) extends Anon with AnyVar {$/;"	classes	line:38
Any	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    type Any = VarSymbol[Name.Var]$/;"	types	line:118
Any	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Any {$/;"	classes	line:7
Any	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait Any {$/;"	traits	line:9
AnyBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    abstract class AnyBody extends Node$/;"	classes	line:659
AnyPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class AnyPath(path: SPath) extends Node {$/;"	classes	line:648
AnyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AnyPathNode = AnyPath$/;"	types	line:1125
AnyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AnyPathNode = ParsePath$/;"	types	line:1039
AnyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AnyPathNode = ParsePath$/;"	types	line:1081
AnyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnyTuple extends Any {$/;"	traits	line:23
AnyVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnyVar extends Any {$/;"	traits	line:14
Application	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^public interface Application {$/;"	interface	line:3
ApplicationContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^public interface ApplicationContext {$/;"	interface	line:9
Arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Arg {$/;"	classes	line:28
ArrayClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayClass = Class(classOf[harmonic.lang.Array[_]])$/;"	constants	line:225
ArrayElem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayElem = Member(ArrayClass, "E")$/;"	constants	line:226
Assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Assign(lvalues: List[Lvalue], rvalues: List[NE]) extends LowerStmt {$/;"	classes	line:773
Ast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^abstract class Ast {$/;"	classes	line:14
AstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class AstPattern[+S <: VSym] extends Node {$/;"	classes	line:412
AsyncBlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncBlockClass = Class(classOf[harmonic.lang.AsyncBlock[_, _]])$/;"	constants	line:237
AsyncInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val AsyncInterval = Type.Class(Name.AsyncIntervalClass, List())$/;"	constants	line:48
AsyncIntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncIntervalClass = Class(classOf[ch.ethz.intervals.AsyncInterval])$/;"	constants	line:213
At	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        class At(node: Ast.Node) {$/;"	classes	line:27
B	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class B(i: Int) extends Fact.Backward$/;"	classes	line:12
Backward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    trait Backward extends Fact {$/;"	traits	line:23
Backward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    trait Backward[X] extends Rule[X] {$/;"	traits	line:73
BackwardKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    type BackwardKind = Class[_ <: Fact.Backward]$/;"	types	line:15
BeanSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^sealed trait BeanSymbol extends Symbol$/;"	traits	line:14
Beta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    class Beta($/;"	classes	line:154
Binary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    trait Binary[L, R] extends Forward {$/;"	traits	line:29
Block	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Block($/;"	classes	line:711
BlockA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockA = Member(BlockClass, "A")$/;"	constants	line:239
BlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockClass = Class(classOf[harmonic.lang.Block[_, _]])$/;"	constants	line:236
BlockParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockParent = Member(BlockClass, "Parent")$/;"	constants	line:240
BlockR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockR = Member(BlockClass, "R")$/;"	constants	line:238
Body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Body(stmts: List[Stmt]) extends AbstractableBody {$/;"	classes	line:670
BoxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class BoxInfo($/;"	classes	line:91
BoxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class BoxedArray(accessMap: AccessMap)$/;"	classes	line:588
ByteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^case class ByteCode(global: Global) {$/;"	classes	line:34
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^\/** Given a class C, creates a flattened list$/;"	classes	line:13
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^  * can still override one another if a third class C extends both A and B$/;"	classes	line:11
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            \/\/ to construct the merge, Python 2.3 will refuse to create the class C and $/;"	classes	line:23
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class C(i: Int) extends Fact.Backward$/;"	classes	line:13
CLASSPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	macro	line:13
CLASSPATH=$(JARPATH)	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	targets	line:13
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:1068
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:1112
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = RelName$/;"	types	line:1026
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:1069
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:1113
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = RelBase$/;"	types	line:1027
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = ClassSymbol$/;"	types	line:1129
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:1043
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:1085
Call	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Call(receiver: Owner, methodId: MethodId, args: List[Path.Ref]) extends Ref {$/;"	classes	line:35
Call	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Call($/;"	classes	line:79
CanOnlyCreateClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CanOnlyCreateClasses(ty: Type) extends ErrorProduct$/;"	classes	line:36
CannotResolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CannotResolve(name: String) extends ErrorProduct$/;"	classes	line:82
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Cast(expr: NE, typeRef: TR) extends ResolveTlExpr {$/;"	classes	line:739
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Cast(ty: Type, path: Ref) extends Ref {$/;"	classes	line:23
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Cast(ty: Type, path: SPath.Typed) extends Typed {$/;"	classes	line:48
Check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^case class Check(global: Global) {$/;"	classes	line:13
CheckEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val CheckEnv = new GuardedBy[Env](envirate)$/;"	constants	line:273
ChildParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    sealed trait ChildParent extends ForwardPaths {$/;"	traits	line:27
CircularInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CircularInheritance(className: Name.Class, extendsClass: Name.Class) extends ErrorProduct$/;"	classes	line:50
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Class($/;"	classes	line:55
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Class(name: Name.Class, typeArgs: List[Type.Arg]) extends Type {$/;"	classes	line:16
ClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassDecl($/;"	classes	line:166
ClassEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ClassEnv = new GuardedBy[Env](create)$/;"	constants	line:213
ClassFromCompiledSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^abstract class ClassFromCompiledSource extends ClassSymbol$/;"	classes	line:6
ClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClassName(name: Name.Class) extends QualName {$/;"	classes	line:992
ClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ClassParam = new GuardedBy[Ast.Lower.Param[VarSymbol.Field]](create)    $/;"	constants	line:209
ClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^abstract class ClassSymbol extends Symbol {$/;"	classes	line:9
ClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassType(className: ClassName, typeArgs: List[TypeArg]) extends ResolveTypeRef {$/;"	classes	line:572
ClassWriter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ClassWriter($/;"	classes	line:344
ClasslessMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class ClasslessMember(text: String) extends UnloweredMember {$/;"	classes	line:181
ClasslessMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClasslessMemberName(name: Name.ClasslessMember) extends UnloweredMemberName {$/;"	classes	line:1013
CompUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class CompUnit($/;"	classes	line:130
CompilationFailed	/Users/niko/git/intervals-java/Harmonic/test.py	/^class CompilationFailed(Exception):$/;"	class	line:190
Constant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Constant(obj: Object) extends Ref {$/;"	classes	line:26
Constant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Constant(obj: Object) extends Typed {$/;"	classes	line:53
ConstrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ConstrainedType(path: AnyPathNode, typeArgs: List[TypeArg]) extends ParseTypeRef {$/;"	classes	line:555
Constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val Constructor = new GuardedBy[MethodSymbol](create)$/;"	constants	line:217
ControlFlowException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^public abstract class ControlFlowException extends RuntimeException {$/;"	class	line:4
CtorDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/case class CtorDecl($/;"	classes	line:199
D	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class D(i: Int) extends Fact.Backward$/;"	classes	line:14
DEBUGLOGS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^DEBUGLOGS=..\/debug-logs$/;"	macro	line:17
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    case class Data($/;"	classes	line:30
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^    class Data(pos: Position) {$/;"	classes	line:26
DebugPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    trait DebugPage extends lathos.Page {$/;"	traits	line:160
DeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class DeclareVarLvalue($/;"	classes	line:480
DefineLv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class DefineLv(lvsym: LVSym, rvalue: Expr) extends LowerStmt {$/;"	classes	line:761
DiffStaticClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DiffStaticClasses(className1: Name.Class, className2: Name.Class) extends ErrorProduct$/;"	classes	line:83
DoesNotEnsure	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DoesNotEnsure(fact: inference.Fact) extends ErrorProduct$/;"	classes	line:40
DoesNotPermitReadsFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DoesNotPermitReadsFrom(guardPath: Path.Ref, interPath: Path.Ref) extends ErrorProduct$/;"	classes	line:32
DoesNotPermitWritesFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DoesNotPermitWritesFrom(guardPath: Path.Ref, interPath: Path.Ref) extends ErrorProduct$/;"	classes	line:31
E	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^public interface Array<E> {$/;"	interface	line:3
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = ExtendsArg$/;"	types	line:1035
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = ExtendsArg$/;"	types	line:1077
EA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type EA = TypedPath$/;"	types	line:1121
ElemLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ElemLvalue extends TreeLvalue {$/;"	classes	line:474
EmptyFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    case class EmptyFactSet(xtra: X) extends InternalFactSet[X] {$/;"	classes	line:32
Ensures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val Ensures = new GuardedBy[List[inference.Fact]](elaborate)$/;"	constants	line:92
EnsuresFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class EnsuresFinal(guard: Path.Ref, inter: Path.Ref) extends GuardInter {$/;"	classes	line:71
Entry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class Entry {$/;"	classes	line:4
Env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^case class Env($/;"	classes	line:184
Envirate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^case class Envirate(global: Global) {$/;"	classes	line:15
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^abstract class Error {$/;"	classes	line:11
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    case class Error(pos: Position, msgKey: String, msgArgs: List[String]) {$/;"	classes	line:8
ErrorProduct	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    trait ErrorProduct extends Error with Product {$/;"	traits	line:20
ExecutableDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed trait ExecutableDecl[+B <: AnyBody] extends Node {$/;"	traits	line:190
ExpClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpClassName(path: String) extends ErrorProduct$/;"	classes	line:93
ExpPathNotClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpPathNotClass(className: Name.Class) extends ErrorProduct$/;"	classes	line:91
ExpStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpStatic(memberVar: Name.Member) extends ErrorProduct$/;"	classes	line:94
ExplicitTypeRequiredDueToCycle	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExplicitTypeRequiredDueToCycle(memName: String) extends ErrorProduct$/;"	classes	line:34
ExplicitTypeRequiredIfAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExplicitTypeRequiredIfAbstract(methodName: Name.Method) extends ErrorProduct$/;"	classes	line:51
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = LowerTlExpr$/;"	types	line:1123
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ParseTlExpr$/;"	types	line:1037
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ResolveTlExpr$/;"	types	line:1079
ExtendedAny	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedAny(any: Any) {$/;"	classes	line:60
ExtendedAnyPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedAnyPath(path: SPath) {$/;"	classes	line:1165
ExtendedBoolean	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedBoolean(bool: Boolean) {$/;"	classes	line:65
ExtendedC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedC[C](obj: C) {$/;"	classes	line:47
ExtendedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ExtendedClasses = new GuardedBy[List[(Ast.Lower.ExtendsDecl, List[SPath.Typed])]](gather)    $/;"	constants	line:284
ExtendedContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedContext(context: lathos.Context) {$/;"	classes	line:355
ExtendedInt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedInt(value: Int) {$/;"	classes	line:73
ExtendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class ExtendedInterval(inter: Interval, implicit val global: Global) {$/;"	classes	line:545
ExtendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedIterable[E](iterable: Iterable[E]) {$/;"	classes	line:90
ExtendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedList[E](list: List[E]) {$/;"	classes	line:117
ExtendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    case class ExtendedMap(m: Map) {$/;"	classes	line:37
ExtendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class ExtendedMethodVisitor(mvis: asm.MethodVisitor) {$/;"	classes	line:170
ExtendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedOption[E](option: Option[E]) {$/;"	classes	line:143
ExtendedOutput	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedOutput(out: lathos.Output) {$/;"	classes	line:424
ExtendedParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedParam(pat: Param[VSym]) {$/;"	classes	line:1149
ExtendedRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedRequirement(req: Requirement) {$/;"	classes	line:1172
ExtendedServer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedServer(server: lathos.LathosServer) {$/;"	classes	line:321
ExtendedString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedString(string: String) {$/;"	classes	line:80
ExtendedTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class ExtendedTypeRef(ty: Type) $/;"	classes	line:110
ExtendedTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            case class ExtendedTypedPath(path: SPath.Typed) {$/;"	classes	line:1158
ExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ExtendsArg extends Node$/;"	classes	line:393
ExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ExtendsDecl($/;"	classes	line:374
ExtendsNotEquiv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExtendsNotEquiv($/;"	classes	line:52
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:1046
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:1088
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = VarSymbol.Field$/;"	types	line:1132
Fact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^sealed trait Fact extends Product {$/;"	traits	line:7
FailedException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            case class FailedException() extends Exception$/;"	classes	line:766
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Field(owner: Owner, name: MN, ty: Ty) extends ResolveTlExpr {$/;"	classes	line:789
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    class Field($/;"	classes	line:120
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Field(base: Owner, f: Name.Member) extends Ref {$/;"	classes	line:32
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Field(base: SPath.Owner, sym: VarSymbol.Field) extends Typed {$/;"	classes	line:61
FieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldDecl($/;"	classes	line:315
FieldKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/FieldKind.scala	/^sealed abstract class FieldKind/;"	classes	line:14
FieldLikeSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^sealed trait FieldLikeSymbol extends BeanSymbol$/;"	traits	line:17
FieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldLvalue($/;"	classes	line:507
FileReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class FileReader(interFile: File, seq: PagedSeq[Char], off: Int) extends PagedSeqReader(seq, off) {$/;"	classes	line:440
Final	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val Final = Name.FinalLocal.toPath$/;"	constants	line:51
FinalLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val FinalLocal = Name.LocalVar("final")$/;"	constants	line:194
Foo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * Given a class Foo, the following class files are generated:$/;"	classes	line:27
Forward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    trait Forward extends Fact {$/;"	traits	line:18
Forward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    trait Forward[X] extends Rule[X] {$/;"	traits	line:47
ForwardKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    type ForwardKind = Class[_ <: Fact.Forward]$/;"	types	line:14
ForwardPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    sealed trait ForwardPaths extends Paths with Fact.Binary[Path.Ref, Path.Ref] {$/;"	traits	line:23
FragmentFile	/Users/niko/git/intervals-java/Harmonic/test.py	/^class FragmentFile(object):$/;"	class	line:210
GENERATEDJAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDJAVA=$(subst Gen.py,Gen.java,${GENERATEDPY})$/;"	macro	line:12
GENERATEDPY	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDPY=$(wildcard src\/harmonic\/compiler\/*Gen.py)$/;"	macro	line:11
Gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^case class Gather(global: Global) {$/;"	classes	line:12
GatherExtends	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^case class GatherExtends(global: Global) {$/;"	classes	line:23
GatherOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^case class GatherOverrides(global: Global) {$/;"	classes	line:12
GetEnd	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    val GetEnd = MethodId($/;"	constants	line:37
GetParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    val GetParent = MethodId($/;"	constants	line:25
GetStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    val GetStart = MethodId($/;"	constants	line:31
Ghost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Ghost(base: SPath.Typed, sym: GhostSymbol) extends SPath {$/;"	classes	line:74
Ghost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Ghost(name: Name.Member) extends MemberEntry {$/;"	classes	line:26
Ghost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghost.java	/^public @interface Ghost {$/;"	interface	line:10
GhostDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class GhostDecl($/;"	classes	line:300
Ghosts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghosts.java	/^public @interface Ghosts {$/;"	interface	line:14
Guard	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Guard = Type.Class(Name.GuardClass, List())$/;"	constants	line:50
GuardClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val GuardClass = Class(classOf[ch.ethz.intervals.guard.Guard])$/;"	constants	line:210
GuardInter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    sealed trait GuardInter extends Paths with Fact.Backward {$/;"	traits	line:35
GuardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val GuardPath = new GuardedBy[Path.Ref](elaborate)$/;"	constants	line:133
HPROFOPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:15
HPROFOPTS=-agentlib	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	targets	line:15
Harmonic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    sealed abstract class Harmonic(val op: Int) extends MethodKind$/;"	classes	line:13
HarmonicTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public HarmonicTask(String name) {$/;"	method	line:12
HarmonicTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^public abstract class HarmonicTask extends AbstractTask {$/;"	class	line:10
HarmonicTaskClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val HarmonicTaskClass = Class(classOf[harmonic.runtime.HarmonicTask])$/;"	constants	line:222
HasClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class HasClass(path: Path.Ref, cls: Name.Class) extends Fact.Backward $/;"	classes	line:110
HasType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class HasType(path: Path.Ref, ty: Type) extends Fact.Binary[Path.Ref, Type] {$/;"	classes	line:103
Hb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class Hb(left: Path.Ref, right: Path.Ref) extends ForwardPaths {$/;"	classes	line:50
Helper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^public class Helper {$/;"	class	line:6
HlLexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class HlLexical extends StdLexical with HlTokens {$/;"	classes	line:30
HlTokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    trait HlTokens extends StdTokens {$/;"	traits	line:24
IN_BLOCK	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val IN_BLOCK = 1$/;"	constants	line:729
ImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpThis(ty: Ty) extends ParseTlExpr {$/;"	classes	line:855
ImpVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpVoid(ty: Ty) extends ResolveTlExpr {$/;"	classes	line:850
Import	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    sealed abstract class Import$/;"	classes	line:48
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportAll($/;"	classes	line:160
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportAll(qualName: Name.Qual)$/;"	classes	line:49
ImportDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ImportDecl extends Node$/;"	classes	line:151
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportOne($/;"	classes	line:153
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportOne(qualName: Name.Qual, as: String)$/;"	classes	line:50
In	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    class In(env: Env, current: SPath) {$/;"	classes	line:21
InEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnv(env: Env) {$/;"	classes	line:363
InEnvStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnvStmt(env: Env, optStmts: Option[mutable.ListBuffer[out.Stmt]]) extends InEnv(env) {$/;"	classes	line:724
InScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    case class InScope($/;"	classes	line:251
Index	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Index(array: Path.Ref, index: Path.Ref) extends Ref {$/;"	classes	line:38
Index	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Index(array: SPath.Typed, index: SPath.Typed) extends Typed {$/;"	classes	line:100
InferredTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InferredTypeRef() extends OptionalParseTypeRef with OptionalResolveTypeRef {$/;"	classes	line:543
Init	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val Init = Member(ObjectClass, "Init") \/\/ ghost field "Init" defined in all objects$/;"	constants	line:202
InitMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InitMethod = Method(List("<init>"))$/;"	constants	line:247
InlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InlineInterval($/;"	classes	line:859
InlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val InlineInterval = Type.Class(Name.InlineIntervalClass, List())$/;"	constants	line:49
InlineIntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InlineIntervalClass = Class(classOf[ch.ethz.intervals.InlineInterval])$/;"	constants	line:214
InlineSubOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class InlineSubOf(child: Path.Ref, parent: Path.Ref) extends ChildParent {$/;"	classes	line:56
Instance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    class Instance($/;"	classes	line:17
InstanceField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class InstanceField(name: Name.Member) extends MemberEntry {$/;"	classes	line:18
IntConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class IntConstant($/;"	classes	line:424
Interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Interval = Type.Class(Name.IntervalClass, List())$/;"	constants	line:45
IntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val IntervalClass = Class(classOf[ch.ethz.intervals.Interval])$/;"	constants	line:212
IntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class IntervalDecl($/;"	classes	line:225
IntervalInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    class IntervalInfo($/;"	classes	line:13
Intrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^case class Intrinsic(global: Global) {$/;"	classes	line:6
IntrinsicControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^public class IntrinsicControlFlow {$/;"	class	line:5
IntrinsicMathGen	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^public class IntrinsicMathGen {$/;"	class	line:4
InvalidMetaData	/Users/niko/git/intervals-java/Harmonic/test.py	/^class InvalidMetaData(Exception):$/;"	class	line:187
IoError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class IoError(err: java.io.IOError) extends ErrorProduct$/;"	classes	line:78
JARFILES	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARFILES=$(wildcard lib\/*.jar)$/;"	macro	line:9
JARPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARPATH=$(subst .jar ,.jar:,${JARFILES})$/;"	macro	line:10
JAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVA=java$/;"	macro	line:3
JAVAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVAC=javac$/;"	macro	line:4
JPROFILEROPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	macro	line:16
JPROFILEROPTS=-javaagent	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	targets	line:16
Java	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/FieldKind.scala	/^    case class Java($/;"	classes	line:6
Java	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    case class Java($/;"	classes	line:17
JavaOpcode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    sealed abstract class JavaOpcode(val op: Int)$/;"	classes	line:7
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.GuardInter(guardPath, interPath) = fact.asInstanceOf[K.GuardInter]$/;"	constants	line:574
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.HasType(p, ty1) = hasType$/;"	constants	line:332
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.InlineSubOf(pc, pp) = inlineSubOf$/;"	constants	line:444
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PathEq(p, q) = eq$/;"	constants	line:209
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PathEq(p, q) = factEq$/;"	constants	line:298
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PathExists(p) = eq$/;"	constants	line:195
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PermitsRd(g, i) = fact$/;"	constants	line:479
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PermitsRd(g, i) = fact$/;"	constants	line:493
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PermitsRd(g, i) = fact$/;"	constants	line:508
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.PermitsWr(g, i) = fact$/;"	constants	line:525
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.SubOf(pc, pp) = subOf$/;"	constants	line:460
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeEq(t1, t2) = fact$/;"	constants	line:427
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeEq(ty1, ty2) = eq$/;"	constants	line:263
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeExists(ty) = fact$/;"	constants	line:277
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeExists(ty) = fact$/;"	constants	line:299
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeUb(t1, t2) = bnd1$/;"	constants	line:410
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeUb(t1, t2) = ub$/;"	constants	line:392
K	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val K.TypeUb(t1, t2) = ub1$/;"	constants	line:370
Kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    type Kind = Class[_ <: Fact]$/;"	types	line:13
LIBDIR	/Users/niko/git/intervals-java/Harmonic/Makefile	/^LIBDIR=$(CURDIR)\/lib$/;"	macro	line:14
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:1045
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:1087
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = VarSymbol.Local$/;"	types	line:1131
List	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val List(K.PathEq(p, q), K.Paths(l, r)) = facts$/;"	constants	line:149
List	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val List(K.Paths(l, r)) = facts$/;"	constants	line:54
List	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val List(K.Types(l, r)) = facts$/;"	constants	line:88
Literal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Literal(obj: Object, ty: Ty) extends ResolveTlExpr {$/;"	classes	line:755
LoadedData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val LoadedData = new GuardedBy[Data](header)$/;"	constants	line:45
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    class Local($/;"	classes	line:148
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Local(v: Name.LocalVar) extends Ref {$/;"	classes	line:20
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Local(sym: VarSymbol.Local) extends Typed {$/;"	classes	line:42
LocalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class LocalName(name: Name.LocalVar) extends VarName {$/;"	classes	line:1017
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class LocalVar($/;"	classes	line:166
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class LocalVar(name: Name.LocalVar) extends Entry {$/;"	classes	line:29
LockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val LockClass = Class(classOf[ch.ethz.intervals.Lock])$/;"	constants	line:218
Locks	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class Locks(inter: Path.Ref, lock: Path.Ref) extends Paths with Fact.Forward {$/;"	classes	line:59
Lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^case class Lower(global: Global) {$/;"	classes	line:17
LowerMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^abstract class LowerMember($/;"	classes	line:9
LowerMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LowerMembers = new GuardedBy[List[LowerMember]](create)$/;"	constants	line:222
LowerStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerStmt extends ResolveStmt with TypedNode$/;"	traits	line:689
LowerTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerTlExpr extends ResolveTlExpr with LowerStmt with TypedNode$/;"	traits	line:699
LoweredMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LoweredMethods = new GuardedBy[List[(MethodSymbol, Ast.Lower.MethodDecl)]](merge)$/;"	constants	line:246
LoweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val LoweredSource = new GuardedBy[Ast.Lower.ClassDecl](merge)$/;"	constants	line:249
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = ElemLvalue$/;"	types	line:1124
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = TreeLvalue$/;"	types	line:1038
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Lvalue = TreeLvalue$/;"	types	line:1080
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = (MethodSymbol, MethodSignature[Pattern.Anon])$/;"	types	line:1134
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:1048
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:1090
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = MemberName $/;"	types	line:1114
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = RelName $/;"	types	line:1028
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = UnloweredMemberName $/;"	types	line:1070
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:1071
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:1115
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = RelDot$/;"	types	line:1029
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:1072
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:1116
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = RelBase$/;"	types	line:1030
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = MethodSymbol$/;"	types	line:1133
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:1047
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:1089
Map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    type Map = scala.collection.immutable.Map[String, Entry]$/;"	types	line:33
Member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Member($/;"	classes	line:147
Member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Member(path: Path.Ref, typeVar: Name.Member) extends Type {$/;"	classes	line:13
MemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class MemberDecl extends Node {$/;"	classes	line:144
MemberEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class MemberEntry extends Entry {$/;"	classes	line:9
MemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class MemberName(name: Name.Member) extends VarName with UnloweredMemberName {$/;"	classes	line:1007
Memories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memories.scala	/^case class Memories($/;"	classes	line:3
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Method($/;"	classes	line:128
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val Method = Name.MethodLocal.toPath$/;"	constants	line:50
MethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodCall(rcvr: Rcvr, name: Name.Method, args: List[NE], data: MCallData)$/;"	classes	line:808
MethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodDecl($/;"	classes	line:241
MethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val MethodGroups = new GuardedBy[List[MethodGroup]](gather)$/;"	constants	line:281
MethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    class MethodGroups(env: Env) {$/;"	classes	line:49
MethodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^case class MethodId($/;"	classes	line:5
MethodKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^sealed abstract class MethodKind/;"	classes	line:31
MethodLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MethodLocal = Name.LocalVar("method")$/;"	constants	line:190
MethodResolutionOrder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^case class MethodResolutionOrder(global: Global) {$/;"	classes	line:12
MethodReturn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodReturn(value: NE) extends LowerStmt {$/;"	classes	line:873
MethodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^case class MethodSignature[P <: Pattern.Any]($/;"	classes	line:3
MockObject	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockObject.scala	/^abstract class MockObject {$/;"	classes	line:5
MockRule	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class MockRule($/;"	classes	line:567
Mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	classes	line:8
Mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val Mro = new GuardedBy[List[ClassSymbol]](cmro)$/;"	constants	line:60
Mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val Mro = new GuardedBy[List[ClassSymbol]](cmro)$/;"	constants	line:191
MultipleOverridesInSameClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MultipleOverridesInSameClass($/;"	classes	line:69
MustBeSubtype	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustBeSubtype(subTy: Type, supTy: Type) extends ErrorProduct$/;"	classes	line:42
MustHaveClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustHaveClass(path: SPath, expClassName: Name.Class) extends ErrorProduct$/;"	classes	line:43
MustHaveType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustHaveType(path: SPath.Typed, expTy: Type) extends ErrorProduct {$/;"	classes	line:44
MustResolveAmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustResolveAmbiguousInheritance($/;"	classes	line:63
Mutable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^public @interface Mutable {$/;"	interface	line:18
MutableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MutableClass = Class(classOf[harmonic.lang.Mutable])$/;"	constants	line:231
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ParseTlExpr$/;"	types	line:1034
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ResolveTlExpr$/;"	types	line:1076
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = TypedPath$/;"	types	line:1120
Name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Name extends Node$/;"	classes	line:984
NewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewCtor(tref: TR, args: List[NE], data: MCallData, ty: TyClass) extends LowerTlExpr {$/;"	classes	line:833
NoApplicableMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoApplicableMethods(argTys: List[Type]) extends ErrorProduct$/;"	classes	line:38
NoGhostHere	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoGhostHere(path: SPath) extends ErrorProduct$/;"	classes	line:33
NoReturnHere	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoReturnHere() extends ErrorProduct$/;"	classes	line:41
NoSuchField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchField(name: Name.Member) extends ErrorProduct$/;"	classes	line:86
NoSuchMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMember(ty: Type, uName: Name.UnloweredMember) extends ErrorProduct$/;"	classes	line:84
NoSuchMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMethod(ty: Type, name: Name.Method) extends ErrorProduct$/;"	classes	line:85
NoSuchMethodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMethodId(methodId: MethodId) extends ErrorProduct$/;"	classes	line:87
NoSuchVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchVar(localName: String) extends ErrorProduct$/;"	classes	line:92
NoSuperClassImplements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuperClassImplements(mthdName: Name.Method) extends ErrorProduct$/;"	classes	line:35
Node	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Node extends Positional with Product with Page {$/;"	classes	line:891
Node	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    trait Node extends DebugPage$/;"	traits	line:119
NotExecutable	/Users/niko/git/intervals-java/Harmonic/test.py	/^class NotExecutable(Exception):$/;"	class	line:193
NotField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotField(name: Name.Member) extends ErrorProduct$/;"	classes	line:97
NotInStaticScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotInStaticScope(memberVar: Name.Member) extends ErrorProduct$/;"	classes	line:95
NotLegalInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotLegalInPathArg(name: Name.Var) extends ErrorProduct$/;"	classes	line:88
NotLegalInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotLegalInTypeArg(name: Name.Var) extends ErrorProduct$/;"	classes	line:89
NotMarkedOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotMarkedOverride($/;"	classes	line:74
NotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotOverride(className: Name.Class, methodName: Name.Method) extends ErrorProduct$/;"	classes	line:47
NotTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotTypeVar(entry: SymTab.MemberEntry) extends ErrorProduct$/;"	classes	line:98
Null	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Null(ty: Ty) extends LowerTlExpr {$/;"	classes	line:845
NullType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NullType() extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:578
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalParseTypeRef$/;"	types	line:1032
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalResolveTypeRef$/;"	types	line:1074
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = TypeRef$/;"	types	line:1118
Object	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Object = Type.Class(Name.ObjectClass, List())$/;"	constants	line:42
ObjectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ObjectClass = Class(classOf[java.lang.Object])$/;"	constants	line:200
OfType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/OfType.java	/^public @interface OfType {$/;"	interface	line:16
Omega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    class Omega($/;"	classes	line:198
Operator	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        case class Operator(chars: String) extends Token {$/;"	classes	line:25
OptionalParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class OptionalParseTypeRef extends Node$/;"	classes	line:537
OptionalResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait OptionalResolveTypeRef extends Node$/;"	traits	line:540
OverrideClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val OverrideClass = Class(classOf[java.lang.Override])$/;"	constants	line:232
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ParseOwner$/;"	types	line:1042
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ResolveOwner \/\/ No longer relevant.$/;"	types	line:1128
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ResolveOwner$/;"	types	line:1084
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract trait Owner$/;"	traits	line:9
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    sealed trait Owner {$/;"	traits	line:22
Package	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Package extends Qual {$/;"	classes	line:30
PackageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class PackageName(name: Name.Package) extends Name {$/;"	classes	line:988
Param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Param[+S <: VSym] extends AstPattern[S] {$/;"	classes	line:437
ParameterAdapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ParameterAdapter($/;"	classes	line:1646
ParseError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ParseError(msg: String) extends ErrorProduct$/;"	classes	line:48
ParseOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseOwner extends ParseRcvr$/;"	traits	line:692
ParsePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParsePath extends ResolveTlExpr$/;"	traits	line:615
ParseRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseRcvr extends Node$/;"	traits	line:691
ParseStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseStmt extends Node {$/;"	traits	line:679
ParseTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTlExpr extends ParseRcvr with ParseOwner with ParseStmt$/;"	traits	line:693
ParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTypeRef extends OptionalParseTypeRef$/;"	traits	line:549
PathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class PathArg(name: Name.Member, rel: PcRel, path: Path.Ref) extends Arg {$/;"	classes	line:31
PathBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathBase(name: VN, sym: VSym) extends ParsePath {$/;"	classes	line:622
PathBaseCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathBaseCall(className: Name.Class, name: Name.Method, args: List[AnyPathNode], ty: Ty) extends ParsePath {$/;"	classes	line:627
PathCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathCall(owner: AnyPathNode, name: Name.Method, args: List[AnyPathNode], ty: Ty) extends ParsePath {$/;"	classes	line:640
PathDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathDot(owner: AnyPathNode, name: MN, ty: Ty) extends ParsePath {$/;"	classes	line:635
PathEq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class PathEq(left: Path.Ref, right: Path.Ref) extends ForwardPaths {$/;"	classes	line:47
PathEqualityRuleBackward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class PathEqualityRuleBackward($/;"	classes	line:166
PathEqualityRuleForward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class PathEqualityRuleForward($/;"	classes	line:142
PathErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathErr(name: String) extends ParsePath {$/;"	classes	line:617
PathExists	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    case class PathExists(path: Path.Ref) extends Fact.Forward$/;"	classes	line:8
PathExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathExtendsArg(path: TyPathNode) extends ExtendsArg {$/;"	classes	line:398
PathFactRule	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class PathFactRule($/;"	classes	line:47
PathRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathRequirement($/;"	classes	line:287
PathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathType(path: AnyPathNode) extends ParseTypeRef {$/;"	classes	line:551
PathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathTypeArg(name: MN, rel: PcRel, path: AnyPathNode) extends TypeArg {$/;"	classes	line:604
Paths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    sealed trait Paths {$/;"	traits	line:13
PcBackwardRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed trait PcBackwardRel extends PcRel {$/;"	traits	line:21
PcForwardRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed trait PcForwardRel extends PcRel {$/;"	traits	line:15
PcGuardRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed trait PcGuardRel extends PcBackwardRel {$/;"	traits	line:55
PcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcRel {$/;"	classes	line:3
PcTransRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed trait PcTransRel extends PcForwardRel$/;"	traits	line:19
PcWcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed trait PcWcRel extends PcRel {$/;"	traits	line:11
PermitsRd	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class PermitsRd(guard: Path.Ref, inter: Path.Ref) extends GuardInter {$/;"	classes	line:68
PermitsWr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class PermitsWr(guard: Path.Ref, inter: Path.Ref) extends GuardInter {$/;"	classes	line:65
Point	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Point = Type.Class(Name.PointClass, List())$/;"	constants	line:47
PointClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val PointClass = Class(classOf[ch.ethz.intervals.Point])$/;"	constants	line:216
PrettyPrinter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^abstract class PrettyPrinter {$/;"	classes	line:5
Qual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Qual extends Any {$/;"	classes	line:11
QualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class QualName extends Name$/;"	classes	line:986
QualStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class QualStatic(memberVar: Name.Member) extends ErrorProduct$/;"	classes	line:90
RacyGuard	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val RacyGuard = Class(classOf[ch.ethz.intervals.guard.RacyGuard])$/;"	constants	line:219
RacyGuard	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val RacyGuard = Field(Static, Name.Member(Name.RacyGuard, "racy"))$/;"	constants	line:52
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ParseRcvr$/;"	types	line:1041
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ResolveRcvr$/;"	types	line:1083
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = Super$/;"	types	line:1127
ReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ReassignVarLvalue($/;"	classes	line:496
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Ref extends Owner {$/;"	classes	line:14
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait Ref extends Any {$/;"	traits	line:49
RefactorTypeException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RefactorTypeException(str: String) extends RuntimeException$/;"	classes	line:1189
ReflectiveBackward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    trait ReflectiveBackward[X] extends Backward[X] {$/;"	traits	line:80
ReflectiveForward	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    trait ReflectiveForward[X] extends Forward[X] {$/;"	traits	line:54
RelBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelBase(nm: String) extends RelName {$/;"	classes	line:113
RelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDecl($/;"	classes	line:337
RelDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDot(context: RelName, component: String) extends RelName {$/;"	classes	line:121
RelName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class RelName extends QualName {$/;"	classes	line:104
Requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    abstract class Requirement extends Node$/;"	classes	line:272
Requirements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val Requirements = new GuardedBy[List[inference.Fact]](elaborate)$/;"	constants	line:89
Requires	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^public @interface Requires {$/;"	interface	line:13
Resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^abstract class Resolve(global: Global, compUnit: in.CompUnit) {$/;"	classes	line:20
ResolveBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveBlockParam(scope0: InScope, inParam: in.Param[Unit])$/;"	classes	line:151
ResolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^case class ResolveBody(global: Global, compUnit: in.CompUnit) $/;"	classes	line:26
ResolveClassParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveClassParams(className: Name.Class, scope0: InScope, inParam: in.Param[Unit])$/;"	classes	line:122
ResolveHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^case class ResolveHeader(global: Global, compUnit: in.CompUnit) $/;"	classes	line:49
ResolveLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveLvalues(var scope: InScope, inLvalues: List[in.Lvalue]) {$/;"	classes	line:156
ResolveMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveMethodParams(scope0: InScope, inParams: List[in.Param[Unit]])$/;"	classes	line:138
ResolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveOwner extends ParseOwner with ResolveRcvr$/;"	traits	line:696
ResolveParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    abstract class ResolveParams(var scope: InScope, inParams: List[in.Param[Unit]]) {$/;"	classes	line:94
ResolvePathFinalResult	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        sealed abstract class ResolvePathFinalResult extends ResolvePathResult$/;"	classes	line:356
ResolvePathResult	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        sealed abstract class ResolvePathResult$/;"	classes	line:354
ResolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveRcvr extends ParseRcvr$/;"	traits	line:695
ResolveStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveStmt extends ParseStmt$/;"	traits	line:687
ResolveTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTlExpr extends ParseTlExpr with ResolveOwner with ResolveStmt$/;"	traits	line:697
ResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTypeRef extends OptionalResolveTypeRef$/;"	traits	line:566
ResolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val ResolvedSource = new GuardedBy[Ast.Resolve.ClassDecl](body)$/;"	constants	line:196
ResolvedToClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToClass(className: Name.Class) extends ResolvePathFinalResult$/;"	classes	line:357
ResolvedToList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToList(names: List[String]) extends ResolvePathResult$/;"	classes	line:355
ResolvedToPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        case class ResolvedToPath(path: out.AnyPathNode) extends ResolvePathFinalResult$/;"	classes	line:358
Results	/Users/niko/git/intervals-java/Harmonic/test.py	/^class Results(object):$/;"	class	line:393
Return	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^    public Return(Object value) {$/;"	method	line:11
Return	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^public class Return extends ControlFlowException {$/;"	class	line:6
ReturnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ReturnClass = Class(classOf[harmonic.runtime.Return])$/;"	constants	line:244
ReturnWithAndWithoutValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ReturnWithAndWithoutValue() extends ErrorProduct$/;"	classes	line:49
Rhs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    trait Rhs extends Node {$/;"	traits	line:141
RoInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val RoInterval = Type.Class(Name.RoIntervalClass, List())$/;"	constants	line:44
RoIntervalClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val RoIntervalClass = Class(classOf[ch.ethz.intervals.RoInterval])$/;"	constants	line:211
RoLockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val RoLockClass = Class(classOf[ch.ethz.intervals.RoLock])$/;"	constants	line:217
RoPoint	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val RoPoint = Type.Class(Name.RoPointClass, List())$/;"	constants	line:46
RoPointClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val RoPointClass = Class(classOf[ch.ethz.intervals.RoPoint])$/;"	constants	line:215
Rule	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^sealed trait Rule[X]$/;"	traits	line:6
SBT	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SBT=${JAVA} -Dsbt.log.noformat=true -Xmx256M -jar sbt-launch-0.7.0.jar$/;"	macro	line:5
SCALA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALA=scala$/;"	macro	line:8
SCALAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALAC=scalac -make:changed $/;"	macro	line:7
SPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^sealed trait SPath {$/;"	traits	line:16
STDLIB	/Users/niko/git/intervals-java/Harmonic/Makefile	/^STDLIB=java_standard_library.jar$/;"	macro	line:18
ScalaIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        class ScalaIterable(value: Iterable[_]) extends DebugPage {$/;"	classes	line:220
ScalaPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        class ScalaPair(value: (Any, Any)) extends ScalaProduct(value) {$/;"	classes	line:260
ScalaProduct	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        class ScalaProduct(value: Product) extends DebugPage {$/;"	classes	line:241
Set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    case class Set(mods: Int) {$/;"	classes	line:17
ShadowedClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedClassParam(name: String) extends ErrorProduct$/;"	classes	line:79
ShadowedLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedLocalVar(name: String) extends ErrorProduct$/;"	classes	line:81
ShadowedMethodParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedMethodParam(name: String) extends ErrorProduct$/;"	classes	line:80
State	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    class State($/;"	classes	line:51
StatementVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class StatementVisitor($/;"	classes	line:731
Static	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Static(name: Name.Class) extends ResolveOwner with ResolveRcvr {$/;"	classes	line:802
StaticField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class StaticField(name: Name.Member) extends MemberEntry$/;"	classes	line:22
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = LowerStmt$/;"	types	line:1122
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ParseStmt$/;"	types	line:1036
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ResolveStmt$/;"	types	line:1078
SubOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class SubOf(child: Path.Ref, parent: Path.Ref) extends ChildParent {$/;"	classes	line:53
Subpackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    final case class Subpackage($/;"	classes	line:43
Super	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Super(ty: Ty) extends ResolveRcvr {$/;"	classes	line:798
SuperClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val SuperClassNames = new GuardedBy[List[Name.Class]](header)$/;"	constants	line:183
SuperTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val SuperTypes = new GuardedBy[List[Type.Class]](create)$/;"	constants	line:205
Sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    private[this] val Sym = new GuardedBy[VarSymbol.Field](symCreate)$/;"	constants	line:78
Sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val Sym = new GuardedBy[MethodSymbol](symCreate)$/;"	constants	line:109
SymbolSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class SymbolSummary($/;"	classes	line:613
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ParseTypeRef$/;"	types	line:1033
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ResolveTypeRef$/;"	types	line:1075
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = TypeRef$/;"	types	line:1119
TcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^sealed abstract class TcRel {$/;"	classes	line:3
Technique	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    type Technique = (Path.Ref => Option[Object])$/;"	types	line:22
This	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val This = Name.ThisLocal.toPath$/;"	constants	line:49
ThisInit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val ThisInit = This \/ Name.Init$/;"	constants	line:53
ThisLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ThisLocal = Name.LocalVar("this")$/;"	constants	line:186
ThisWr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val ThisWr = This \/ Name.Wr$/;"	constants	line:54
Tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    type Tokens = StdLexical$/;"	types	line:27
Tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    type Tokens = StdTokens$/;"	types	line:54
Top	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Top = Object$/;"	constants	line:54
TreeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TreeLvalue extends AstPattern[VSym]$/;"	classes	line:466
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Tuple(exprs: List[Expr]) extends ResolveTlExpr {$/;"	classes	line:701
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Tuple(paths: List[Ref]) extends Ref {$/;"	classes	line:41
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Tuple(patterns: List[Pattern.Ref]) extends Ref with AnyTuple {$/;"	classes	line:60
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    case class Tuple(paths: List[Typed]) extends Typed {$/;"	classes	line:118
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Tuple(typeRefs: List[Type]) extends Type {$/;"	classes	line:21
TupleAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TupleAstPattern[+S <: VSym] extends AstPattern[S] {$/;"	traits	line:416
TupleExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleExtendsArg(args: List[ExtendsArg]) extends ExtendsArg {$/;"	classes	line:394
TupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleLvalue($/;"	classes	line:468
TupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleParam[+S <: VSym]($/;"	classes	line:441
TupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleType(types: List[TR]) extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:582
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Type$/;"	types	line:1135
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:1049
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:1091
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Type.Class$/;"	types	line:1136
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:1050
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:1092
TyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyPathNode = ParsePath$/;"	types	line:1040
TyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyPathNode = ParsePath$/;"	types	line:1082
TyPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyPathNode = TypedPath$/;"	types	line:1126
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Type.Tuple$/;"	types	line:1137
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:1051
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:1093
Type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val Type.Class(nm, args) = ty$/;"	constants	line:167
Type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Type(name: Name.Member) extends MemberEntry {$/;"	classes	line:23
Type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^sealed abstract class Type {$/;"	classes	line:6
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TypeArg extends Node {$/;"	classes	line:592
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class TypeArg(name: Name.Member, rel: TcRel, ty: Type) extends Arg {$/;"	classes	line:34
TypeEq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class TypeEq(left: Type, right: Type) extends Types {$/;"	classes	line:88
TypeExists	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    case class TypeExists(ty: Type) extends Fact.Forward$/;"	classes	line:9
TypeFactRule	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class TypeFactRule($/;"	classes	line:81
TypeNotFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class TypeNotFinal(ty: Type) extends ErrorProduct$/;"	classes	line:39
TypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeRef(ty: Type) extends Node {$/;"	classes	line:527
TypeRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeRequirement($/;"	classes	line:274
TypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeTypeArg(name: MN, rel: TcRel, typeRef: TR) extends TypeArg {$/;"	classes	line:597
TypeUb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    final case class TypeUb(sub: Type, sup: Type) extends Types {$/;"	classes	line:93
TypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeVar(path: AnyPathNode, typeVar: MN) extends ResolveTypeRef {$/;"	classes	line:568
Typed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    sealed abstract class Typed extends SPath with Owner {$/;"	classes	line:33
TypedNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TypedNode extends Node {$/;"	traits	line:94
TypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypedPath(path: SPath.Typed) extends TypedNode with LowerTlExpr {$/;"	classes	line:652
Types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^    sealed trait Types extends Fact.Binary[Type, Type] {$/;"	traits	line:77
UnloweredMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract trait UnloweredMember extends Any {$/;"	traits	line:176
UnloweredMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait UnloweredMemberName extends Name {$/;"	traits	line:1002
Unscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Unscheduled.java	/^public @interface Unscheduled {$/;"	interface	line:13
UnscheduledClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val UnscheduledClass = Class(classOf[harmonic.lang.Unscheduled])$/;"	constants	line:233
UsageError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        case class UsageError(val msg: String) extends RuntimeException$/;"	classes	line:22
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = RelName$/;"	types	line:1031
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:1073
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:1117
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:1044
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:1086
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = VarSymbol.Any$/;"	types	line:1130
ValueMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ValueMethod = Method(List("value"))$/;"	constants	line:241
ValuePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class ValuePath {$/;"	classes	line:416
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Var extends Any {$/;"	classes	line:139
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Var(name: Name.LocalVar, ty: Type) extends Ref with AnyVar {$/;"	classes	line:54
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^public @interface Var {$/;"	interface	line:3
VarAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarAstPattern[+S <: VSym] extends AstPattern[S] {$/;"	traits	line:430
VarMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val VarMembers = new GuardedBy[List[SymTab.Entry]](header)$/;"	constants	line:186
VarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarName extends Name {$/;"	traits	line:998
VarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarParam[+S <: VSym]($/;"	classes	line:448
VarSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^abstract class VarSymbol[+N <: Name.Var] extends Symbol with Page {$/;"	classes	line:171
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Void = Type.Class(Name.VoidClass, List())$/;"	constants	line:43
VoidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val VoidClass = Class(classOf[java.lang.Void])$/;"	constants	line:207
W	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class W(i: Int) extends Fact.Forward$/;"	classes	line:16
Wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val Wr = Member(ObjectClass, "Wr")     \/\/ ghost field "Wr" defined in all objects$/;"	constants	line:201
X	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class X(i: Int) extends Fact.Forward$/;"	classes	line:17
Xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    case class Xtra($/;"	classes	line:53
Y	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class Y(i: Int) extends Fact.Forward$/;"	classes	line:18
Z	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    case class Z(i: Int) extends Fact.Forward$/;"	classes	line:19
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, filenm):$/;"	member	line:395
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, fname):$/;"	member	line:211
_execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _execute():$/;"	function	line:483
_run_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _run_test(filenm, experrors):$/;"	function	line:579
absBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val absBody = lowerAbstractableBody(env, mdecl.body)$/;"	constants	line:115
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val accessMap = new AccessMap(csym.name)$/;"	constants	line:1894
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val accessMap = newAccessMap(Nil)$/;"	constants	line:1833
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val accessMap = newAccessMap(Nil)$/;"	constants	line:1855
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val accessMap = newAccessMap(stmts)$/;"	constants	line:1845
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val accessMap = new AccessMap(csym.name)$/;"	constants	line:1821
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(className)$/;"	constants	line:1716
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2025
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2080
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:2195
accessSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def accessSyms = readSyms ++ writeSyms$/;"	methods	line:630
accessorGetDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorGetDesc(fieldTy: Type) = {$/;"	methods	line:334
accessorName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorName(memberName: Name.Member) = {$/;"	methods	line:330
accessorSetDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def accessorSetDesc(fieldTy: Type) = {$/;"	methods	line:338
adaptTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def adaptTo(tarPatterns: List[Pattern.Ref], stmtVisitor: StatementVisitor) {$/;"	methods	line:1668
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:2027
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:2083
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, overriddenSig.parameterPatterns)$/;"	constants	line:1725
add	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def add() = {$/;"	methods	line:295
add	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def add(state: State, fact: Fact.Forward) = {$/;"	methods	line:131
addAlpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def addAlpha(fact: Fact.Forward): Boolean = {$/;"	methods	line:88
addAlpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def addAlpha(fact: Fact.Forward): Boolean$/;"	methods	line:11
addAlpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    private[this] def addAlpha(kind: Fact.ForwardKind): Alpha = {$/;"	methods	line:241
addAstReq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^    def addAstReq(env: Env, req: in.Requirement) = env.plusFact(req.toFact)$/;"	methods	line:28
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def addBeta(factKinds: List[Fact.ForwardKind], factList: List[Fact.Forward]): Boolean = {$/;"	methods	line:109
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def addBeta(factKinds: List[Fact.ForwardKind], factList: List[Fact.Forward]): Boolean$/;"	methods	line:12
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def addBeta(beta: Beta) = ()$/;"	methods	line:148
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def addBeta(beta: Beta): Unit$/;"	methods	line:143
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        override def addBeta(beta: Beta) = (betas += beta)$/;"	methods	line:166
addBeta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    private[this] def addBeta(kinds: List[Fact.ForwardKind]): Beta = {$/;"	methods	line:249
addBoxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addBoxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:593
addContent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def addContent(content: PageContent) = throw new UnsupportedOperationException()$/;"	methods	line:915
addContent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def addContent(content: PageContent) = throw new UnsupportedOperationException()$/;"	methods	line:192
addContent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def addContent(content: lathos.PageContent) = synchronized {$/;"	methods	line:173
addContent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    override def addContent(content: lathos.PageContent) = {$/;"	methods	line:68
addControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addControlFlow(inter: Interval) = {$/;"	methods	line:107
addCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def addCsym[C <: ClassSymbol](cls: C): C = synchronized {$/;"	methods	line:134
addDefaultRenderers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def addDefaultRenderers = {$/;"	methods	line:322
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(entry: SymTab.Entry) = {$/;"	methods	line:254
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:126
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:140
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String): InScope$/;"	methods	line:95
addExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def addExtendsDecl($/;"	methods	line:39
addFor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def addFor(subst: TypedSubst)(csym: ClassFromSource): Unit = {$/;"	methods	line:85
addFresh	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addFresh($/;"	methods	line:605
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(AsyncInterval from, AsyncInterval to) {$/;"	method	line:7
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(AsyncInterval from, Point to) {$/;"	method	line:15
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(Point from, AsyncInterval to) {$/;"	method	line:11
addHb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^    public static void addHb(Point from, Point to) {$/;"	method	line:19
addInstanceFields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addInstanceFields($/;"	methods	line:1769
addIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def addIntrinsic(msym: MethodSymbol) {$/;"	methods	line:113
addMathTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addMathTo(inter: Interval) = {$/;"	methods	line:65
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def addMsym(msym: MethodSymbol) = log.indent("addMysm(", msym, ")") {$/;"	methods	line:69
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def addMsym(msym: MethodSymbol) = msymsBuffer += msym$/;"	methods	line:28
addNullStmtToBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addNullStmtToBody(body: out.Body) = withPosOf(body, {$/;"	methods	line:82
addNullStmtToStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addNullStmtToStmts(stmts: List[out.Stmt]) = {$/;"	methods	line:74
addOmega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def addOmega(fact: Fact.Backward): Boolean = {$/;"	methods	line:130
addOmega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def addOmega(fact: Fact.Backward): Boolean$/;"	methods	line:13
addOmega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    private[this] def addOmega(kind: Fact.BackwardKind): Omega = {$/;"	methods	line:267
addOverrideSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addOverrideSubst($/;"	methods	line:629
addPatExprToSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addPatExprToSubst(subst: Subst, pair: (Pattern.Ref, in.Expr)): Subst = {$/;"	methods	line:277
addPatPathToSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def addPatPathToSubst(subst: Subst, pair: (Pattern.Ref, Path.Ref)): Subst = {$/;"	methods	line:256
addRule	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    def addRule(rule: Rule[X]) = {$/;"	methods	line:275
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addSym(sym: VarSymbol.Any, accessPath: AccessPath) {$/;"	methods	line:567
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Field) = env$/;"	methods	line:170
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Local) = env.plusLocalVar(sym)$/;"	methods	line:179
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def addSym(env: Env, sym: VarSymbol.Local) = env.plusLocalVar(sym)$/;"	methods	line:187
addSymbolsDeclaredIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addSymbolsDeclaredIn($/;"	methods	line:1787
addToLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def addToLine(line: lathos.Line, value: Object): Boolean = {$/;"	methods	line:270
addUnboxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addUnboxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:571
addVarMembersFromMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        def addVarMembersFromMember(varMembers: List[SymTab.Entry], decl: in.MemberDecl): List[SymTab.Entry] = {$/;"	methods	line:69
addVarMembersFromParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        def addVarMembersFromParam(varMembers: List[SymTab.Entry], param: in.Param[Unit]): List[SymTab.Entry] = {$/;"	methods	line:80
add_frag_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_frag_exp_error(self, rel, experror):$/;"	function	line:298
add_header_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_header_exp_error(self, rel, experror):$/;"	function	line:280
add_remove_files	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def add_remove_files(self, fnames):$/;"	member	line:404
add_to_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_fragment(self, line):$/;"	function	line:295
add_to_header	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_header(self, line):$/;"	function	line:277
add_to_trailer	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_trailer(self, line):$/;"	function	line:284
add_trailer_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_trailer_exp_error(self, res, experror):$/;"	function	line:287
addedMem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val addedMem = addedFactSet.asInstanceOf[InternalFactSet[X]].resolvedMemories$/;"	constants	line:40
addl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^            override def addl(fmt: String, args: Any*) {$/;"	methods	line:43
addl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def addl(fmt: String, args: Any*) {$/;"	methods	line:56
addl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def addl(fmt: String, args: Any*): Unit$/;"	methods	line:20
afterLast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def afterLast(c: Char) = {$/;"	methods	line:81
all	/Users/niko/git/intervals-java/Harmonic/Makefile	/^all: compile$/;"	targets	line:20
allEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val allEntries = mro.flatMap { mrosym => $/;"	constants	line:289
allFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val allFacts = queryAll(kind)$/;"	constants	line:87
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allFieldSymbols: List[VarSymbol.Field] = LoadedData.join.allFieldSymbols$/;"	methods	line:52
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allFieldSymbols = AllFieldSymbols.v$/;"	methods	line:255
allFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allFieldSymbols: List[VarSymbol.Field]$/;"	methods	line:103
allGhostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allGhostSymbols: List[GhostSymbol] = LoadedData.join.allGhostSymbols$/;"	methods	line:54
allGhostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allGhostSymbols = AllGhostSymbols.v$/;"	methods	line:227
allGhostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allGhostSymbols: List[GhostSymbol]$/;"	methods	line:109
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def allGroups = groups.valuesIterator.toList.flatten$/;"	methods	line:78
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val allGroups = methodGroups.allGroups$/;"	constants	line:44
allImports	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    val allImports = ($/;"	constants	line:76
allInheritedFieldSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def allInheritedFieldSymbols(csym: ClassSymbol): Iterable[VarSymbol.Field] = {$/;"	methods	line:1765
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allIntervalSymbols: List[VarSymbol.Field] = LoadedData.join.allIntervalSymbols$/;"	methods	line:53
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allIntervalSymbols = AllIntervalSymbols.v$/;"	methods	line:258
allIntervalSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allIntervalSymbols: List[VarSymbol.Field]$/;"	methods	line:106
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def allMethodSymbols: List[MethodSymbol] = LoadedData.join.allMethodSymbols$/;"	methods	line:51
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def allMethodSymbols: List[MethodSymbol] = loweredMethods.map(_._1)$/;"	methods	line:252
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allMethodSymbols: List[MethodSymbol]$/;"	methods	line:100
allOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allOverrides = AllOverrides.v$/;"	methods	line:120
alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def alpha(factKind: Fact.ForwardKind): Set[Fact.Forward] = {$/;"	methods	line:76
alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def alpha(factKind: Fact.ForwardKind): Set[Fact.Forward]$/;"	methods	line:7
alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val alpha = addAlpha(kinds.head)$/;"	constants	line:251
alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val alpha = new Alpha(kind)$/;"	constants	line:243
alpha	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val alpha: Alpha,$/;"	constants	line:156
alphaNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    @Ignore val alphaNodes = new mutable.HashMap[Fact.ForwardKind, Alpha]()$/;"	constants	line:237
and	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * (1) `p.ty` is of the right class and satisfies all constraints on `ty`; or,$/;"	classes	line:824
annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotation = positioned($/;"	constants	line:147
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:145
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:191
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override val annotations: List[Annotation] = Nil$/;"	constants	line:304
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotations = rep(annotation) $/;"	constants	line:152
annotations1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotations1 = rep1(annotation) $/;"	constants	line:153
app	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val app = ctor.newInstance().asInstanceOf[Application]$/;"	constants	line:66
appArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        val appArgs = new mutable.ArrayBuffer[String]()$/;"	constants	line:25
appArgsList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val appArgsList: java.util.List[String] = Collections.unmodifiableList(Arrays.asList(appArgs.toArray: _*))$/;"	constants	line:67
appClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val appClassName = optAppClassName.getOrElse {$/;"	constants	line:41
appendAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendAssign(inAssign: in.Assign): Env = {$/;"	methods	line:797
appendLoweredStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendLoweredStmt(stmt: in.Stmt): Env = {$/;"	methods	line:725
applArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val applArgs = args.filterNot(_.name.className is nm)$/;"	constants	line:171
applicableMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val applicableMsyms = msyms.filter(potentiallyApplicable)$/;"	constants	line:652
appliesTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def appliesTo(csym: ClassSymbol)(arg: Type.Arg) = {$/;"	methods	line:432
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def apply(node: Ast.Node) = new At(node)$/;"	methods	line:24
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def apply(env: Env, current: SPath) = new In(env, current)$/;"	methods	line:18
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def apply(global: Global) = new Create(global)$/;"	methods	line:9
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env) = new InEnv(env)$/;"	methods	line:360
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env, optStmts: Option[mutable.ListBuffer[out.Stmt]]) = {$/;"	methods	line:719
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^    def apply(global: Global) = new Merge(global)$/;"	methods	line:9
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def apply(mods: List[Mod]): Set = Set(mods.foldLeft(0)(_ | _.bit))$/;"	methods	line:41
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(cls: java.lang.Class[_]): Class = cls match {$/;"	methods	line:103
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(pkg: java.lang.Package): Package = {$/;"	methods	line:95
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(str: String): Package = {$/;"	methods	line:90
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def apply(global: Global, interFile: File) = {$/;"	methods	line:455
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            def apply(names: List[String]) = {$/;"	methods	line:361
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def apply(pairs: (Path.Ref, Path.Ref)*): Subst = {$/;"	methods	line:69
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def apply(cls: java.lang.Class[_]): Type.Class = Class(Name.Class(cls), List())$/;"	methods	line:39
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def apply[X](baseFactSet: InternalFactSet[X], addedFactSet: FactSet[X], xtra: X): FactSet[X] = {$/;"	methods	line:36
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def apply[X](baseFactSet: InternalFactSet[X], addedFacts: Iterable[Fact], xtra: X): FactSet[X] = {$/;"	methods	line:26
are	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            \/\/ take it, if it is a good head. Then repeat the operation until all the class are$/;"	classes	line:21
arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val arg = ($/;"	constants	line:110
arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val arg: PackratParser[out.Expr] = tuple | blk | asyncBlk$/;"	constants	line:374
argAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val argAsmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:937
argAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val argAsmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:968
argClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val argClassName = arg.name.className$/;"	constants	line:433
argClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        def argClasses(msym: MethodSymbol) =$/;"	methods	line:341
argCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val argCsym = global.csym(argClassName)$/;"	constants	line:434
argPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^                val argPaths = args.map(_.path)$/;"	constants	line:46
argPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val argPaths = args.map(_.path.toPath) \/\/ list of untyped paths$/;"	constants	line:602
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val argTys = outArgs.map(_.ty)$/;"	constants	line:1021
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val argTys = outArgNodes.map(_.ty)$/;"	constants	line:391
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def args: List[String] = productIterator.toList.map {$/;"	methods	line:21
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        override def args = List(path.toString, path.ty.toString, expTy.toString)$/;"	methods	line:45
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val args = extendsDecl.args.map(n => subst.typedPath(n.path))$/;"	constants	line:47
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val args = extendsDecl.args.map(lowerExtendsArg)$/;"	constants	line:601
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def args(cps: List[(String, out.Expr)]) = cps.map(_._2)$/;"	methods	line:381
arrayExtends	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    def arrayExtends(ty: Type) = {$/;"	methods	line:57
as	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** A position for reporting errors related to the class as a whole *\/$/;"	classes	line:37
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName = None$/;"	methods	line:31
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName: Option[Class]$/;"	methods	line:22
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def asClassName = Some(this)$/;"	methods	line:69
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asFieldNamed(name: Name.Var): Option[FieldDecl] = None$/;"	methods	line:148
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asFieldNamed(fldName: Name.Var) = {$/;"	methods	line:321
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember) = {$/;"	methods	line:11
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember): Option[MemberEntry]$/;"	methods	line:6
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def asMemberEntryMatching(uName: Name.UnloweredMember) = None        $/;"	methods	line:30
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asMethodNamed(name: Name.Method): Option[MethodDecl] = None$/;"	methods	line:147
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asMethodNamed(mthdName: Name.Method) = {$/;"	methods	line:252
asObj	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def asObj = any.asInstanceOf[java.lang.Object]$/;"	methods	line:61
asmAsyncIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmAsyncIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.AsyncInterval])$/;"	constants	line:83
asmBooleanType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmBooleanType = asm.Type.getType(classOf[java.lang.Boolean])$/;"	constants	line:78
asmClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmClassType(name: Name.Class) = asm.Type.getObjectType(name.internalName)$/;"	methods	line:136
asmContextType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmContextType = asm.Type.getType(classOf[ch.ethz.intervals.Context])$/;"	constants	line:87
asmHelperType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmHelperType = asm.Type.getType(classOf[harmonic.runtime.Helper])$/;"	constants	line:88
asmInlineIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmInlineIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.InlineInterval])$/;"	constants	line:84
asmIntervalImplType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmIntervalImplType = asm.Type.getType(classOf[ch.ethz.intervals.impl.IntervalImpl])$/;"	constants	line:82
asmIntervalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmIntervalType = asm.Type.getType(classOf[ch.ethz.intervals.Interval])$/;"	constants	line:81
asmIntervalsType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmIntervalsType = asm.Type.getType(classOf[ch.ethz.intervals.Intervals])$/;"	constants	line:80
asmObjectArrayType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectArrayType = asm.Type.getType("[Ljava\/lang\/Object;")$/;"	constants	line:75
asmObjectType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectType = asm.Type.getType(classOf[java.lang.Object])$/;"	constants	line:76
asmPointType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmPointType = asm.Type.getType(classOf[ch.ethz.intervals.Point])$/;"	constants	line:85
asmStringType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmStringType = asm.Type.getType(classOf[java.lang.String])$/;"	constants	line:79
asmTaskType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmTaskType = asm.Type.getType(classOf[ch.ethz.intervals.Task])$/;"	constants	line:86
asmThrowableType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmThrowableType = asm.Type.getType(classOf[java.lang.Throwable])$/;"	constants	line:89
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType = asm.Type.INT_TYPE$/;"	methods	line:427
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType = fsym.ty.toAsmType$/;"	methods	line:469
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType: asm.Type$/;"	methods	line:418
asmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val asmTys = argumentClasses.drop(rcvr).map(asm.Type.getType)$/;"	constants	line:810
asmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val asmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:815
asmVoidClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmVoidClassType = asm.Type.getType(classOf[java.lang.Void])$/;"	constants	line:77
assemble	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def assemble(self, fragnum, ):$/;"	member	line:229
assertSimple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def assertSimple(factSet: FactSet[_], xs: Set[X], ys: Set[Y], ws: Set[W], zs: Set[Z]) = {$/;"	methods	line:26
assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val assign = withPosOf(outExpr, out.DefineLv(sym, outExpr))$/;"	constants	line:1237
asyncBlk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val asyncBlk = positioned($/;"	constants	line:366
attachedTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def attachedTo(inlineInterval: Interval) = {$/;"	methods	line:613
attachedTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                override def attachedTo(inlineInterval: Interval) = {$/;"	methods	line:532
attempt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] def attempt(paths: Set[Path.Ref])(technique: Technique) = {$/;"	methods	line:50
backwardFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def backwardFact(fact: Fact.Backward) = log.indent("backwardFact(", fact, ")") {$/;"	methods	line:103
backwardFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        var backwardFacts: List[Fact.Backward] = Nil$/;"	local variables	line:28
backwardStack	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        var backwardStack: List[(Fact.Backward, Rule.Backward[X])] = Nil$/;"	local variables	line:59
baseName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        val baseName = name.relPath$/;"	constants	line:60
being	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ For a class being loaded from source, this is the structure:$/;"	classes	line:27
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val best = identifyBestMethod($/;"	constants	line:1091
bestArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val bestArgs = intersectArgs(leftArgsUp, rightArgsUp)$/;"	constants	line:528
bestCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val bestCsym = leftMro.find(rightCsym.isSubclass(_)).get $/;"	constants	line:522
bestMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val bestMsyms = applicableMsyms.filter(isBestChoice)$/;"	constants	line:674
beta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def beta(factKinds: List[Fact.ForwardKind]): Set[List[Fact.Forward]] = {$/;"	methods	line:80
beta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def beta(factKinds: List[Fact.ForwardKind]): Set[List[Fact.Forward]]$/;"	methods	line:8
beta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                    val beta = addBeta(rule.inputKinds)$/;"	constants	line:286
beta	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val beta = new Beta(kinds, alpha, rhs)$/;"	constants	line:258
betaNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    @Ignore val betaNodes = new mutable.HashMap[List[Fact.ForwardKind], Beta]()$/;"	constants	line:238
betas	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val betas = new mutable.ListBuffer[Beta]()$/;"	constants	line:127
betas	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val betas = new mutable.ListBuffer[Beta]()$/;"	constants	line:159
blk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blk = positioned($/;"	constants	line:362
blkBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkBody: PackratParser[(out.OptionalParseTypeRef, out.Param[Unit], List[out.Stmt])] = ($/;"	constants	line:356
blkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkParam: PackratParser[out.Param[Unit]] = tupleBlkParam | varBlkParam$/;"	constants	line:275
blockClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockClassName = genClassName(accessMap.context, tmpl)$/;"	constants	line:1533
blockTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockTy = Type.Class(blockClassName, List())$/;"	constants	line:1534
bnds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val bnds = upperBounds(ty)$/;"	constants	line:268
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def body: B$/;"	methods	line:196
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^      * class body.  It does not invoke any super$/;"	classes	line:1802
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val body: AsyncInterval = master.subinterval($/;"	constants	line:100
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Environment immediately within the class body *\/$/;"	classes	line:212
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val body: AsyncInterval = master.subinterval($/;"	constants	line:90
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ The environment used within the class body.$/;"	classes	line:113
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def body: AsyncInterval$/;"	methods	line:22
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        \/\/ Add from class body:$/;"	classes	line:58
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^    \/\/ - Add relations from class body if both sides are final.$/;"	classes	line:26
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val body = lowerBody(env, decl.body)$/;"	constants	line:148
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val body = positioned($/;"	constants	line:348
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^  * rest of the body.  Before we can resolve a class body, we must first $/;"	classes	line:46
bolded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def bolded(func: => Unit) {$/;"	methods	line:432
booleanClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanClass = classOf[java.lang.Boolean]$/;"	constants	line:109
booleanTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanTy = Type.Class(booleanClass)$/;"	constants	line:121
bound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val bound: Name.Class$/;"	constants	line:106
bound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghost.java	/^    public Class<?> bound();$/;"	method	line:15
boundTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val boundTy = mutualUpperBoundOfList(tys)$/;"	constants	line:465
box	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def box(box: BoxInfo) {$/;"	methods	line:211
boxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val boxInfo = boxInfoForPrimitiveType(fromAsmTy)$/;"	constants	line:248
boxInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val boxInfo = boxInfoForPrimitiveType(toAsmTy)$/;"	constants	line:253
boxInfoForBoxType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def boxInfoForBoxType(asmType: asm.Type) = boxes.find(_.boxType == asmType).get$/;"	methods	line:108
boxInfoForPrimitiveType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def boxInfoForPrimitiveType(asmType: asm.Type) = boxes.find(_.primType == asmType).get$/;"	methods	line:107
boxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val boxedArray = new BoxedArray(accessMap)$/;"	constants	line:1792
boxedArrayPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] val boxedArrayPath = accessMap.pathToFreshSlot(asmObjectArrayType)$/;"	constants	line:590
boxedSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def boxedSyms(sym: VarSymbol.Any) = writeSyms(sym) && sharedSyms(sym)$/;"	methods	line:631
boxes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val boxes = List($/;"	constants	line:97
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        \/** Creates a new class name in same package but with the given suffix. *\/$/;"	packages	line:84
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val byteCode: AsyncInterval = master.subinterval($/;"	constants	line:178
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val byteCode: AsyncInterval = master.subinterval($/;"	constants	line:171
byteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def byteCode: AsyncInterval$/;"	methods	line:30
c1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    class c1 extends c2[a1]$/;"	classes	line:341
cache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val cache = new mutable.HashMap[AccessPath, AccessPath]()$/;"	constants	line:1241
call	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val call = path~"."~methodId~"("~comma(path)~")" ^^ {$/;"	constants	line:86
call	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def call(methodId: MethodId, args: Path.Ref*) = Call(this, methodId, args.toList)$/;"	methods	line:17
callData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def callData($/;"	methods	line:383
callPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val callPart = ident~arg                           ^^ { case i~a => (i, a) }$/;"	constants	line:376
canInfer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def canInfer(recurse: Recurse[Env.Xtra], fact: Fact.Backward): Boolean = {$/;"	methods	line:573
canInfer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def canInfer(recurse: Recurse[Env.Xtra], fact: Fact.Backward): Boolean = {$/;"	methods	line:171
canInfer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def canInfer(recurse: Recurse[X], fact: Fact.Backward): Boolean        $/;"	methods	line:75
canInfer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def canInfer(recurse: Recurse[X], fact: Fact.Backward): Boolean = {$/;"	methods	line:93
cancelInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def cancelInlineInterval($/;"	methods	line:1478
casted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val casted = {$/;"	constants	line:1673
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:14
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        val cdecl = csym.loweredSource$/;"	constants	line:32
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:26
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:32
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:16
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def check(cvis: asm.ClassVisitor) = {$/;"	methods	line:373
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val check: AsyncInterval = master.subinterval($/;"	constants	line:159
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val check: AsyncInterval = master.subinterval($/;"	constants	line:151
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def check: AsyncInterval$/;"	methods	line:28
checkAndAddAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkAndAddAssign(current: SPath)(env: Env, pair: (in.Lvalue, in.TypedPath)): Env = {$/;"	methods	line:195
checkAndAddReq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkAndAddReq(current: SPath)(env: Env, req: in.Requirement) = {$/;"	methods	line:173
checkAndAddStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkAndAddStmt(current: SPath)(env: Env, stmt: in.LowerStmt): Env = $/;"	methods	line:221
checkBasics	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    private[this] def checkBasics($/;"	methods	line:20
checkBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var checkBytecode = false$/;"	local variables	line:21
checkEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def checkEnv = LoadedData.join.checkEnv$/;"	methods	line:58
checkEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def checkEnv = CheckEnv.v$/;"	methods	line:274
checkEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def checkEnv: Env$/;"	methods	line:115
checkExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkExpr(expr: in.LowerTlExpr): Type = log.indent("checkExpr(", expr, ")") {$/;"	methods	line:145
checkFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkFieldDecl($/;"	methods	line:322
checkHasClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkHasClass(path: SPath, className: Name.Class): Unit = {$/;"	methods	line:41
checkIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkIntervalDecl($/;"	methods	line:262
checkIsAssignable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkIsAssignable(path: SPath.Typed, ty: Type): Unit = {$/;"	methods	line:59
checkIsSubtype	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkIsSubtype(subTy: Type, supTy: Type): Unit = {$/;"	methods	line:35
checkLockable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def checkLockable(inter: RoInterval, lock: RoLock): RuntimeException = {$/;"	methods	line:55
checkLockable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoLock.scala	/^    override def checkLockable(inter: RoInterval, lock: RoLock): RuntimeException = {$/;"	methods	line:23
checkMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkMethodDecl($/;"	methods	line:274
checkOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkOwner(owner: SPath.Owner): Unit = {$/;"	methods	line:65
checkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkParam(pair: (Type, in.TypedPath)): Unit = {$/;"	methods	line:139
checkParamType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkParamType(pair: (Type, SPath.Typed)): Unit = {$/;"	methods	line:72
checkPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPath(path: SPath): Unit = {$/;"	methods	line:76
checkPathAndAssignable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPathAndAssignable(path: SPath.Typed, ty: Type): Unit = {$/;"	methods	line:113
checkPathAndAssignable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkPathAndAssignable(path: in.TypedPath, ty: Type): Unit = {$/;"	methods	line:124
checkPathAndClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPathAndClass(path: SPath, cls: Name.Class): Unit = {$/;"	methods	line:108
checkPathAndClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkPathAndClass(path: in.AnyPath, className: Name.Class): Unit = {$/;"	methods	line:120
checkPermitsRd	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPermitsRd(guardPath: Path.Ref): Unit = {$/;"	methods	line:53
checkPermitsWr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkPermitsWr(guardPath: Path.Ref): Unit = {$/;"	methods	line:47
checkReadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def checkReadable(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:47
checkReadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoLock.scala	/^    override def checkReadable(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:15
checkRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkRelDecl($/;"	methods	line:330
checkReq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        def checkReq(req: in.Requirement) = {$/;"	methods	line:130
checkStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def checkStmts(current: SPath, env: Env, stmts: List[in.LowerStmt]): Unit = {$/;"	methods	line:258
checkTypeWf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            def checkTypeWf(ty: Type): Unit = {$/;"	methods	line:29
checkWritable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def checkWritable(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:43
checkWritable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoLock.scala	/^    override def checkWritable(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:11
checker	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val checker = check(writer)$/;"	constants	line:379
child	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def child: Path.Ref$/;"	methods	line:28
chk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^            val chk = In(env, current).At(rv)$/;"	constants	line:198
classDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val classDecl = positioned($/;"	constants	line:162
classEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def classEnv = ClassEnv.v$/;"	methods	line:214
classExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val classExt = ".class"$/;"	constants	line:12
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def classFiles(name: Name.Class) = relativeFiles(classPaths, classExt)(name)$/;"	methods	line:69
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val classFiles = config.classFiles(className)$/;"	constants	line:211
classMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val classMap = $/;"	constants	line:127
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val className: PackratParser[Name.Class] = topLevelClassName | innerClassName$/;"	constants	line:60
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def className = if(async) Name.AsyncBlockClass else Name.BlockClass$/;"	methods	line:718
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val className = Name.Class(cls)$/;"	constants	line:178
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val className = extendsDecl.className.name$/;"	constants	line:46
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val className: Name.Class,         \/** Class in which the method is defined. *\/$/;"	constants	line:62
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(baseName, nm)$/;"	constants	line:32
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(pkgName, nm)$/;"	constants	line:23
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = resolveToClassOrObject(relName.pos, relNameToRelList(relName))$/;"	constants	line:126
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                        val className = Name.Class(outerClassName, name)$/;"	constants	line:541
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                        val className = resolveToClassOrObject(tref.pos, name :: names)$/;"	constants	line:536
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:564
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:570
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val className = resolveName(base).name$/;"	constants	line:238
classNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                        val classNames = overrides.map(_.className).toList$/;"	constants	line:115
classPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    private[this] val classPage = debugServer.pageForClass(name)$/;"	constants	line:12
classPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val classPage = debugServer.pageForClass(name)$/;"	constants	line:17
classParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def classParam = ClassParam.v$/;"	methods	line:210
classParamAndEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def classParamAndEnv(csym: ClassFromSource): (out.Param[VarSymbol.Field], Env) = {$/;"	methods	line:22
classPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var classPaths = List(new File("."))$/;"	local variables	line:14
classReqs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        val classReqs: List[in.Requirement] = Nil \/\/ TODO$/;"	constants	line:38
classScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val classScope = InScope(constructSymbolTable(csym))$/;"	constants	line:39
classSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    def classSymbol(csym: ClassFromSource): Unit = {$/;"	methods	line:337
classTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val classTy = Type.Class(className, List())$/;"	constants	line:467
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.GuardClass, Name.RoIntervalClass)    $/;"	methods	line:56
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.ObjectClass, Name.ObjectClass)$/;"	methods	line:52
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.RoIntervalClass, Name.RoIntervalClass)$/;"	methods	line:34
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.RoIntervalClass, Name.RoIntervalClass)$/;"	methods	line:40
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.RoIntervalClass, Name.RoLockClass)$/;"	methods	line:28
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes = (Name.RoPointClass, Name.RoPointClass)$/;"	methods	line:46
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def classes: (Name.Class, Name.Class)$/;"	methods	line:8
classesWithSuper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^                val classesWithSuper = Option(cls.getSuperclass) ?:: interfaceClasses$/;"	constants	line:38
classlessName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                            val classlessName = Name.ClasslessMember(text)$/;"	constants	line:443
clean	/Users/niko/git/intervals-java/Harmonic/Makefile	/^clean:$/;"	targets	line:32
cleanupStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def cleanupStatement(stmt: in.Stmt) {$/;"	methods	line:1144
close_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def close_all(self):$/;"	member	line:469
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val cls = {$/;"	constants	line:45
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val cls = ty.getRawType.asInstanceOf[Class[_]]$/;"	constants	line:177
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val cls: java.lang.Class[_]$/;"	constants	line:23
clsFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val clsFile = fileWithExtension(".class")$/;"	constants	line:396
cmro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val cmro: AsyncInterval = master.subinterval($/;"	constants	line:90
cmro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val cmro: AsyncInterval = master.subinterval($/;"	constants	line:80
cmro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def cmro: AsyncInterval    \/\/ "compute MRO"$/;"	methods	line:21
cnt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                val cnt = reporter.errorCount$/;"	constants	line:98
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:25
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:31
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:38
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:45
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def column(func: => Unit) {$/;"	methods	line:444
comma	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    def comma[A](p: PackratParser[A]) = repsep(p, ",")<~opt(",")$/;"	methods	line:41
comma	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma[A](p: PackratParser[A]) = repsep(p, ",")<~opt(",")$/;"	methods	line:69
comma1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    def comma1[A](p: PackratParser[A]) = rep1sep(p, ",")<~opt(",")$/;"	methods	line:42
comma1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma1[A](p: PackratParser[A]) = rep1sep(p, ",")<~opt(",")$/;"	methods	line:70
command	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def command(self, cmd, retcode, stdout, stderr):$/;"	member	line:422
comp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^            val comp = str.split('.')$/;"	constants	line:91
compUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val compUnit = positioned($/;"	constants	line:103
compare_errors	/Users/niko/git/intervals-java/Harmonic/test.py	/^def compare_errors(expected, stdout, stderr):$/;"	function	line:523
compile	/Users/niko/git/intervals-java/Harmonic/Makefile	/^compile: ${GENERATEDJAVA}$/;"	targets	line:40
compile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def compile() = {$/;"	methods	line:75
complete	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def complete {$/;"	methods	line:171
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component = nm$/;"	methods	line:115
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component: String$/;"	methods	line:107
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                override def compute(inlineInterval: Interval) = {$/;"	methods	line:536
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            def compute(subinterval: Interval) = {$/;"	methods	line:637
computeForSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    def computeForSym(csym: ClassSymbol): List[ClassSymbol] = {$/;"	methods	line:13
computeOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def computeOverrides($/;"	methods	line:101
computeVersions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def computeVersions($/;"	methods	line:2043
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val config: Config,$/;"	constants	line:18
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val config = new Config()$/;"	constants	line:9
constrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val constrainedType = positioned($/;"	constants	line:312
constructPathFromPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def constructPathFromPattern(pattern: Pattern.Ref): SPath.Typed = pattern match {$/;"	methods	line:1656
constructSymbolTable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def constructSymbolTable(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:89
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ the arguments of a class constructor.  Note that only$/;"	classes	line:391
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Invoke java class constructor$/;"	classes	line:2201
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def constructor = Constructor.v$/;"	methods	line:218
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def constructors: List[MethodSymbol] = LoadedData.join.constructors$/;"	methods	line:50
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def constructors = List(Constructor.join)$/;"	methods	line:219
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def constructors: List[MethodSymbol]$/;"	methods	line:80
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def contains(mod: Mod) = mods.containsBit(mod.bit)$/;"	methods	line:19
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    override def contains(fact: Fact): Boolean = withLock(lock) {$/;"	methods	line:156
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def contains(fact: Fact): Boolean$/;"	methods	line:11
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def contains(fact: Fact) = log.indent("contains(", fact, ")") {$/;"	methods	line:110
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def contains(fact: Fact): Boolean = false$/;"	methods	line:34
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Recurse.scala	/^    def contains(fact: Fact): Boolean$/;"	methods	line:7
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    def contains(fact: inference.Fact): Boolean = {$/;"	methods	line:14
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    private[this] def contains(rel: PcRel)(obj: Object) = {$/;"	methods	line:18
containsBit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def containsBit(i: Int): Boolean = {$/;"	methods	line:74
contents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        protected[this] var contents: List[lathos.PageContent] = Nil$/;"	local variables	line:162
context	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val context = server.context$/;"	constants	line:328
context	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val context = server.context$/;"	constants	line:339
context	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val context = server.context$/;"	constants	line:345
contextForPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def contextForPage(page: lathos.Page) = {$/;"	methods	line:338
contextForPageTitled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def contextForPageTitled(id: String, title: Object*) = {$/;"	methods	line:344
controlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def controlFlow($/;"	methods	line:126
convert	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def convert(toAsmTy: asm.Type, fromAsmTy: asm.Type) {$/;"	methods	line:229
convert	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def convert(toTy: Type, fromTy: Type) {$/;"	methods	line:311
convertNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def convertNeeded(toTy: Type, fromTy: Type): Boolean = {$/;"	methods	line:122
cookRawSuperClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^    def cookRawSuperClasses(csym: ClassSymbol, rawSuperClassNames: List[Name.Class]) = {$/;"	methods	line:21
cpu	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:15
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val create: AsyncInterval = master.subinterval($/;"	constants	line:121
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val create: AsyncInterval = master.subinterval($/;"	constants	line:111
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def create: AsyncInterval$/;"	methods	line:24
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    private[this] def create[X]($/;"	methods	line:15
createArrayIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def createArrayIfNeeded(mvis: asm.MethodVisitor) = {$/;"	methods	line:598
createFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^        def createFieldSymbol(ty: Type) = {$/;"	methods	line:41
createMemberIntervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def createMemberIntervals(csym: ClassFromSource) {$/;"	methods	line:13
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        def createSubst(msym: MethodSymbol) = mthdSubst(msym, inRcvr, inArgs)$/;"	methods	line:399
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def createSubst(msym: MethodSymbol) = mthdSubst(msym, inRcvr, inArgs)$/;"	methods	line:1022
createSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def createSubst(msym: MethodSymbol) = {$/;"	methods	line:606
createSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^        def createSymbol($/;"	methods	line:60
createSymbolForConstructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def createSymbolForConstructor(csym: ClassFromSource) = {$/;"	methods	line:31
createSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def createSymbols(compUnit: Ast.Parse.CompUnit) = synchronized {$/;"	methods	line:160
create_error_list	/Users/niko/git/intervals-java/Harmonic/test.py	/^def create_error_list(stdout, stderr):$/;"	function	line:497
creatorLog	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val creatorLog = global.debugServer.contextForPage(parentPage)$/;"	constants	line:565
creatorPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val creatorPage = Lathos.context.topPage$/;"	constants	line:556
cross	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def cross[J](js: Iterable[J]) = $/;"	methods	line:109
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val csym = global.csym(methodId.className)$/;"	constants	line:133
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = global.csym(className)$/;"	constants	line:332
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = global.csym(entry.name.className)$/;"	constants	line:298
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = global.csym(className)$/;"	constants	line:398
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = global.csym(className)$/;"	constants	line:82
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = global.csym(nm)$/;"	constants	line:168
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val csym = global.csym(msym.className)$/;"	constants	line:137
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                    val csym = addCsym(new ClassFromSource(className, this, compUnit, cdecl))$/;"	constants	line:168
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def csym(name: Name.Class) = synchronized {$/;"	methods	line:130
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(className)$/;"	constants	line:522
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(className)$/;"	constants	line:938
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(memberName.className)$/;"	constants	line:778
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(memberVar.className)$/;"	constants	line:418
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = global.csym(name)$/;"	constants	line:1087
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val csym = global.csym(name.className)$/;"	constants	line:804
ctor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                val ctor = {$/;"	constants	line:57
ctor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val ctor = Name.InitMethod.javaName$/;"	constants	line:74
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ctorSymbol(inter: Interval)(mthd: reflect.Constructor[_]) = {$/;"	methods	line:238
ctormvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val ctormvis = interwr.cvis.visitMethod($/;"	constants	line:1329
ctors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val ctors = cls.getConstructors$/;"	constants	line:72
ctr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        val ctr = new AtomicInteger(0)$/;"	constants	line:107
ctx	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    val ctx = new harmonic.lang.ApplicationContext() {$/;"	constants	line:69
ctx	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val ctx = server.context$/;"	constants	line:159
curPos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def curPos = curPosVar.get$/;"	methods	line:43
curPosVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val curPosVar = Intervals.context.scopedVar(NoPosition)$/;"	constants	line:41
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ class data, and create any necessary edges between our intervals and$/;"	classes	line:69
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        val data = new Data(csym.pos)$/;"	constants	line:93
debug	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def debug(log: Context) = new PrettyPrinter() {$/;"	methods	line:51
debugPort	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var debugPort = 0$/;"	local variables	line:28
debugServer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val debugServer = $/;"	constants	line:25
debugging	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def debugging = config.debugPort != 0$/;"	methods	line:23
declLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declLvalue = positioned($/;"	constants	line:286
declOp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declOp = ($/;"	constants	line:197
declPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declPart = ident~tupleMthdParam ^^ { case i~p => (i, p) }$/;"	constants	line:187
declaration	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ - merge: merges all the lowered members into a lowered class declaration.$/;"	classes	line:54
declaredSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val declaredSyms = summary.declaredSyms + sym$/;"	constants	line:691
def	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^        \/\/ Hold off on scheduling header until class def'n is complete:$/;"	classes	line:72
define	/Users/niko/git/intervals-java/Harmonic/test.py	/^def define(varnm, defval):$/;"	function	line:158
defined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Creates a `Type.Class` for the class defined by this symbol. *\/$/;"	classes	line:49
definedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def definedClasses(cunit: CompUnit) =$/;"	methods	line:1062
defines	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^The Env class defines our type system.$/;"	classes	line:23
defining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Static.class: a Java class defining static members for all $/;"	classes	line:31
defn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Creates source symbols from all class defn. in `compUnit`.$/;"	classes	line:157
depth	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:15
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def derive(xtra: Env.Xtra, facts: List[Fact.Forward]) = {$/;"	methods	line:148
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def derive(xtra: Env.Xtra, facts: List[Fact.Forward]): Iterable[Fact.Forward] = {$/;"	methods	line:53
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def derive(xtra: Env.Xtra, facts: List[Fact.Forward]): Iterable[Fact.Forward] = {$/;"	methods	line:87
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def derive(state: State, fact: Fact.Backward): Boolean = {$/;"	methods	line:203
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def derive(xtra: X, facts: List[Fact.Forward]): Iterable[Fact.Forward]        $/;"	methods	line:49
derive	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def derive(xtra: X, facts: List[Fact.Forward]): Iterable[Fact.Forward] = {$/;"	methods	line:67
deriveAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveAccessMap($/;"	methods	line:1234
deriveIntervalTask	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveIntervalTask($/;"	methods	line:1304
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = deriveAccessMap(blockClassName, tmplwr.cvis, tmpl.stmts)$/;"	constants	line:1558
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = new AccessMap(cname)$/;"	constants	line:1239
desc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val desc = plainMethodDescFromSig(msym.msig)$/;"	constants	line:961
descFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val descFunc = if(withMroIndex) mroMethodDescFromSig _ else plainMethodDescFromSig _$/;"	constants	line:1699
dfltLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val dfltLabel = new asm.Label()$/;"	constants	line:2089
diff	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def diff(self, expected, diff):$/;"	member	line:434
dirs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def dirs(paths: String) = {$/;"	methods	line:55
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Byte l, Double r) { return l * r; }$/;"	method	line:345
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Byte r) { return l * r; }$/;"	method	line:420
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Double r) { return l * r; }$/;"	method	line:435
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Float r) { return l * r; }$/;"	method	line:432
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Integer r) { return l * r; }$/;"	method	line:426
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Long r) { return l * r; }$/;"	method	line:429
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Short r) { return l * r; }$/;"	method	line:423
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Float l, Double r) { return l * r; }$/;"	method	line:417
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Integer l, Double r) { return l * r; }$/;"	method	line:381
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Long l, Double r) { return l * r; }$/;"	method	line:399
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Short l, Double r) { return l * r; }$/;"	method	line:363
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Byte l, Float r) { return l * r; }$/;"	method	line:342
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Byte r) { return l * r; }$/;"	method	line:402
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Float r) { return l * r; }$/;"	method	line:414
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Integer r) { return l * r; }$/;"	method	line:408
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Long r) { return l * r; }$/;"	method	line:411
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Short r) { return l * r; }$/;"	method	line:405
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Integer l, Float r) { return l * r; }$/;"	method	line:378
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Long l, Float r) { return l * r; }$/;"	method	line:396
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Short l, Float r) { return l * r; }$/;"	method	line:360
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Byte r) { return l * r; }$/;"	method	line:330
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Integer r) { return l * r; }$/;"	method	line:336
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Short r) { return l * r; }$/;"	method	line:333
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Byte r) { return l * r; }$/;"	method	line:366
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Integer r) { return l * r; }$/;"	method	line:372
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Short r) { return l * r; }$/;"	method	line:369
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Byte r) { return l * r; }$/;"	method	line:348
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Integer r) { return l * r; }$/;"	method	line:354
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Short r) { return l * r; }$/;"	method	line:351
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Byte l, Long r) { return l * r; }$/;"	method	line:339
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Integer l, Long r) { return l * r; }$/;"	method	line:375
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Byte r) { return l * r; }$/;"	method	line:384
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Integer r) { return l * r; }$/;"	method	line:390
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Long r) { return l * r; }$/;"	method	line:393
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Short r) { return l * r; }$/;"	method	line:387
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Short l, Long r) { return l * r; }$/;"	method	line:357
divider	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def divider(self):$/;"	member	line:446
doSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubst(pat_from: Pattern.Ref, pat_to: Pattern.Ref): Subst = {$/;"	methods	line:71
doSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubsts(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]): Subst = {$/;"	methods	line:88
drainQueue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def drainQueue() = log.indent("drainQueue") {$/;"	methods	line:61
drop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def drop(n: Int): FileReader = $/;"	methods	line:446
dropHead	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                    def dropHead(l: List[ClassSymbol]): Option[List[ClassSymbol]] = {$/;"	methods	line:43
dumpBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpBytecode = false$/;"	local variables	line:20
dumpLoweredTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpLoweredTrees = false$/;"	local variables	line:19
dumpParsedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpParsedTrees = false$/;"	local variables	line:17
dumpResolvedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpResolvedTrees = false$/;"	local variables	line:18
dumpTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def dumpTo($/;"	methods	line:33
elaborate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val elaborate: Interval        $/;"	constants	line:126
elaborate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val elaborate: Interval$/;"	constants	line:65
elapsedMilli	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedMilli = System.currentTimeMillis - start$/;"	constants	line:511
elapsedMin	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedMin = elapsedSec \/ 60$/;"	constants	line:513
elapsedSec	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val elapsedSec = elapsedMilli \/ 1000$/;"	constants	line:512
elimCovariantReturns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def elimCovariantReturns(mthds: Array[reflect.Method]) = {$/;"	methods	line:293
elimPrimitiveConflicts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def elimPrimitiveConflicts(msyms: List[MethodSymbol]) = {$/;"	methods	line:337
embeddedIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def embeddedIndent[R](args: Object*)(func: => R) = {$/;"	methods	line:384
emitDebugInfo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var emitDebugInfo = true$/;"	local variables	line:25
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val empty = SymbolSummary(Set(), Set(), Set(), Set())$/;"	constants	line:635
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def empty(global: Global) = {$/;"	methods	line:43
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        val empty = Set(0)$/;"	constants	line:40
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    val empty = new Subst(Map())$/;"	constants	line:67
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    val empty: Map = scala.collection.immutable.Map()$/;"	constants	line:35
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    val empty = new TypedSubst(Map(), Map())$/;"	constants	line:70
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    private[this] val emptyEnv = Env.empty(global)$/;"	constants	line:15
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    private[this] val emptyEnv = Env.empty(global)$/;"	constants	line:20
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^        val emptyEnv = Env.empty(global)$/;"	constants	line:17
emptyFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    def emptyFactSet(xtra: X) = EmptyFactSet(xtra).plusFacts(Nil, xtra)$/;"	methods	line:20
emptyOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val emptyOverrides = Map[MethodSymbol, List[MethodSymbol]]()$/;"	constants	line:105
emptyScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val emptyScope = InScope(Map())$/;"	constants	line:35
end	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def end() {$/;"	methods	line:392
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val endLabel = new asm.Label()$/;"	constants	line:1381
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val endLabel = new asm.Label()$/;"	constants	line:1909
endLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val endLabel = new asm.Label()$/;"	constants	line:1212
ensureLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def ensureLoadable(cls: Class[_]) {$/;"	methods	line:15
ensures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ensures: List[Requirement]$/;"	methods	line:195
ensures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^                val ensures = msym.ensures.view.map(vsubst.fact)$/;"	constants	line:49
ensures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def ensures = Ensures.v$/;"	methods	line:93
ensures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val ensures = "ensures"~>reqRelation$/;"	constants	line:195
ensuresFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def ensuresFinal(guard: Path.Ref, inter: Path.Ref) = {$/;"	methods	line:235
ensuresFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def ensuresFinal(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:51
ensuresFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoLock.scala	/^    override def ensuresFinal(mr: RoPoint, inter: RoInterval): RuntimeException = {$/;"	methods	line:19
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val env = csym.checkEnv$/;"	constants	line:267
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        var env = csym.checkEnv$/;"	local variables	line:279
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        var env = Env.empty(global).plusThis(csym.toType, cdecl.thisSym)$/;"	local variables	line:35
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^            val env = csym.classEnv$/;"	constants	line:86
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        var env = csym.checkEnv$/;"	local variables	line:40
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env = csym.classEnv$/;"	constants	line:147
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:199
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:708
env0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env0 = emptyEnv.plusThis(thisTy, thisSym)$/;"	constants	line:25
envirate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val envirate: AsyncInterval = master.subinterval($/;"	constants	line:150
envirate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val envirate: AsyncInterval = master.subinterval($/;"	constants	line:141
envirate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def envirate: AsyncInterval$/;"	methods	line:27
environment	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        \/\/ Store final computed class environment:$/;"	classes	line:69
environment	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^\/** Computes the class environment that is then used by type checking$/;"	classes	line:13
eqPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^                    val eqPaths = queryRGivenL(path, classOf[K.PathEq])$/;"	constants	line:72
eqToPs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val eqToPs = recurse.queryRGivenL(p, classOf[K.PathEq])$/;"	constants	line:173
eqToQs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val eqToQs = recurse.queryLGivenR(classOf[K.PathEq], q)$/;"	constants	line:174
equals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    override def equals(obj: Any) = {$/;"	methods	line:10
err	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^                            val err = eval(guard, inter)$/;"	constants	line:580
err	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val err = $/;"	constants	line:10
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:1053
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:1095
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = Type.Top$/;"	methods	line:1139
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def errTy: Ty$/;"	methods	line:73
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val error = reporter.Error(pos, msgKey, msgArgs.toList)$/;"	constants	line:48
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def error(methodId: MethodId)(implicit global: Global): MethodSymbol = {$/;"	methods	line:44
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def error(name: Name.Method, className: Name.Class)(implicit global: Global): MethodSymbol = {$/;"	methods	line:49
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    private[this] def error($/;"	methods	line:23
error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def error(self, message):$/;"	member	line:449
errorCount	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def errorCount = synchronized { errors.size }$/;"	methods	line:18
errorField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def errorField(name: Name.Member, optExpTy: Option[Type])(implicit global: Global) = {$/;"	methods	line:137
errorLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def errorLocal(name: Name.LocalVar, optExpTy: Option[Type]) = {$/;"	methods	line:163
errorLog	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val errorLog = debugServer.contextForPage(errorsPage)$/;"	constants	line:52
errorSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val errorSym = MethodSymbol.error(Name.InitMethod, targetCsym.name)$/;"	constants	line:616
errorTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def errorTypedPath(name: String) = {$/;"	methods	line:367
errors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    private[this] val errors = new mutable.ListBuffer[Error]()$/;"	constants	line:14
errorsPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val errorsPage = debugServer.topLevelPage("Errors")$/;"	constants	line:33
esc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def esc = elem("escape", c => c == '`')$/;"	methods	line:31
escape	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def escape(str: String) = {$/;"	methods	line:50
eval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val eval: ((intervals.guard.Guard, intervals.RoInterval) => RuntimeException)$/;"	constants	line:569
execInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execInlineInterval($/;"	methods	line:1445
execStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def execStatement(stmt: in.Stmt) {$/;"	methods	line:1084
execStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1187
execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^def execute(res, args):$/;"	function	line:481
expArgumentTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val expArgumentTy = optTypeArg(Name.BlockA, optExpTy).getOrElse(Type.Void)$/;"	constants	line:1147
expTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val expTy = optTypeFromLocal(env, lv)$/;"	constants	line:882
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def expand(lvalue: Pattern.Any, inAsmTypes: List[asm.Type]): List[asm.Type] = {$/;"	methods	line:760
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^            val expansions = resolveRelList(context)$/;"	constants	line:101
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val expansions = resolveRelList(relList)$/;"	constants	line:107
expects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                            throw new UsageError("Application class expects parameters.")$/;"	classes	line:62
expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr: PackratParser[out.Expr] = positioned($/;"	constants	line:414
expr0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr0: PackratParser[out.Expr] = positioned($/;"	constants	line:394
extPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val extPath = Path.Field(path, name)$/;"	constants	line:834
extTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val extTy = Type.Member(path, name)$/;"	constants	line:840
extTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val extTy = Type.Member(path, name)$/;"	constants	line:844
extTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val extTy = Type.Member(path, name)$/;"	constants	line:848
extendedAny	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedAny(any: Any) = new ExtendedAny(any)    $/;"	methods	line:63
extendedAnyPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedAnyPath(path: SPath): ExtendedAnyPath = $/;"	methods	line:1169
extendedBoolean	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedBoolean(bool: Boolean): ExtendedBoolean = new ExtendedBoolean(bool)$/;"	methods	line:71
extendedC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedC[C](obj: C): ExtendedC[C] = new ExtendedC(obj)$/;"	methods	line:58
extendedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def extendedClasses = ExtendedClasses.v$/;"	methods	line:285
extendedContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedContext(context: lathos.Context): ExtendedContext = new ExtendedContext(context)$/;"	methods	line:422
extendedInt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedInt(value: Int): ExtendedInt = new ExtendedInt(value)$/;"	methods	line:78
extendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedInterval(inter: Interval)(implicit global: Global) = ExtendedInterval(inter, global)$/;"	methods	line:632
extendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedIterable[E](iterable: Iterable[E]) = new ExtendedIterable(iterable)$/;"	methods	line:115
extendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedList[E](list: List[E]): ExtendedList[E] = new ExtendedList(list)$/;"	methods	line:141
extendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    implicit def extendedMap(m: Map) = ExtendedMap(m)$/;"	methods	line:40
extendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedMethodVisitor(mvis: asm.MethodVisitor) = ExtendedMethodVisitor(mvis)$/;"	methods	line:326
extendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedOption[E](option: Option[E]): ExtendedOption[E] = new ExtendedOption(option)$/;"	methods	line:154
extendedOutput	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedOutput(output: lathos.Output): ExtendedOutput = new ExtendedOutput(output)$/;"	methods	line:493
extendedParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedParam(pat: Param[VSym]): ExtendedParam = $/;"	methods	line:1155
extendedRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedRequirement(req: Requirement): ExtendedRequirement =$/;"	methods	line:1180
extendedServer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedServer(server: lathos.LathosServer): ExtendedServer = new ExtendedServer(server)$/;"	methods	line:353
extendedString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedString[E](string: String): ExtendedString = new ExtendedString(string)$/;"	methods	line:88
extendedTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedTypeRef(ty: Type): ExtendedTypeRef = ExtendedTypeRef(ty)$/;"	methods	line:120
extendedTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            implicit def extendedTypedPath(path: SPath.Typed): ExtendedTypedPath = $/;"	methods	line:1162
extendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val extendsArg: PackratParser[out.ExtendsArg] = ($/;"	constants	line:122
extendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val extendsDecl = positioned($/;"	constants	line:138
extraGhostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def extraGhostSymbols(name: Name.Class): Array[GhostSymbol] = {$/;"	methods	line:32
extraVarMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def extraVarMembers(name: Name.Class): Array[SymTab.Entry] = {$/;"	methods	line:25
extract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        private[this] def extract(arg: Type.Arg) = arg match {$/;"	methods	line:98
extract_fragments	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_fragments(filenm):$/;"	function	line:305
extract_metadata	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_metadata(filenm):$/;"	function	line:344
f	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val f = facts(1).asInstanceOf[K.ForwardPaths]$/;"	constants	line:150
f	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val f @ K.Paths(p, q) = fact$/;"	constants	line:172
fact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val fact = ($/;"	constants	line:132
fact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def fact(fact: inference.Fact): inference.Fact = fact match {$/;"	methods	line:34
fact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                val fact = queue.dequeue$/;"	constants	line:63
factAdded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def factAdded(state: State, fact: Fact.Forward): Unit = {$/;"	methods	line:184
factHolds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def factHolds(fact: inference.Fact): Boolean = {$/;"	methods	line:225
factIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def factIsFinalBy(fact: inference.Fact, inter: SPath) = {$/;"	methods	line:707
factSet0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet0 = network.emptyFactSet(())$/;"	constants	line:101
factSet0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet0 = network.emptyFactSet(())$/;"	constants	line:141
factSet0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet0 = network.emptyFactSet(())$/;"	constants	line:62
factSet0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet0 = network.emptyFactSet(())$/;"	constants	line:82
factSet1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet1 = factSet0.plusFacts(List(X(0)), ())$/;"	constants	line:102
factSet1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet1 = factSet0.plusFacts(List(X(0)), ())$/;"	constants	line:146
factSet1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet1 = factSet0.plusFacts(List(X(0)), ())$/;"	constants	line:66
factSet1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet1 = factSet0.plusFacts(List(X(0)), ())$/;"	constants	line:83
factSet2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet2 = factSet1.plusFacts(List(X(1)), ())$/;"	constants	line:103
factSet2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet2 = factSet1.plusFacts(List(X(1)), ())$/;"	constants	line:70
factSet2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet2 = factSet1.plusFacts(List(X(1)), ())$/;"	constants	line:84
factSet3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet3 = factSet2.plusFacts(List(W(1)), ())$/;"	constants	line:74
factSet3	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val factSet3 = factSet2.plusFacts(List(W(1)), ())$/;"	constants	line:85
facts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                    val facts = rule.derive(state.xtra, factList)$/;"	constants	line:173
failed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        var failed = 0$/;"	local variables	line:161
fieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldDecl = positioned($/;"	constants	line:241
fieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldLvalue = positioned($/;"	constants	line:283
fieldName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fieldName = freshVarName(optName)$/;"	constants	line:1249
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def fieldNamed(name: Name.Member): Option[VarSymbol.Field] = allFieldSymbols.find(_.isNamed(name))$/;"	methods	line:56
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    override def fieldNamed(name: Name.Member) = {$/;"	methods	line:233
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def fieldNamed(name: Name.Member): Option[VarSymbol.Field]$/;"	methods	line:92
fieldPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val fieldPath = fsym.kind match {$/;"	constants	line:1775
fieldSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymTabEntry(fld: reflect.Field) = {$/;"	methods	line:119
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymbol(inter: Interval)(fld: reflect.Field) = {$/;"	methods	line:186
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    def fieldSymbol = {$/;"	methods	line:108
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def fieldSymbol(memberName: Name.Member) = {$/;"	methods	line:247
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def fieldSymbol(memberName: Ast.MemberName) = {$/;"	methods	line:802
fieldSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^        val fieldSyms = loweredSource.pattern.symbols$/;"	constants	line:267
fieldValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldValue = positioned($/;"	constants	line:236
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^            val file = new File(path, baseName + ext)$/;"	constants	line:62
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = file$/;"	methods	line:23
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(cls.toString)$/;"	methods	line:43
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(name.toString)$/;"	methods	line:36
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def file: java.io.File$/;"	methods	line:6
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            def file = interFile$/;"	methods	line:450
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val file = $/;"	constants	line:26
fileWithExtension	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def fileWithExtension(ext: String) = {$/;"	methods	line:349
files	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^  * and they can't be serialized into class files, etc. *\/$/;"	classes	line:15
fillInStackTrace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^    public ControlFlowException fillInStackTrace() {$/;"	method	line:5
finalEnsures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^                val finalEnsures = ensures.filter(env.factIsFinalBy(_, method))$/;"	constants	line:50
finalSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val finalSym = new VarSymbol.Local($/;"	constants	line:64
findFieldSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def findFieldSym(memName: Name.Member) = {$/;"	methods	line:356
findGhostSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def findGhostSym(memName: Name.Member) = {$/;"	methods	line:360
first	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            var first = true$/;"	local variables	line:819
firstRight	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstRight[L,R](left0: L)(func: ((L, E) => Either[L,R])) = {$/;"	methods	line:98
firstSome	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstSome[F](func: (E => Option[F])) = {$/;"	methods	line:91
firstSuperClassOfferingMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def firstSuperClassOfferingMethod(pos: Position, mthdName: Name.Method): Type = {$/;"	methods	line:1188
flatArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val flatArgNodes = flattenAssignment(msym.msig.parameterPatterns, outArgNodes)$/;"	constants	line:401
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val flatArgs = flattenAssignment(msym.msig.parameterPatterns, outArgs)$/;"	constants	line:1024
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val flatArgs = flattenAssignment(msym.msig.parameterPatterns, outArgs)$/;"	constants	line:1011
flatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val flatArgs = flattenAssignment(msym.msig.parameterPatterns, args)$/;"	constants	line:622
flatParamTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    def flatParamTypes = parameterPatterns.flatMap(_.varTys)$/;"	methods	line:7
flatPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val flatPaths = flatArgs.map(_.path)$/;"	constants	line:1040
flattenAssignment	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def flattenAssignment($/;"	methods	line:319
flattenPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def flattenPair(pos: out.TypedPath)(pair: (Pattern.Any, SPath.Typed)): List[out.TypedPath] = {$/;"	methods	line:323
floatTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val floatTypes = List[Class[_]]($/;"	constants	line:51
flush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def flush() = {$/;"	methods	line:388
flush_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def flush_all(self):$/;"	member	line:459
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:536
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:539
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - AstPattern is a base class for Param and Lvalue$/;"	classes	line:410
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    \/** Base class for backward-chainable facts *\/$/;"	classes	line:22
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    \/** Base class for forward-chainable facts *\/$/;"	classes	line:17
forAnnotationsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forAnnotationsNamed(annotationNames: List[Name.Class]) = {$/;"	methods	line:56
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClass(cls: java.lang.Class[_]) = new InterPosition() {$/;"	methods	line:42
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forClass(cls: java.lang.Class[_]) = {$/;"	methods	line:48
forClassFromSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^    def forClassFromSource(csym: ClassFromSource) = {$/;"	methods	line:30
forClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClassNamed(name: Name.Class) = new InterPosition() {$/;"	methods	line:35
forEach	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <A> Void forEach($/;"	method	line:50
forFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forFile(file: java.io.File) = new InterPosition() {$/;"	methods	line:22
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = None$/;"	methods	line:601
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:608
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(name: VarName): Option[PathTypeArg]$/;"	methods	line:594
forJavaModifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forJavaModifiers(bits: Int) = {$/;"	methods	line:44
forLoweredAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forLoweredAnnotations(annotations: List[Ast.Lower.Annotation]) = {$/;"	methods	line:64
forMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forMember(mem: java.lang.reflect.Member) = {$/;"	methods	line:52
forResolvedAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forResolvedAnnotations(annotations: List[Ast.Resolve.Annotation]) = {$/;"	methods	line:60
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^    def forSym(csym: ClassFromSource): Unit = {$/;"	methods	line:15
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^    def forSym(csym: ClassFromSource) = log.indent("GatherExtends(", csym, ")") {$/;"	methods	line:92
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    def forSym(csym: ClassSymbol): Unit = log.indent("GatherOverrides(", csym, ")") {$/;"	methods	line:18
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = None$/;"	methods	line:607
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:600
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(name: VarName): Option[TypeTypeArg]$/;"	methods	line:593
format_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def format_error(outfilenm, linenum, msg):$/;"	function	line:175
format_error	/Users/niko/git/intervals-java/Harmonic/test_config.py	/^def format_error(outfilenm, linenum, msg):$/;"	function	line:7
fragment_count	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def fragment_count(self):$/;"	member	line:220
fresh	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val fresh = new VarSymbol.Local($/;"	constants	line:809
freshCounter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val freshCounter = new java.util.concurrent.atomic.AtomicInteger()$/;"	constants	line:257
freshInteger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def freshInteger = freshCounter.getAndIncrement$/;"	methods	line:258
freshLocalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def freshLocalName = Name.LocalVar("<temp-%d>".format(freshInteger))$/;"	methods	line:259
freshName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val freshName = Name.LocalVar("(env-%s)".format(global.freshInteger))$/;"	constants	line:612
freshVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshVarName(base: Option[Name.Var]) = {$/;"	methods	line:68
fromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val fromSym = global.csym(fromName)$/;"	constants	line:126
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val fsym = lowerMember.sym$/;"	constants	line:1831
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val fsym = lowerMember.sym$/;"	constants	line:1843
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val fsym = new VarSymbol.Field($/;"	constants	line:187
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val fsym = VarSymbol.errorField(memberVar, optExpTy)$/;"	constants	line:962
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val fsym = fieldSymbol(memberName)$/;"	constants	line:867
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val fsym = fieldSymbol(memberName)$/;"	constants	line:905
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val fsym = csym.fieldNamed(memberVar) match {$/;"	constants	line:939
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val fsym = new VarSymbol.Field(pos, modifiers, Name.Member(csym.name, name.text), ty, FieldKind.Harmonic, csym.create)$/;"	constants	line:166
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^            val fsym = new Field(NoPosition, Modifier.Set.empty, name, ty, FieldKind.Harmonic, elab) {$/;"	constants	line:140
fsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^            val fsyms: List[VarSymbol.Field] = classParam.symbols$/;"	constants	line:235
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fvis = cvis.visitField($/;"	constants	line:1252
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val fvis = cvis.visitField(O.ACC_PRIVATE, javaName, javaDesc, null, null)$/;"	constants	line:2295
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val gather: AsyncInterval = master.subinterval($/;"	constants	line:168
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val gather: AsyncInterval = master.subinterval($/;"	constants	line:161
gather	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def gather: AsyncInterval$/;"	methods	line:29
gatherMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def gatherMethodGroups($/;"	methods	line:87
genClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def genClassName(context: Name.Class, node: Ast.Node) = {$/;"	methods	line:46
generatePreAndPostCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def generatePreAndPostCode(stmts: List[in.Stmt])(doBody: => Unit) {$/;"	methods	line:1204
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def get(state: State) = state.mem.alpha(kind)$/;"	methods	line:129
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def get(state: State): Iterable[List[Fact.Forward]]$/;"	methods	line:142
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        override def get(state: State) = List(Nil)    $/;"	methods	line:147
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        override def get(state: State) = state.mem.beta(kinds)$/;"	methods	line:164
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    E get(int index);$/;"	method	line:4
getArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getArgs = appArgsList$/;"	constants	line:73
getArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    List<String> getArgs();$/;"	method	line:21
getBound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override def getBound: RoPoint = null \/\/bnd$/;"	methods	line:11
getBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override lazy val getBounds: Array[RoPoint] = {$/;"	constants	line:13
getEnd	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def getEnd = menv.mock(path.call(GetEnd)).asInstanceOf[RoPoint]$/;"	methods	line:16
getErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getErr = System.err$/;"	constants	line:72
getErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    PrintStream getErr();$/;"	method	line:18
getHarmonicField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def getHarmonicField(fsym: VarSymbol.Field) = {$/;"	methods	line:184
getId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def getId = "Node[%s]".format(System.identityHashCode(this))$/;"	methods	line:911
getId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def getId = "VarSymbol[%s]".format(System.identityHashCode(this))$/;"	methods	line:188
getId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def getId = "%s[%x]".format($/;"	methods	line:166
getId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    override def getId = "Intervals Page"$/;"	methods	line:64
getIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getIn = System.in$/;"	constants	line:70
getIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    InputStream getIn();$/;"	method	line:12
getOut	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getOut = System.out$/;"	constants	line:71
getOut	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    PrintStream getOut();$/;"	method	line:15
getParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def getParent = null$/;"	methods	line:913
getParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def getParent = null$/;"	methods	line:190
getParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def getParent = null$/;"	methods	line:171
getParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    override def getParent = root$/;"	methods	line:66
getParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def getParent = menv.mock(path.call(GetParent)).asInstanceOf[RoInterval]$/;"	methods	line:12
getRoot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                        val getRoot = root$/;"	constants	line:74
getRoot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^    Interval getRoot();$/;"	method	line:24
getStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def getStart = menv.mock(path.call(GetStart)).asInstanceOf[RoPoint]$/;"	methods	line:14
getTriggerMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    private[this] def getTriggerMethod(cls: Class[_]): reflect.Method = {$/;"	methods	line:9
ghostDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val ghostDecl = positioned($/;"	constants	line:247
ghostNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def ghostNamed(name: Name.Member): Option[GhostSymbol] = allGhostSymbols.find(_.isNamed(name))$/;"	methods	line:57
ghostNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    override def ghostNamed(name: Name.Member) = {$/;"	methods	line:240
ghostNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def ghostNamed(name: Name.Member): Option[GhostSymbol]$/;"	methods	line:95
ghostSymTabEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ghostSymTabEntries(ghosts: Ghosts): Array[SymTab.Entry] = {$/;"	methods	line:126
ghostSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ghostSymbol(ghost: Ghost) = {$/;"	methods	line:218
ghostSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def ghostSymbol(memberName: Name.Member) = {$/;"	methods	line:251
ghostSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ghostSymbols(ghosts: Ghosts): Array[GhostSymbol] = {$/;"	methods	line:226
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    val global: Global,$/;"	constants	line:8
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    val global: Global$/;"	constants	line:7
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val global: Global,$/;"	constants	line:22
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    implicit val global: Global,$/;"	constants	line:10
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val global: Global$/;"	constants	line:11
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val global = recurse.xtra.global$/;"	constants	line:556
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^                val global = new Global(config, reporter)$/;"	constants	line:13
global	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class ExtendedInterval(inter: Interval, implicit val global: Global) {$/;"	constants	line:545
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = methodGroups.group(msym)$/;"	constants	line:107
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = new MethodGroup(msym.name, msym.msig)$/;"	constants	line:53
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def group(msym: MethodSymbol) =$/;"	methods	line:81
groups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] val groups = new mutable.HashMap[Name.Method, List[MethodGroup]]()$/;"	constants	line:50
guard	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def guard: Path.Ref$/;"	methods	line:36
guardEnsuresFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def guardEnsuresFinal(guardPath: Path.Ref) = {$/;"	methods	line:741
guardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val guardPath = wr(array.toPath)$/;"	constants	line:787
guardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        def guardPath = GuardPath.v$/;"	methods	line:134
guardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        def guardPath: Path.Ref = {$/;"	methods	line:157
guardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def guardPath: Path.Ref$/;"	methods	line:184
guardPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val guardPath = subst.path(sym.guardPath)$/;"	constants	line:70
guardRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val guardRel: PackratParser[PcWcRel] = ($/;"	constants	line:213
handle_negative_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_negative_test(res, experrors, retcode, stdout, stderr):$/;"	function	line:549
handle_positive_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_positive_test(res, exp_output, retcode, stdout, stderr):$/;"	function	line:563
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.jcompat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/AnnType.java	/^package harmonic.jcompat;$/;"	package	line:1
harmonic.jcompat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghost.java	/^package harmonic.jcompat;$/;"	package	line:1
harmonic.jcompat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghosts.java	/^package harmonic.jcompat;$/;"	package	line:1
harmonic.jcompat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/OfType.java	/^package harmonic.jcompat;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/ApplicationContext.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Unscheduled.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/ControlFlowException.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Helper.java	/^package harmonic.runtime;$/;"	package	line:1
harmonic.runtime	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^package harmonic.runtime;$/;"	package	line:1
harmonicInit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val harmonicInit = "$Harmonic$init"$/;"	constants	line:21
harmonicInitDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def harmonicInitDesc(name: Name.Class) = {$/;"	methods	line:138
has	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ Most of these intervals do not have to do anything as this class has$/;"	classes	line:67
hasClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def hasClass($/;"	methods	line:77
hasClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def hasClass(spath: SPath, className: Name.Class): Boolean = {$/;"	methods	line:819
hasErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def hasErrors = reporter.hasErrors$/;"	methods	line:45
hasErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def hasErrors = !errors.isEmpty$/;"	methods	line:16
hb	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override def hb(pnt: RoPoint) = {$/;"	methods	line:28
hbeq	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override def hbeq(pnt: RoPoint) = {$/;"	methods	line:37
head	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                    val head = superLists(idx).head$/;"	constants	line:42
head	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val head = superList.head$/;"	constants	line:27
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val header: AsyncInterval = master.subinterval($/;"	constants	line:78
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val header: AsyncInterval = master.subinterval($/;"	constants	line:69
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def header: AsyncInterval$/;"	methods	line:20
help	/Users/niko/git/intervals-java/Harmonic/Makefile	/^help:$/;"	targets	line:22
helper	/Users/niko/git/intervals-java/Harmonic/test.py	/^        def helper(str):$/;"	member	line:411
here	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * nor do we generate the contents of the FooTask class here.$/;"	classes	line:1407
hprof	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:15
i	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        var i = 0$/;"	local variables	line:83
id	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val id = MethodId(className, name, msig.flatParamTypes, msig.returnTy)$/;"	constants	line:69
identifyBestFromMcall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def identifyBestFromMcall(msyms: List[MethodSymbol], rcvrTy: Type) =$/;"	methods	line:1032
identifyBestMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def identifyBestMethod($/;"	methods	line:990
ifElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifElse($/;"	method	line:26
ifNone	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def ifNone(func: => Option[E]) = option match {$/;"	methods	line:149
ifNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void ifNull($/;"	method	line:16
ifNullElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifNullElse($/;"	method	line:38
if_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void if_($/;"	method	line:7
ignoreErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var ignoreErrors = false$/;"	local variables	line:22
impThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impThis = positioned($/;"	constants	line:408
impVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impVoid = ($/;"	constants	line:427
implClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val implClassName = csym.name.withSuffix(implSuffix)$/;"	constants	line:2275
implSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val implSuffix = "$Harmonic$Impl"$/;"	constants	line:19
implementingNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val implementingNames = csym.superClassNames.filterNot(_ == Name.ObjectClass)$/;"	constants	line:2158
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:8
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        implicit val implicitGlobal = global$/;"	constants	line:57
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:13
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:13
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:7
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:18
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:15
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:14
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:15
implicitGlobal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerRelDecl.scala	/^    implicit val implicitGlobal = global$/;"	constants	line:14
importDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val importDecl = positioned($/;"	constants	line:116
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    type CND <: Ast.Name    \/\/ Name of class in declaration (starts out unqual, becomes qual)$/;"	classes	line:41
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val in.FieldDecl(_, Ast.MemberName(name), _, in.Body(stmts)) = lowerMember.memberDecl$/;"	constants	line:1842
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val in.RelDecl(_, from, PcHb, to) = lowerMember.memberDecl$/;"	constants	line:1854
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val in.DeclareVarLvalue(anns, _, name, ()) = lv$/;"	constants	line:815
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val in.RelDot(base, mname) = relDot$/;"	constants	line:237
inBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def inBlock = (flags & IN_BLOCK) != 0$/;"	methods	line:738
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = Member(className, text)        $/;"	methods	line:182
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = this$/;"	methods	line:162
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class): Member$/;"	methods	line:179
inMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    val inMemberDecl: in.MemberDecl$/;"	constants	line:12
inRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val inRcvr = in.Static(className)$/;"	constants	line:465
ind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    protected[this] var ind = 0$/;"	local variables	line:6
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indent() {$/;"	methods	line:8
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def indent[R](args: Object*)(func: => R) = {$/;"	methods	line:400
indentLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val indentLine = context.log(context.link(indentPage, "\\u25B2"))$/;"	constants	line:359
indentLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val indentLine = context.log(context.link(indentPage, "\\u25B2"))$/;"	constants	line:402
indentPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val indentPage = Lathos.newPage(context.server, context.topPage, null, args: _*)$/;"	constants	line:358
indentPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val indentPage = Lathos.newPage(context.server, context.topPage, null, args: _*)$/;"	constants	line:401
indentPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val indentPage = context.pushEmbeddedChild(null, args: _*)$/;"	constants	line:385
indented	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indented(start: String, end: String)(func: => Unit) {$/;"	methods	line:22
infTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val infTypeRef = positioned($/;"	constants	line:296
inferredReturnType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def inferredReturnType(env: Env, stmts: List[out.Stmt]) = {$/;"	methods	line:86
info	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val info = global.intervalsPage.registerInterval(parentPage, interPage)$/;"	constants	line:568
info	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        val info = new IntervalInfo(parentPage, log)$/;"	constants	line:54
infos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    private[this] val infos = new mutable.ArrayBuffer[IntervalInfo]()$/;"	constants	line:51
initInlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def initInlineInterval($/;"	methods	line:1409
initPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val initPath = env.symPath(Path.ThisInit)$/;"	constants	line:269
initReqs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def initReqs(msym: MethodSymbol) = {$/;"	methods	line:112
initReqs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def initReqs(msym: MethodSymbol) = {$/;"	methods	line:9
inlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def inlineInterval[R](name: String)(func: (Interval => R)): R = {$/;"	methods	line:634
innerClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val innerClassName = className~"$"~ident ^^ { $/;"	constants	line:56
inputFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val inputFiles = new ListBuffer[File]()$/;"	constants	line:15
inputKinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val inputKinds = List(classOf[K.PathEq], otherKind)$/;"	constants	line:146
inputKinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val inputKinds = List(kind)$/;"	constants	line:51
inputKinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val inputKinds = List(kind)$/;"	constants	line:85
inputKinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def inputKinds: List[Fact.ForwardKind]$/;"	methods	line:48
inputKinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        val inputKinds = {$/;"	constants	line:57
integer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def integer(idx: Int) = Constant(java.lang.Integer.valueOf(idx))$/;"	methods	line:46
integer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def integer(idx: Int) = Constant(java.lang.Integer.valueOf(idx))$/;"	methods	line:125
integralTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val integralTypes = List[Class[_]]($/;"	constants	line:44
inter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def inter: Path.Ref$/;"	methods	line:37
interAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interAccessMap = deriveAccessMap(taskClassName, interwr.cvis, body.stmts)$/;"	constants	line:1322
interPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val interPage = Lathos.newPage($/;"	constants	line:558
interPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val interPath = csym.loweredSource.thisSym.toSPath \/ fsym$/;"	constants	line:2255
interStmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val interStmtVisitor = new StatementVisitor(0, interAccessMap, IntConstant(0), runmvis)$/;"	constants	line:1372
interfaceClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^                val interfaceClasses = cls.getInterfaces.toList$/;"	constants	line:37
interfaceMethodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interfaceMethodSig = MethodSignature[Pattern.Ref]($/;"	constants	line:1597
interfaceTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^                val interfaceTypes = cls.getGenericInterfaces.toList$/;"	constants	line:53
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val internalImplName = global.csym(name).internalImplName$/;"	constants	line:1045
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def internalImplName = name.internalName$/;"	methods	line:14
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def internalImplName = name.internalName + ByteCode.implSuffix$/;"	methods	line:21
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def internalImplName: String$/;"	methods	line:35
internalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def internalName = base.toInternalPrefix + name$/;"	methods	line:78
intersectArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def intersectArgs(leftArgs: List[Type.Arg], rightArgs: List[Type.Arg]) = {$/;"	methods	line:439
intersects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def intersects(seq: Seq[E]): Boolean =$/;"	methods	line:112
interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        var interval: Interval = null$/;"	local variables	line:21
intervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val intervalDecl = positioned($/;"	constants	line:225
intervalsPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val intervalsPage = new debug.Intervals(debugServer, rootPage)$/;"	constants	line:34
interwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interwr = new ClassWriter(taskClassName, noSuffix, body.pos)$/;"	constants	line:1309
intrinsics	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val intrinsics = new mutable.HashMap[(Name.Qual, Name.Method), List[MethodSymbol]]()$/;"	constants	line:111
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def is(otherName: Name.Class) = name.is(otherName)$/;"	methods	line:995
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def is(otherName: Name.Member) = name.is(otherName)$/;"	methods	line:1008
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** When a new instance of this class is created, what should we REALLY instantiate? *\/$/;"	classes	line:34
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    \/\/\/ for the class is completed.$/;"	classes	line:15
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    def is(methodId: MethodId) = (this == methodId)$/;"	methods	line:10
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def is(name: Name.Class) = (this == name)$/;"	methods	line:59
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def is(name: Name.Method) = (this == name)$/;"	methods	line:133
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def is(otherName: LocalVar) = (this == otherName)$/;"	methods	line:170
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def is(otherName: Name.Member) = (this == otherName)$/;"	methods	line:153
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def is(r: Ref) = (this == r)$/;"	methods	line:15
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def is(rel: PcRel) = (rel == this)$/;"	methods	line:4
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    def is(ty: Type) = (this == ty)$/;"	methods	line:7
isAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isAbstract = contains(Abstract)$/;"	methods	line:23
isAssignable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isAssignable(spath: SPath.Typed, ty: Type): Boolean = {$/;"	methods	line:826
isAtomicPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def isAtomicPath(path: SPath.Typed) = path match {$/;"	methods	line:1245
isBestChoice	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def isBestChoice(msym: MethodSymbol) = {$/;"	methods	line:669
isBetterChoiceThan	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def isBetterChoiceThan(msym_better: MethodSymbol, msym_worse: MethodSymbol) = {$/;"	methods	line:655
isBoundedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override def isBoundedBy(pnt: RoPoint): Boolean = {$/;"	methods	line:24
isCompatibleWith	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def isCompatibleWith($/;"	methods	line:58
isCompleted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def isCompleted = (result == "OK")$/;"	methods	line:33
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInPathArg: Boolean = false$/;"	methods	line:15
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true        $/;"	methods	line:27
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true$/;"	methods	line:20
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInTypeArg: Boolean = false$/;"	methods	line:16
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInTypeArg = true$/;"	methods	line:24
isDeclaredByCls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isDeclaredByCls(member: reflect.Member) = (member.getDeclaringClass == cls)$/;"	methods	line:29
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^                override def isError = true$/;"	methods	line:141
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^                override def isError = true$/;"	methods	line:39
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^            override def isError = true$/;"	methods	line:166
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def isError: Boolean = false$/;"	methods	line:11
isFailed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def isFailed = (result.isInstanceOf[Throwable])$/;"	methods	line:32
isFromClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def isFromClassNamed(aName: Name.Qual) = (className == aName)$/;"	methods	line:71
isGoodHead	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            def isGoodHead(superList: List[ClassSymbol]) = {$/;"	methods	line:26
isInline	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def isInline: Boolean = {$/;"	methods	line:31
isInlineSubintervalOfOrEqualTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def isInlineSubintervalOfOrEqualTo(inter: RoInterval): Boolean = {$/;"	methods	line:39
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isInstanceFieldNamed(aName: Name.Member): Boolean = false$/;"	methods	line:7
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isInstanceFieldNamed(aName: Name.Member): Boolean = (name == aName)$/;"	methods	line:19
isJavaInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isJavaInterface = cls.getModifiers.containsBit(jModifier.INTERFACE)$/;"	methods	line:27
isMutable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isMutable = contains(Mutable)$/;"	methods	line:32
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def isNamed(aName: Name.Qual) = (name == aName)$/;"	methods	line:23
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def isNamed(aName: Name.Member) = (name == aName)$/;"	methods	line:112
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def isNamed(aName: Name.Method) = (name == aName)$/;"	methods	line:73
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def isNamed(aName: Name.Var) = (name == aName)$/;"	methods	line:182
isNotAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotAbstract = !contains(Abstract)$/;"	methods	line:24
isNotMutable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotMutable = !contains(Mutable)$/;"	methods	line:33
isNotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotOverride = !contains(Override)$/;"	methods	line:27
isNotStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotStatic = !contains(Static)$/;"	methods	line:30
isNotUnscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotUnscheduled = !contains(Unscheduled)$/;"	methods	line:36
isObject	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isObject = name is Name.ObjectClass$/;"	methods	line:26
isOfClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^        def isOfClass(path: Path.Ref, cls: Name.Class) = {$/;"	methods	line:32
isOperCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperCont(c: Char) = c != EofCh && !c.isWhitespace && !sep.contains(c)$/;"	methods	line:35
isOperStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperStart(c: Char) = isOperCont(c) && !c.isLetter && !c.isDigit$/;"	methods	line:36
isOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isOverride = contains(Override)$/;"	methods	line:26
isPreferable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        def isPreferable(oldClass: java.lang.Class[_], newClass: java.lang.Class[_]): Option[Boolean] = {$/;"	methods	line:317
isPrivate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isPrivate(member: reflect.Member) = member.getModifiers.containsBit(jModifier.PRIVATE)$/;"	methods	line:28
isRunning	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def isRunning = (result == "Run")$/;"	methods	line:31
isSatisfiedForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def isSatisfiedForPath(arg: Type.Arg): Boolean = {$/;"	methods	line:830
isStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isStatic = contains(Static)$/;"	methods	line:29
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def isSubclass(superCsym: ClassSymbol): Boolean = {$/;"	methods	line:70
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def isSubclass(ty_sub: Type, ty_sup: Type): Boolean = {$/;"	methods	line:671
isSubintervalOfOrEqualTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def isSubintervalOfOrEqualTo(inter: RoInterval): Boolean = {$/;"	methods	line:35
isSubtype	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSubtype(ty1: Type, ty2: Type): Boolean = {$/;"	methods	line:804
isSuitable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def isSuitable(member: reflect.Member) = isDeclaredByCls(member) && !isPrivate(member)$/;"	methods	line:30
isSuitableArgument	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSuitableArgument(ty_val: Type, ty_pat: Type): Boolean = {$/;"	methods	line:571
isSuitableArgument1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def isSuitableArgument1(ty_val: Type, ty_pat: Type): Boolean = {$/;"	methods	line:541
isUnscheduled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isUnscheduled = contains(Unscheduled)$/;"	methods	line:35
isWaiting	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def isWaiting = (result == "Wait")$/;"	methods	line:30
iterableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableClass = classOf[java.lang.Iterable[_]]$/;"	constants	line:112
iterableTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableTy = Type.Class(iterableClass)$/;"	constants	line:124
jBit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	constants	line:8
javaDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val javaDesc = fsym.ty.toAsmType.getDescriptor$/;"	constants	line:2293
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val javaName = accessorName(fsym.name)$/;"	constants	line:2292
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = parts.mkString("$")$/;"	methods	line:131
javaReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val javaReader = Util.javaReaderFromFile(interFile)$/;"	constants	line:457
javaReaderFromFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromFile(file: java.io.File) = new java.io.FileReader(file)$/;"	methods	line:19
javaReaderFromPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromPath(path: String) = javaReaderFromFile(new java.io.File(path))$/;"	methods	line:18
join	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def join = {$/;"	methods	line:9
join	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def join() = {$/;"	methods	line:607
joinIfLess	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var joinIfLess = 0$/;"	local variables	line:27
joinIfMore	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var joinIfMore = Integer.MAX_VALUE$/;"	local variables	line:26
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val key = (msym.name, msym.msig.parameterPatterns)$/;"	constants	line:345
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val key = (mthd.getName, mthd.getParameterTypes.toList)$/;"	constants	line:297
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val key = (msym.className, msym.name)$/;"	constants	line:114
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val kind: Class[_ <: (K.Paths with Fact.Forward)]$/;"	constants	line:48
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val kind: Class[_ <: (K.Types with Fact.Forward)]$/;"	constants	line:82
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val kind: FieldKind,$/;"	constants	line:125
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val kind: MethodKind,            \/** Intrinsic, harmonic, java, etc. *\/$/;"	constants	line:61
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^        override def kind: Fact.BackwardKind = getClass.asSubclass(classOf[Backward])$/;"	methods	line:24
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^        override def kind: Fact.ForwardKind = getClass.asSubclass(classOf[Forward])$/;"	methods	line:19
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^    def kind: Fact.Kind = getClass.asSubclass(classOf[Fact])$/;"	methods	line:8
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val kind: Fact.BackwardKind$/;"	constants	line:199
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val kind: Fact.ForwardKind$/;"	constants	line:125
kinds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val kinds: List[Fact.ForwardKind],$/;"	constants	line:155
label	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val label = new asm.Label()$/;"	constants	line:319
labels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val labels = msyms.map(_ => new asm.Label()).toArray$/;"	constants	line:2090
lbLvalueTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val lbLvalueTys = lowerBounds(ty)$/;"	constants	line:857
lbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val lbs = wt.getLowerBounds$/;"	constants	line:137
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left = child$/;"	methods	line:31
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left = guard$/;"	methods	line:39
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left = inter$/;"	methods	line:60
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left = path$/;"	methods	line:104
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left = sub$/;"	methods	line:94
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left: Path.Ref$/;"	methods	line:14
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def left: Type$/;"	methods	line:78
left	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^        def left: L$/;"	methods	line:30
leftArgsUp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftArgsUp = leftArgs.filter(appliesTo(bestCsym))$/;"	constants	line:526
leftCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftCsym = global.csym(leftName)$/;"	constants	line:519
leftMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val leftMap = leftArgs.map(arg => (arg.name, arg)).toMap$/;"	constants	line:440
leftMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val leftMro = leftCsym.mro$/;"	constants	line:521
leftTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val leftTy = Type.Class(leftClass)$/;"	constants	line:76
length	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    int length();$/;"	method	line:6
lexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    val lexical = new StdLexical()$/;"	constants	line:28
lexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    val lexical = new HlLexical$/;"	constants	line:55
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:24
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:30
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:37
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:44
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                    val line = state.log.log("\\u2022 Invoking rule ", rule)$/;"	constants	line:172
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val line = state.log.log("newFactList(", factList, ")")$/;"	constants	line:169
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:26
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:39
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:46
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = "<unknown>"$/;"	methods	line:32
list	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def list(data: Iterable[Any]) {$/;"	methods	line:469
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    protected[this] def loadData(inter: Interval) = {$/;"	methods	line:12
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    protected[this] def loadData(current: Interval): Data$/;"	methods	line:43
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    protected[this] def loadData(inter: Interval) = Data($/;"	methods	line:9
loadData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    protected[this] def loadData(inter: Interval) = Data($/;"	methods	line:32
loadFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def loadFrom(args: Array[String]): Boolean = {$/;"	methods	line:82
loadSourceFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        def loadSourceFile(file: java.io.File) {$/;"	methods	line:182
loadVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def loadVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:176
loadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def loadedOrLoadable(className: Name.Class) = synchronized {$/;"	methods	line:142
localIsDefined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def localIsDefined(name: Name.LocalVar) = $/;"	methods	line:315
localName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val localName = ident ^^ {$/;"	constants	line:66
localName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val localName = positioned(varIdent ^^ { s => Ast.LocalName(Name.LocalVar(s)) })    $/;"	constants	line:91
localize	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var localize = false$/;"	local variables	line:24
locals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def locals = xtra.locals$/;"	methods	line:223
locateSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] def locateSource(className: Name.Class) = synchronized {        $/;"	methods	line:177
lock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    val lock = Intervals.lock(getId)$/;"	constants	line:54
locks	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    override def locks(lock: RoLock) = {$/;"	methods	line:27
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^    val log = Lathos.context$/;"	constants	line:14
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Gather.scala	/^        val log = lathos.Lathos.context$/;"	constants	line:16
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^    val log = Lathos.context$/;"	constants	line:24
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    val log = Lathos.context$/;"	constants	line:14
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                val log = Lathos.context$/;"	constants	line:78
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    val log = Lathos.context$/;"	constants	line:19
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^    val log = Lathos.context$/;"	constants	line:13
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val log = global.debugServer.context$/;"	constants	line:14
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val log = global.debugServer.contextForPageTitled("Parse", interFile)$/;"	constants	line:456
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    val log = global.debugServer.context$/;"	constants	line:572
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val log = Lathos.contextOrNone$/;"	constants	line:528
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val log = Lathos.contextOrNone$/;"	constants	line:635
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        val log: lathos.Page$/;"	constants	line:15
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val log = lathos.Lathos.context$/;"	constants	line:57
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val log = {$/;"	constants	line:276
log	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^        val log = Lathos.context$/;"	constants	line:62
log	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def log(self, text):$/;"	member	line:454
lookupBean	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupBean($/;"	methods	line:372
lookupEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupEntry(csym: ClassSymbol, uName: Name.UnloweredMember): CanFail[SymTab.MemberEntry] = {$/;"	methods	line:285
lookupFieldLike	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupFieldLike($/;"	methods	line:352
lookupInstanceMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupInstanceMethods($/;"	methods	line:403
lookupInstanceMethodsDefinedOnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupInstanceMethodsDefinedOnClass($/;"	methods	line:393
lookupIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def lookupIntrinsic(className: Name.Qual, methodName: Name.Method): Option[List[MethodSymbol]] = {$/;"	methods	line:120
lookupMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupMember[R]($/;"	methods	line:324
lookupThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupThis = $/;"	methods	line:318
lookupTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupTypeVar($/;"	methods	line:342
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val lower: AsyncInterval = master.subinterval($/;"	constants	line:109
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val lower: AsyncInterval = master.subinterval($/;"	constants	line:100
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def lower: AsyncInterval$/;"	methods	line:23
lowerAbstractableBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerAbstractableBody($/;"	methods	line:99
lowerAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerAnnotation(ann: in.Annotation) = withPosOf(ann, {$/;"	methods	line:582
lowerAnyParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerAnyParams[S <: VarSymbol.Any]($/;"	methods	line:192
lowerAnyPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerAnyPath(path: in.AnyPathNode): out.AnyPath = {$/;"	methods	line:499
lowerBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerBlock(optExpTy: Option[Type])(tmpl: in.Block) = withPosOf(tmpl, log.embeddedIndent("lowerBlock(", optExpTy, ")(", tmpl, ")") {$/;"	methods	line:1146
lowerBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBlockParam(env: Env, expTy: Type, inParam: in.Param[Unit]) = {$/;"	methods	line:184
lowerBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBody(env: Env, body: in.Body): out.Body = {$/;"	methods	line:703
lowerBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lowerBounds(ty: Type) = {$/;"	methods	line:257
lowerCast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerCast(expr: in.Cast) = withPosOf(expr, {$/;"	methods	line:1181
lowerClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerClassParam(csym: ClassFromSource, classEnv: Env, inParam: in.Param[Unit]) = {$/;"	methods	line:164
lowerDeclaredVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerDeclaredVar(lv: in.DeclareVarLvalue, ty: Type, rv: out.TypedPath) = {$/;"	methods	line:814
lowerExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExpr(optExpTy: Option[Type])(expr: in.Expr): out.Expr = expr match {$/;"	methods	line:1205
lowerExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExtendsArg(arg: in.ExtendsArg): out.TypedPath = withPosOf(arg, {$/;"	methods	line:589
lowerExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExtendsDecl(extendsDecl: in.ExtendsDecl) = withPosOf(extendsDecl, {$/;"	methods	line:599
lowerField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerField(optExpTy: Option[Type])(expr: in.Field) = withPosOf(expr, {$/;"	methods	line:923
lowerFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerFieldDecl($/;"	methods	line:143
lowerFromInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerFromInExpr(pair: (in.Lvalue, in.Expr)): Unit = {$/;"	methods	line:873
lowerFromOutTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerFromOutTypedPath(pair: (in.Lvalue, out.TypedPath)): Unit = {$/;"	methods	line:842
lowerImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerImpThis(expr: in.Expr) = withPosOf(expr, {$/;"	methods	line:1177
lowerIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerIntervalDecl($/;"	methods	line:64
lowerLiteralExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLiteralExpr(expr: in.Literal) = withPosOf(expr, {$/;"	methods	line:986
lowerMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def lowerMembers = LowerMembers.v$/;"	methods	line:223
lowerMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerMethodCall(optExpTy: Option[Type])(mcall: in.MethodCall) = withPosOf(mcall, {$/;"	methods	line:1031
lowerMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodDecl($/;"	methods	line:109
lowerMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodParams(classEnv: Env, inParams: List[in.Param[Unit]]) = {$/;"	methods	line:176
lowerNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewCtor(expr: in.NewCtor) = withPosOf(expr, {$/;"	methods	line:1084
lowerNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNull(optExpTy: Option[Type])(expr: in.Null) = withPosOf(expr, {$/;"	methods	line:1117
lowerParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerParam($/;"	methods	line:201
lowerReassignedField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerReassignedField(memberName: Ast.MemberName, fsym: VarSymbol.Field, rv: out.TypedPath) = {$/;"	methods	line:835
lowerReassignedVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def lowerReassignedVar(localName: Ast.LocalName, sym: VarSymbol.Local, rv: out.TypedPath) = {$/;"	methods	line:828
lowerRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerRelDecl($/;"	methods	line:54
lowerRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerRequirement(req: in.Requirement) = withPosOf(req, $/;"	methods	line:573
lowerStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerStmts(env0: Env, stmts: List[in.Stmt]): List[out.Stmt] = {$/;"	methods	line:707
lowerToTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerToTypedPath(optExpTy: Option[Type])(expr: in.Expr): SPath.Typed = {$/;"	methods	line:1220
lowerToTypedPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerToTypedPathNode(optExpTy: Option[Type])(expr: in.Expr): out.TypedPath = {$/;"	methods	line:1224
lowerTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTuple(optExpTy: Option[Type])(tuple: in.Tuple) = withPosOf(tuple, {$/;"	methods	line:1122
lowerTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeRef(tref: in.ResolveTypeRef): out.TypeRef = withPosOf(tref, {$/;"	methods	line:567
lowerTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypedPath(path: in.AnyPathNode): out.TypedPath = {$/;"	methods	line:495
loweredMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def loweredMethods = LoweredMethods.v$/;"	methods	line:247
loweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def loweredSource = LoweredSource.v$/;"	methods	line:250
lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val lvalue: PackratParser[out.Lvalue] = tupleLvalue | declLvalue | reassignLvalue | fieldLvalue$/;"	constants	line:290
lvsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val lvsym = locals.get(name).getOrElse(VarSymbol.errorLocal(name, None))$/;"	constants	line:102
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        def main(args: Array[String]): Unit = {$/;"	methods	line:37
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    def main(args: Array[String]) {$/;"	methods	line:91
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^    def main(args: Array[String]) {$/;"	methods	line:8
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def main(args: Array[String]) {$/;"	methods	line:156
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^    public Object main(ApplicationContext ctx);$/;"	method	line:6
main	/Users/niko/git/intervals-java/Harmonic/test.py	/^def main(args):$/;"	function	line:660
makeBackwardNetwork	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def makeBackwardNetwork(context: Context) = {$/;"	methods	line:119
makeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def makeRef(ctr: AtomicInteger)(anon: Pattern.Anon): Pattern.Ref = {$/;"	methods	line:111
makeRefs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def makeRefs(anons: List[Pattern.Anon]): List[Pattern.Ref] = {$/;"	methods	line:106
makeSimpleNetwork	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def makeSimpleNetwork(context: Context) = {$/;"	methods	line:33
map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^class Subst(private val map: Map[Path.Ref, Path.Ref]) {$/;"	constants	line:5
map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def map(data: Iterable[(Any, Any)]) {$/;"	methods	line:481
mapAsPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def mapAsPrefix[F](list: List[F])(func: (E => F)): List[F] = {$/;"	methods	line:105
mapContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def mapContext[C,F](context: C, func: (E => (C, F))): (C, List[F]) = {$/;"	methods	line:118
master	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    var master: Interval = null$/;"	local variables	line:73
masterDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val masterDesc = descFunc(masterSig)$/;"	constants	line:1700
masterIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        private[this] def masterIndent[R](args: Object*)(func: => R) = {$/;"	methods	line:356
matchAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def matchAll[R](funcs: (C => R)*): List[R] = {$/;"	methods	line:48
matches	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def matches(unlowerName: UnloweredMember) = unlowerName match {$/;"	methods	line:157
matches	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                    val matches = queryArgs.forall { $/;"	constants	line:93
matchesByClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def matchesByClass(pattern: Pattern.Ref, ty: Type): Boolean = {$/;"	methods	line:686
matching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val matching = msyms.takeWhile(_.isFromClassNamed(csym.name))$/;"	constants	line:2056
mathOps	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val mathOps = List($/;"	constants	line:58
maxIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxIndex = 0$/;"	local variables	line:591
maxSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxSlot = 0$/;"	local variables	line:559
measure	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def measure[R](label: String)(func: => R) = {$/;"	methods	line:506
mem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val mem = memories$/;"	constants	line:110
mem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val mem = memories$/;"	constants	line:131
mem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val mem = memories$/;"	constants	line:89
mem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val mem: Memory,$/;"	constants	line:53
member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val member: PackratParser[out.MemberDecl] = ($/;"	constants	line:170
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    override def memberDecl: out.FieldDecl = outFieldDecl.v$/;"	methods	line:33
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    override def memberDecl: out.IntervalDecl = outIntervalDecl.v$/;"	methods	line:29
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def memberDecl: out.MemberDecl$/;"	methods	line:16
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    override def memberDecl: out.MethodDecl = outMethodDecl.v$/;"	methods	line:50
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerRelDecl.scala	/^    override def memberDecl: out.RelDecl = outRelDecl.v$/;"	methods	line:29
memberLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    private[this] val memberLower: AsyncInterval = {$/;"	constants	line:20
memberLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    private[this] val memberLower: AsyncInterval = {$/;"	constants	line:16
memberLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val memberLower: AsyncInterval = {$/;"	constants	line:35
memberLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerRelDecl.scala	/^    private[this] val memberLower: AsyncInterval = {$/;"	constants	line:16
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val memberName = "("~className~"#"~ident~")" ^^ {$/;"	constants	line:62
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val memberName = Name.Member(name, fld.getName)$/;"	constants	line:120
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val memberName = varName$/;"	constants	line:93
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                                    val memberName = Name.Member(className, text)$/;"	constants	line:437
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:418
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:557
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val memberName = resolveMemberName(expr.name)$/;"	constants	line:663
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val memberVar = expr.name.name.inDefaultClass(Name.ObjectClass)$/;"	constants	line:961
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val memberVar = expr.name.name match {$/;"	constants	line:927
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val members: AsyncInterval = master.subinterval($/;"	constants	line:130
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** List of class members being lowered. *\/$/;"	classes	line:221
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val members: AsyncInterval = master.subinterval($/;"	constants	line:121
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def members: AsyncInterval$/;"	methods	line:25
memories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    private[this] def memories = {$/;"	methods	line:68
menv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val menv = new mock.MockEnv(recurse)$/;"	constants	line:575
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    lazy val merge: AsyncInterval = master.subinterval($/;"	constants	line:140
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val merge: AsyncInterval = master.subinterval($/;"	constants	line:130
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def merge: AsyncInterval$/;"	methods	line:26
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        def merge(superLists: List[List[ClassSymbol]]): List[ClassSymbol] = {$/;"	methods	line:16
mergeMemberIntervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Merge.scala	/^    def mergeMemberIntervals(csym: ClassFromSource) {$/;"	methods	line:15
mergeSuperSymbolTables	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def mergeSuperSymbolTables(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:61
method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        val method = env.symPath(Path.ThisInit)$/;"	constants	line:41
method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        val method = checkBasics(getTriggerMethod(getClass), classOf[Boolean], 2, 2)$/;"	constants	line:81
method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        val method = checkBasics(getTriggerMethod(getClass), classOf[Iterable[Any]], 2, Integer.MAX_VALUE)$/;"	constants	line:55
methodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val methodDecl = positioned($/;"	constants	line:178
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def methodGroups = MethodGroups.v$/;"	methods	line:282
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val methodGroups = gatherMethodGroups(csym, env)$/;"	constants	line:42
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val methodGroups = new MethodGroups(env)$/;"	constants	line:91
methodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val methodId = "("~className~"#"~rep1(methodPart)~ty~")" ^^ {$/;"	constants	line:74
methodMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val methodMap = new mutable.HashMap[(Name.Method, List[Pattern.Ref]), MethodSymbol]()$/;"	constants	line:338
methodMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val methodMap = new mutable.HashMap[(String, List[Class[_]]), reflect.Method]()$/;"	constants	line:294
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^            val methodName = Name.Method(parts.map(_._1))$/;"	constants	line:76
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val methodName = Name.Method(List(prop))$/;"	constants	line:380
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val methodName: Name.Method,$/;"	constants	line:16
methodPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val methodPart = ident~"("~comma(ty)~")" ^^ {$/;"	constants	line:70
methodPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val methodPath = methodSym.toSPath$/;"	constants	line:289
methodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val methodSig = MethodSignature($/;"	constants	line:1560
methodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def methodSignature(msig: MethodSignature[_ <: Pattern.Any]) = {$/;"	methods	line:57
methodSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val methodSym = new VarSymbol.Local($/;"	constants	line:282
methodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def methodSymbol(inter: Interval)(mthd: reflect.Method) = {$/;"	methods	line:260
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def methodsNamed(name: Name.Method): List[MethodSymbol] = allMethodSymbols.filter(_.isNamed(name))$/;"	methods	line:55
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    override def methodsNamed(mthdName: Name.Method) = {$/;"	methods	line:229
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def methodsNamed(name: Name.Method): List[MethodSymbol]$/;"	methods	line:87
minimalUpperBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def minimalUpperBounds(ty: Type) = {$/;"	methods	line:267
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Byte l, Double r) { return l - r; }$/;"	method	line:129
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Byte r) { return l - r; }$/;"	method	line:204
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Double r) { return l - r; }$/;"	method	line:219
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Float r) { return l - r; }$/;"	method	line:216
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Integer r) { return l - r; }$/;"	method	line:210
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Long r) { return l - r; }$/;"	method	line:213
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Short r) { return l - r; }$/;"	method	line:207
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Float l, Double r) { return l - r; }$/;"	method	line:201
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Integer l, Double r) { return l - r; }$/;"	method	line:165
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Long l, Double r) { return l - r; }$/;"	method	line:183
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Short l, Double r) { return l - r; }$/;"	method	line:147
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Byte l, Float r) { return l - r; }$/;"	method	line:126
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Byte r) { return l - r; }$/;"	method	line:186
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Float r) { return l - r; }$/;"	method	line:198
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Integer r) { return l - r; }$/;"	method	line:192
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Long r) { return l - r; }$/;"	method	line:195
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Short r) { return l - r; }$/;"	method	line:189
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Integer l, Float r) { return l - r; }$/;"	method	line:162
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Long l, Float r) { return l - r; }$/;"	method	line:180
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Short l, Float r) { return l - r; }$/;"	method	line:144
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Byte r) { return l - r; }$/;"	method	line:114
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Integer r) { return l - r; }$/;"	method	line:120
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Short r) { return l - r; }$/;"	method	line:117
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Byte r) { return l - r; }$/;"	method	line:150
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Integer r) { return l - r; }$/;"	method	line:156
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Short r) { return l - r; }$/;"	method	line:153
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Byte r) { return l - r; }$/;"	method	line:132
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Integer r) { return l - r; }$/;"	method	line:138
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Short r) { return l - r; }$/;"	method	line:135
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Byte l, Long r) { return l - r; }$/;"	method	line:123
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Integer l, Long r) { return l - r; }$/;"	method	line:159
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Byte r) { return l - r; }$/;"	method	line:168
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Integer r) { return l - r; }$/;"	method	line:174
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Long r) { return l - r; }$/;"	method	line:177
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Short r) { return l - r; }$/;"	method	line:171
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Short l, Long r) { return l - r; }$/;"	method	line:141
mock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    def mock(path: Path.Ref) = tryMock(path).get$/;"	methods	line:94
mockedObjects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] val mockedObjects = new mutable.HashMap[Path.Ref, Object]()$/;"	constants	line:12
mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val mod = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:817
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def modifiers: Modifier.Set = LoadedData.join.modifiers$/;"	methods	line:46
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val modifiers = Modifier.forMember(fld)$/;"	constants	line:121
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def modifiers = {$/;"	methods	line:199
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val modifiers = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:243
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val modifiers: Modifier.Set,$/;"	constants	line:122
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val modifiers: Modifier.Set,$/;"	constants	line:150
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val modifiers = Modifier.Set.empty$/;"	constants	line:110
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val modifiers: Modifier.Set$/;"	constants	line:172
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val modifiers: Modifier.Set,$/;"	constants	line:60
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def modifiers: Modifier.Set$/;"	methods	line:10
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def mro: List[ClassSymbol] = Mro.join$/;"	methods	line:61
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def mro = Mro.join$/;"	methods	line:192
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def mro: List[ClassSymbol]$/;"	methods	line:67
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = global.csym(className).mro$/;"	constants	line:409
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = global.csym(classTy.name).mro$/;"	constants	line:271
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val mro = csym.mro$/;"	constants	line:286
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val mro = env.thisCsym.mro$/;"	constants	line:1191
mroIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mroIndex = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1721
mroInt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mroInt = accessMap.pathToFreshSlot(asm.Type.INT_TYPE) $/;"	constants	line:2082
mroMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def mroMethodDescFromSig(msig: MethodSignature[_ <: Pattern.Any]): String = {$/;"	methods	line:149
msg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        def msg = $/;"	methods	line:9
msgArgsString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val msgArgsString = msgArgs.mkString(", ")$/;"	constants	line:53
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val msig = path.msig$/;"	constants	line:927
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val msig = path.msig$/;"	constants	line:955
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:1012
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:679
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val msig = msym.msig$/;"	constants	line:306
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val msig: MethodSignature[Pattern.Ref],$/;"	constants	line:64
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:19
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val msig = {$/;"	constants	line:86
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msym = csym.constructor$/;"	constants	line:1808
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msym = csym.constructor$/;"	constants	line:2184
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val msym = csym.methodsNamed(methodId.methodName).find(_.id.is(methodId)).getOrElse {$/;"	constants	line:134
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val msym = new MethodSymbol($/;"	constants	line:33
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msyms = computeVersions(group, csym.mro, group.msyms)$/;"	constants	line:2086
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val msyms = mroCsym.allMethodSymbols$/;"	constants	line:93
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = csym.constructors$/;"	constants	line:1088
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(outRcvr.ty, mcall.name)$/;"	constants	line:1050
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(outRcvr.ty, methodName)$/;"	constants	line:480
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = env.lookupInstanceMethods(ty, mcall.name)$/;"	constants	line:1065
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = global.staticMethods(className, mcall.name)$/;"	constants	line:1037
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = global.staticMethods(className, methodName)$/;"	constants	line:468
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val msyms = targetCsym.constructors$/;"	constants	line:614
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def msyms = msymsBuffer.toList$/;"	methods	line:29
msymsBuffer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    private[this] val msymsBuffer = new mutable.ListBuffer[MethodSymbol]()$/;"	constants	line:26
mthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val mthdParam: PackratParser[out.Param[Unit]] = tupleMthdParam | varMthdParam$/;"	constants	line:266
mthdScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val mthdScope = resolveParam.scope$/;"	constants	line:305
mthdSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def mthdSubst(msym: MethodSymbol, rcvr: in.Rcvr, args: List[in.Expr]) = {$/;"	methods	line:305
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(data: MCallData) = data._1$/;"	methods	line:1145
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:1059
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:1101
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def mthdSym(data: MCallData): MSym$/;"	methods	line:79
must	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ However, to fulfill the `Block` interface, the class must also $/;"	classes	line:1627
must	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^  * given class must provide equivalent arguments$/;"	classes	line:16
mutualBound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    override def mutualBound(pnt: RoPoint): RoPoint = {$/;"	methods	line:18
mutualUpperBound	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def mutualUpperBound(pair: (Type, Type)): Type = {$/;"	methods	line:479
mutualUpperBoundOfList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def mutualUpperBoundOfList(tys: List[Type]): Type = {$/;"	methods	line:469
mutualUpperBoundUnmatchedTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def mutualUpperBoundUnmatchedTuple(tys: List[Type], otherTy: Type) = {$/;"	methods	line:464
mutualUpperBoundVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def mutualUpperBoundVar(varTy: Type.Member, otherTy: Type) = {$/;"	methods	line:455
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val mvis = cvis.visitMethod($/;"	constants	line:1884
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1706
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1809
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1947
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1969
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:2133
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:2186
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitMethodWithMro(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:2079
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitPlainMethod(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:2024
mvisGet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val mvisGet = visitFieldAccessor(0, csym, cvis, fsym, accessorGetDesc)$/;"	constants	line:2298
mvisMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisMro = visitMethodWithMro(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1992
mvisPlain	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisPlain = visitPlainMethod(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1990
mvisSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val mvisSet = visitFieldAccessor(0, csym, cvis, fsym, accessorSetDesc)$/;"	constants	line:2305
n	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    val n = iter.next$/;"	constants	line:203
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    throw new UsageError("No application class name provided.")$/;"	classes	line:42
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.UnloweredMember$/;"	methods	line:1003
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.Var$/;"	methods	line:999
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    val name: Name.Class,$/;"	constants	line:7
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    val name: Name.Class,$/;"	constants	line:6
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^                    val name = Name.Class(cls)$/;"	constants	line:167
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val name = Name.Class(ty)$/;"	constants	line:155
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val name: Name.Class,$/;"	constants	line:21
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    val name: Name.Class,$/;"	constants	line:9
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val name: Name.Class$/;"	constants	line:10
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Maps a class name to its symbol.  Only accessed under lock. *\/$/;"	classes	line:126
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val name = Name.LocalVar(tmpVarName(outExpr))$/;"	constants	line:1235
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val name = memberName.name$/;"	constants	line:803
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val name: Name.LocalVar,$/;"	constants	line:151
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val name: Name.Member,$/;"	constants	line:123
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val name: N$/;"	constants	line:173
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val name: Name.Member,$/;"	constants	line:103
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val name: Name.Method,           \/** Name of the method. *\/$/;"	constants	line:63
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        \/** Creates a new class name in same package but with the given suffix. *\/$/;"	classes	line:84
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val name = Name.Method(parts.map(_._1))$/;"	constants	line:181
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Member$/;"	methods	line:10
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Var$/;"	methods	line:5
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def name: Name.Member$/;"	methods	line:29
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghost.java	/^    public String name();$/;"	method	line:12
named	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Supertypes of an instance of this class named `this`. *\/$/;"	classes	line:82
named	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Loads a class named `className`.  If it fails, reports an $/;"	classes	line:146
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ ___ Generating fresh, unique class names _____________________________$/;"	classes	line:40
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    \/\/ class names.$/;"	classes	line:28
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/\/ body: resolves members in the body to absolute class names, etc.$/;"	classes	line:49
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val network = new HarmonicRulesNetwork(debugServer)$/;"	constants	line:60
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    val network = baseFactSet.network$/;"	constants	line:53
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def network: Network[X]$/;"	methods	line:6
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def network = Network.this$/;"	methods	line:33
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val network = makeBackwardNetwork(context)$/;"	constants	line:139
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val network = makeSimpleNetwork(context)$/;"	constants	line:60
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val network = makeSimpleNetwork(context)$/;"	constants	line:80
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val network = makeSimpleNetwork(context)$/;"	constants	line:99
network	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val network = new Network[Unit](context.server)$/;"	constants	line:34
newAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def newAccessMap(stmts: List[in.Stmt]) = {$/;"	methods	line:1820
newExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newExpr = positioned($/;"	constants	line:383
newFactList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        private[this] def newFactList(state: State, factList: List[Fact.Forward]): Unit = {$/;"	methods	line:168
newFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^        val newFacts = cdecl.members.flatMap {$/;"	constants	line:59
newGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def newGroup(msym: MethodSymbol) = {$/;"	methods	line:52
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type) = $/;"	methods	line:177
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type) = $/;"	methods	line:185
newSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def newSym(pos: Position, modifiers: Modifier.Set, name: Name.LocalVar, ty: Type) = {$/;"	methods	line:165
newValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^                val newValue = mem.alphas + (fact.kind -> (set + fact))$/;"	constants	line:102
newValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^                val newValue = mem.alphas + (fact.kind -> Set(fact))$/;"	constants	line:96
newValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^                val newValue = mem.betas + (factKinds -> (set + factList))$/;"	constants	line:123
newValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^                val newValue = mem.betas + (factKinds -> Set(factList))$/;"	constants	line:117
newValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^            val newValue = mem.omegas + fact$/;"	constants	line:135
newl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^            override def newl(fmt: String, args: Any*) {$/;"	methods	line:38
newl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def newl(fmt: String, args: Any*) {$/;"	methods	line:52
newl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def newl(fmt: String, args: Any*): Unit$/;"	methods	line:17
nextMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val nextMro = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1896
nextSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^                    val nextSubst = csym.typedSubstForFlatArgs(args)$/;"	constants	line:74
noBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noBlkParam = positioned($/;"	constants	line:352
noExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noExtendsArg = positioned($/;"	constants	line:134
noParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    val noParams = Pattern.SubstdTuple(Nil)$/;"	constants	line:23
noSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val noSuffix = ""$/;"	constants	line:18
normalize_whitespace	/Users/niko/git/intervals-java/Harmonic/test.py	/^def normalize_whitespace(str):$/;"	function	line:520
notAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val notAbstract = matching.filter(_.modifiers.isNotAbstract)$/;"	constants	line:2058
notArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val notArg = not(guard("(" | "{" | "{{"))$/;"	constants	line:338
notEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        def notEquatable(env: Env)(pair: (SPath.Typed, SPath.Typed)): Boolean = {$/;"	methods	line:34
notEsc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def notEsc = elem("escape", c => c != '`' && c != EofCh && c != '\\n')$/;"	methods	line:32
notLegal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def notLegal(c: Char) = !Character.isJavaIdentifierPart(c)$/;"	methods	line:51
numericTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val numericTypes = integralTypes ++ floatTypes$/;"	constants	line:56
objectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectClass = classOf[java.lang.Object]$/;"	constants	line:111
objectPos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val objectPos = InterPosition.forClass(classOf[Object])$/;"	constants	line:23
objectTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectTy = Type.Class(objectClass)$/;"	constants	line:123
of	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Symbols which are accessed from an inner class of some kind: $/;"	classes	line:625
of	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    \/\/ Object: base class of all objects!$/;"	classes	line:196
oldLog	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val oldLog = Lathos.setContext(log)$/;"	constants	line:496
omega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def omega(fact: Fact.Backward): Boolean = {$/;"	methods	line:84
omega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Memory.scala	/^    def omega(kind: Fact.Backward): Boolean$/;"	methods	line:9
omega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                    val omega = addOmega(rule.outputKind)$/;"	constants	line:292
omega	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val omega = new Omega(kind)$/;"	constants	line:269
omegaNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    @Ignore val omegaNodes = new mutable.HashMap[Fact.BackwardKind, Omega]()$/;"	constants	line:239
op	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val op = {$/;"	constants	line:261
oper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val oper = ($/;"	constants	line:73
operCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operCont = elem("operCont", isOperCont)$/;"	methods	line:39
operPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val operPart = oper~expr0 ^^ { case o~r => (o, r) }$/;"	constants	line:412
operStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operStart = elem("operStart", isOperStart)            $/;"	methods	line:38
optAppClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        var optAppClassName: Option[String] = None$/;"	local variables	line:24
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optBody = ($/;"	constants	line:231
optClassTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optClassTupleParam = positioned($/;"	constants	line:155
optExpTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTys = msym.msig.parameterPatterns.map(p => Some(subst.ty(p.ty)))$/;"	constants	line:1009
optMemories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    private[this] var optMemories: Option[Memories] = None$/;"	local variables	line:66
optRes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optRes = mcall.rcvr match {$/;"	constants	line:1035
optSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def optSubst(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]) = {$/;"	methods	line:98
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optTy = env.upperBounds(expTy).firstSome {$/;"	constants	line:218
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optTy = mro.firstSome { $/;"	constants	line:1192
optTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeArg(TypeVarName: Name.Var, optExpTy: Option[Type]) = optExpTy match {$/;"	methods	line:1136
optTypeFromLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeFromLocal(env: Env, lvalue0: in.Lvalue): Option[Type] = {$/;"	methods	line:765
optTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optTypeRef: PackratParser[out.OTR] = reqTypeRef | infTypeRef$/;"	constants	line:294
optl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    def optl[A](p: PackratParser[List[A]]) = opt(p) ^^ { _.getOrElse(List()) }$/;"	methods	line:43
optl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def optl[A](p: PackratParser[List[A]]) = opt(p) ^^ { _.getOrElse(List()) }$/;"	methods	line:71
or	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^      * whether they are defined in this class or in a superclass. Populated $/;"	classes	line:279
orErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def orErr(err: => Error): CanFail[E] = option match {$/;"	methods	line:144
out	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val out = new java.io.FileOutputStream(clsFile)$/;"	constants	line:399
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outAnnotations = annotations.map(InEnv(env).lowerAnnotation)$/;"	constants	line:238
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val outAnnotations = anns.map(InEnv(outEnv).lowerAnnotation)$/;"	constants	line:816
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = annotations.map(scope.resolveAnnotation)$/;"	constants	line:176
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = varParam.annotations.map(scope.resolveAnnotation)$/;"	constants	line:108
outArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgNodes = inArgs.map(lowerTypedPath)$/;"	constants	line:466
outArgNodes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgNodes = inArgs.map(lowerTypedPath)$/;"	constants	line:479
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = inArgs.map(lowerToTypedPathNode(None))$/;"	constants	line:1020
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = optExpTys.zip(inArgs).map { case (t,a) => lowerToTypedPathNode(t)(a) }$/;"	constants	line:1010
outAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outAssign = withPosOf(inAssign,$/;"	constants	line:914
outAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outAssign = withPosOf(stmt, out.Assign(resolveLvs.outLvalues, outRvs))$/;"	constants	line:620
outBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val outBase = resolvePathToPath(base)$/;"	constants	line:450
outBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outBase = resolvePathToPath(base)$/;"	constants	line:558
outBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outBody = scopeWithInline.resolveBody(body)$/;"	constants	line:632
outEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            var outEnv = env$/;"	local variables	line:798
outExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outExprs = new mutable.ListBuffer[out.TypedPath]()$/;"	constants	line:800
outFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    private[this] val outFieldDecl = new GuardedBy[out.FieldDecl](memberLower)$/;"	constants	line:31
outIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    private[this] val outIntervalDecl = new GuardedBy[out.IntervalDecl](memberLower)$/;"	constants	line:27
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outLvalues = new mutable.ListBuffer[out.ElemLvalue]()$/;"	constants	line:799
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outLvalues = lvalues.map(resolveLvalue)$/;"	constants	line:159
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outLvalues = inLvalues.map(resolveLvalue)$/;"	constants	line:233
outMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def outMethodCall(r: out.Rcvr, cps: List[(String, out.Expr)]) = {$/;"	methods	line:378
outMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val outMethodDecl = new GuardedBy[out.MethodDecl](memberLower)$/;"	constants	line:48
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:124
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:153
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = params.map(lowerParam(Type.Top, _))$/;"	constants	line:230
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:225
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:212
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outParams = tupleParam.params.map(resolveParam)$/;"	constants	line:103
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outParams = inParams.map(resolveParam)$/;"	constants	line:119
outRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRcvr = lowerToTypedPath(None)(inRcvr)$/;"	constants	line:1049
outRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRcvr = typedPathForPath(inRcvr)$/;"	constants	line:478
outRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerRelDecl.scala	/^    private[this] val outRelDecl = new GuardedBy[out.RelDecl](memberLower)$/;"	constants	line:27
outReturnTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^                    val outReturnTref = Lower(global).InEnv(env).lowerTypeRef(inReturnTref)$/;"	constants	line:102
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerToTypedPathNode(Some(fsym.ty))(rv)$/;"	constants	line:906
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerToTypedPathNode(Some(sym.ty))(rv)$/;"	constants	line:900
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerToTypedPathNode(Some(ty))(rv)$/;"	constants	line:889
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRv = lowerToTypedPathNode(expTy)(rv)$/;"	constants	line:883
outRvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val outRvs = sublvs.indices.map { idx =>$/;"	constants	line:846
outRvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outRvs = rvs.map(resolveExpr)$/;"	constants	line:618
outSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val outSig = new GuardedBy[(List[out.Param[VarSymbol.Local]], Env)](paramLower)$/;"	constants	line:31
outStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmt = withPosOf(stmt, out.InlineInterval(name, outBody, ()))$/;"	constants	line:633
outStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmt = withPosOf(stmt, out.MethodReturn(resolveExpr(expr)))$/;"	constants	line:626
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts = optTypeArg(Name.BlockR, optExpTy) match {$/;"	constants	line:1153
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmts = resolveLvs.scope.resolveStmts(stmts)$/;"	constants	line:621
outStmts0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts0 = lowerStmts(subenv, tmpl.stmts)$/;"	constants	line:1150
outTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^                    val outTref = Lower(global).InEnv(csym.classEnv).lowerTypeRef(inTref)$/;"	constants	line:72
outTypeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outTypeArgs = typeArgs.map(resolveTypeArg)$/;"	constants	line:571
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(tref)$/;"	constants	line:177
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(varParam.tref)$/;"	constants	line:109
outputDir	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var outputDir = new File(".")$/;"	local variables	line:16
outputKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override val outputKind: Fact.BackwardKind$/;"	constants	line:167
outputKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        val outputKind: Fact.BackwardKind,$/;"	constants	line:568
outputKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        def outputKind: Fact.BackwardKind$/;"	methods	line:74
outputKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^        val outputKind = {$/;"	constants	line:83
outputNext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            def outputNext(withComma: Boolean) = {$/;"	methods	line:200
overriddenDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val overriddenDesc = descFunc(overriddenSig)$/;"	constants	line:1701
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    \/\/ Unfortunately, if a class overrides a method with a covariant$/;"	classes	line:290
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * in the current class overrides a method with signature $/;"	classes	line:652
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def overrides($/;"	methods	line:657
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val overrides = group.msyms.dropWhile(_.isFromClassNamed(csym.name))$/;"	constants	line:108
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def overrides(msym: MethodSymbol) = log.indent("overrides(", msym, ")") {$/;"	methods	line:136
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val owner: PackratParser[Path.Owner] = static | path$/;"	constants	line:84
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val owner = receiver.ty.toAsmType.getInternalName$/;"	constants	line:960
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def owner(owner: Path.Owner): Path.Owner = owner match {$/;"	methods	line:10
ownerAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val ownerAsmTy = asm.Type.getType(ownerClass)$/;"	constants	line:966
ownerIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def ownerIsFinalBy(owner: SPath.Owner, inter: SPath) = {$/;"	methods	line:731
ownerPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ownerPath = lowerToTypedPath(None)(ownerExpr)$/;"	constants	line:957
ownerSPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ownerSPath = typedPathForPath(owner)$/;"	constants	line:437
packageDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageDecl = positioned($/;"	constants	line:109
packageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val packageName = repsep(ident, ".") ^^ { idents =>$/;"	constants	line:47
packageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageName = positioned($/;"	constants	line:95
page	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val page = context.pushTopLevel(id, title: _*)$/;"	constants	line:329
page	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val page = context.pushTopLevel(id, title: _*)$/;"	constants	line:346
page	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                val page = ctx.pushEmbeddedChild(method.getName, "Running test ", method.getName)$/;"	constants	line:166
pageForClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def pageForClass(name: Name.Class): lathos.Page = topLevelPage(name.toString, "Class ", name)$/;"	methods	line:336
par	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def par(func: => Unit) {$/;"	methods	line:426
param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val param = new ResolveBlockParam(this, tmpl.param)$/;"	constants	line:708
paramAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramAsmTys = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:2185
paramLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val paramLower: AsyncInterval = {$/;"	constants	line:20
paramPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramPaths = paramAsmTys.map(accessMap.pathToFreshSlot)$/;"	constants	line:2197
paramPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def paramPattern(pair: (reflect.Type, Int)) = {$/;"	methods	line:231
parameter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Lowered version of class parameter *\/$/;"	classes	line:208
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val parameterPatterns = name.parts.zipWithIndex.map { case (_, i) => $/;"	constants	line:50
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val parameterPatterns: List[P]$/;"	constants	line:5
parameterTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^            val parameterTys = parts.flatMap(_._2)$/;"	constants	line:77
parameterTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val parameterTys = msym.msig.parameterPatterns.map(p => subst.ty(p.ty))$/;"	constants	line:646
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - Param for method and class parameters$/;"	classes	line:407
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Store class parameters and parameters for all superclasses:$/;"	classes	line:2210
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Given values `p` for the class parameters `f`, $/;"	classes	line:262
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def params: List[Param[LVSym]]$/;"	methods	line:192
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val params = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:159
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val params = msym.msig.parameterPatterns.flatMap(_.varTys).map(_.toAsmType)$/;"	constants	line:166
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val params = parts.map(_._2)$/;"	constants	line:182
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        \/\/ types.  They are permitted to reference other class params, but$/;"	classes	line:33
parent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def parent: Path.Ref$/;"	methods	line:29
parentPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        val parentPage: lathos.Page,$/;"	constants	line:14
parse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    private[this] def parse[R](prod: PackratParser[R])(text: String): CanFail[R] = {$/;"	methods	line:137
parseArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^        private[this] def parseArgs(args: Array[String]) {$/;"	methods	line:27
parseFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    def parseFact = parse(fact) _    $/;"	methods	line:146
parsePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    def parsePath = parse(path) _    $/;"	methods	line:145
parser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val parser = new Parse()$/;"	constants	line:458
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val path: PackratParser[Path.Ref] = ($/;"	constants	line:90
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val path = accessMap.syms(lv.sym)$/;"	constants	line:1127
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val path = accessMap.syms(lv.sym)$/;"	constants	line:1134
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val path = accessMap.syms(lvsym)$/;"	constants	line:1118
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val path = pathToFreshSlot(sym.ty.toAsmType)$/;"	constants	line:572
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val path = spath.toPath$/;"	constants	line:827
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val path = fact.path$/;"	constants	line:225
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val path = fact.path$/;"	constants	line:314
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val path = lowerToTypedPathNode(None)(rv)$/;"	constants	line:894
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val path = typedPathForExpr(rv)$/;"	constants	line:845
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val path = lowerToTypedPathNode(None)(expr)$/;"	constants	line:747
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val path = expr match {$/;"	constants	line:289
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val path = positioned($/;"	constants	line:332
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def path(p: Path.Ref): Path.Ref = (map.get(p), p) match {$/;"	methods	line:15
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockObject.scala	/^    def path: Path.Ref$/;"	methods	line:6
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoInterval.scala	/^    val path: Path.Ref,$/;"	constants	line:7
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoLock.scala	/^    val path: Path.Ref,$/;"	constants	line:7
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockRoPoint.scala	/^    val path: Path.Ref,$/;"	constants	line:7
pathArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val pathArgs = args.map(resolvePathToPath)$/;"	constants	line:459
pathAsExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathAsExpr = positioned($/;"	constants	line:340
pathExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathExtendsArg = positioned($/;"	constants	line:130
pathForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def pathForPath(path: in.AnyPathNode): Path.Ref = {$/;"	methods	line:491
pathIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathIsFinalBy(path: SPath, inter: SPath): Boolean = {$/;"	methods	line:738
pathToFreshSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pathToFreshSlot(asmTy: asm.Type) = {$/;"	methods	line:561
pathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathType = positioned($/;"	constants	line:308
pathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathTypeArg = positioned($/;"	constants	line:322
pathUpperBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathUpperBounds(path: Path.Ref) = {$/;"	methods	line:247
paths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val paths = args.map(n => lowerExtendsArg(n).path)$/;"	constants	line:593
paths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val paths = optExpTy match {$/;"	constants	line:1123
pathsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathsAreEquatable(p1: Path.Ref, p2: Path.Ref) = factHolds(K.PathEq(p1, p2))$/;"	methods	line:232
pats	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val pats = msym.msig.parameterPatterns$/;"	constants	line:607
pattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def pattern(p: Pattern.Any): Pattern.Anon = p match {$/;"	methods	line:40
patterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val patterns = Pattern.makeRefs(methodId.msig.parameterPatterns)$/;"	constants	line:45
patterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def patterns: List[Pattern.Any]$/;"	methods	line:24
pcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val pcRel: PackratParser[PcRel] = ($/;"	constants	line:115
pcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pcRel = ($/;"	constants	line:202
pendingFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val pendingFacts = new mutable.Queue[Fact.Forward]()$/;"	constants	line:27
pendingFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val pendingFacts = new mutable.Queue[Fact.Forward]()$/;"	constants	line:39
permitsRd	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def permitsRd(guard: Path.Ref, inter: Path.Ref) = {$/;"	methods	line:243
permitsWr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def permitsWr(guard: Path.Ref, inter: Path.Ref) = {$/;"	methods	line:239
pkg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^        val pkg = idents.dropRight(1).foldLeft[Name.Package](Name.Root)(Name.Subpackage(_, _))$/;"	constants	line:52
plainMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def plainMethodDescFromSig(msig: MethodSignature[_ <: Pattern.Any]): String = {$/;"	methods	line:142
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Byte l, Double r) { return l + r; }$/;"	method	line:21
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Byte r) { return l + r; }$/;"	method	line:96
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Double r) { return l + r; }$/;"	method	line:111
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Float r) { return l + r; }$/;"	method	line:108
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Integer r) { return l + r; }$/;"	method	line:102
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Long r) { return l + r; }$/;"	method	line:105
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Short r) { return l + r; }$/;"	method	line:99
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Float l, Double r) { return l + r; }$/;"	method	line:93
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Integer l, Double r) { return l + r; }$/;"	method	line:57
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Long l, Double r) { return l + r; }$/;"	method	line:75
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Short l, Double r) { return l + r; }$/;"	method	line:39
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Byte l, Float r) { return l + r; }$/;"	method	line:18
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Byte r) { return l + r; }$/;"	method	line:78
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Float r) { return l + r; }$/;"	method	line:90
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Integer r) { return l + r; }$/;"	method	line:84
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Long r) { return l + r; }$/;"	method	line:87
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Short r) { return l + r; }$/;"	method	line:81
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Integer l, Float r) { return l + r; }$/;"	method	line:54
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Long l, Float r) { return l + r; }$/;"	method	line:72
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Short l, Float r) { return l + r; }$/;"	method	line:36
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Byte r) { return l + r; }$/;"	method	line:6
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Integer r) { return l + r; }$/;"	method	line:12
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Short r) { return l + r; }$/;"	method	line:9
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Byte r) { return l + r; }$/;"	method	line:42
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Integer r) { return l + r; }$/;"	method	line:48
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Short r) { return l + r; }$/;"	method	line:45
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Byte r) { return l + r; }$/;"	method	line:24
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Integer r) { return l + r; }$/;"	method	line:30
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Short r) { return l + r; }$/;"	method	line:27
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Byte l, Long r) { return l + r; }$/;"	method	line:15
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Integer l, Long r) { return l + r; }$/;"	method	line:51
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Byte r) { return l + r; }$/;"	method	line:60
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Integer r) { return l + r; }$/;"	method	line:66
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Long r) { return l + r; }$/;"	method	line:69
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Short r) { return l + r; }$/;"	method	line:63
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Short l, Long r) { return l + r; }$/;"	method	line:33
plusFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusFact(fact: inference.Fact): Env = $/;"	methods	line:210
plusFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusFactSet(factSet: inference.FactSet[Env.Xtra]): Env =$/;"	methods	line:216
plusFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def plusFactSet(factSet: FactSet[X], xtra: X): FactSet[X] = DerivedFactSet(this, factSet, xtra)$/;"	methods	line:57
plusFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def plusFactSet(factSet: FactSet[X], xtra: X): FactSet[X] \/\/ must be from same network$/;"	methods	line:43
plusFactSet	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def plusFactSet(factSet: FactSet[X], xtra: X): FactSet[X] = DerivedFactSet(this, factSet, xtra)$/;"	methods	line:40
plusFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusFacts(facts: Iterable[inference.Fact]): Env =$/;"	methods	line:213
plusFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    def plusFacts(facts: Iterable[Fact], xtra: X): FactSet[X] = DerivedFactSet(this, facts, xtra)$/;"	methods	line:56
plusFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def plusFacts(facts: Iterable[Fact], xtra: X): FactSet[X]$/;"	methods	line:40
plusFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def plusFacts(facts: Iterable[Fact], xtra: X): FactSet[X] = DerivedFactSet(this, facts, xtra)$/;"	methods	line:39
plusField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def plusField(p: Pair[(VarSymbol.Local, VarSymbol.Field), SPath.Typed]) = {$/;"	methods	line:17
plusLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def plusLocalVar(sym: VarSymbol.Local) = $/;"	methods	line:59
plusLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusLocalVar(sym: VarSymbol.Local): Env = $/;"	methods	line:201
plusThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusThis(thisTy: Type.Class, sym: VarSymbol.Local): Env = $/;"	methods	line:204
plusXtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def plusXtra(xtra: X): FactSet[X] = plusFacts(Nil, xtra)$/;"	methods	line:50
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def pos = InterPosition.forClassNamed(name)$/;"	methods	line:16
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def pos = parseCdecl.pos$/;"	methods	line:19
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def pos: Position$/;"	methods	line:38
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val pos: Position,$/;"	constants	line:121
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val pos: Position,$/;"	constants	line:149
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val pos: Position, $/;"	constants	line:100
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val pos: Position,$/;"	constants	line:59
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def pos = new OffsetPosition(source, offset) with InterPosition {$/;"	methods	line:449
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def pos: Position$/;"	methods	line:9
posString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def posString(pos: Position) = {$/;"	methods	line:25
potentiallyApplicable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def potentiallyApplicable(msym: MethodSymbol) = {$/;"	methods	line:644
pps_sub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sub = msig_sub.parameterPatterns$/;"	constants	line:661
pps_sup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sup = msig_sup.parameterPatterns$/;"	constants	line:662
preExecStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def preExecStatement(stmt: in.Stmt) {$/;"	methods	line:1071
precontains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    protected[this] override def precontains(fact: Fact): Iterable[Fact.Forward] = {$/;"	methods	line:21
precontains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    protected[this] def precontains(fact: Fact): Iterable[Fact.Forward] = Nil$/;"	methods	line:30
preferNew	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def preferNew($/;"	methods	line:310
prequery	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^    protected[this] override def prequery(kind: Fact.Kind, args: Array[Option[Any]]): Iterable[Fact.Forward] = {$/;"	methods	line:30
prequery	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    protected[this] def prequery(kind: Fact.Kind, args: Array[Option[Any]]): Iterable[Fact.Forward] = Nil$/;"	methods	line:25
prevGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val prevGroups = groups.get(msym.name).getOrElse(Nil)$/;"	constants	line:70
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def print(out: PrettyPrinter) {$/;"	methods	line:892
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:136
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:179
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:234
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:257
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:279
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:292
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:306
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:326
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:344
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:360
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:381
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:424
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:458
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:488
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:502
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:513
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:585
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:665
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:672
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:704
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:727
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:744
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:765
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:777
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:792
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:818
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:836
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:867
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:878
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/    override def print(out: PrettyPrinter) {$/;"	methods	line:210
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def print(out: PrintStream) = synchronized {$/;"	methods	line:32
printSep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSep(out: PrettyPrinter, asts: List[Node], sep: String) {$/;"	methods	line:90
printSepFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSepFunc(out: PrettyPrinter, asts: List[Node], sepfunc: (() => Unit)) {$/;"	methods	line:82
printalone	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printalone(out: PrettyPrinter) {$/;"	methods	line:680
printc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printc(out: PrettyPrinter) {$/;"	methods	line:906
printdot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printdot(out: PrettyPrinter) {$/;"	methods	line:901
printsp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsp(out: PrettyPrinter) {$/;"	methods	line:896
processOper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        protected def processOper(name: String) = {$/;"	methods	line:48
prop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val prop = "get%c%s".format(text.charAt(0).toUpper, text.substring(1))$/;"	constants	line:379
purgeNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val purgeNames = Set(mro.tail.map(_.name): _*)$/;"	constants	line:272
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:429
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:449
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:471
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:496
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:526
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor): Unit$/;"	methods	line:421
pushAnonymousBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAnonymousBlock($/;"	methods	line:1530
pushAsyncInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAsyncInterval($/;"	methods	line:1499
pushConvertingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def pushConvertingTo(asmTypes: Array[asm.Type]) {$/;"	methods	line:801
pushExprValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValue(expr: in.Expr) {$/;"	methods	line:1021
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toAsmTy: asm.Type, expr: in.Expr) {$/;"	methods	line:1007
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toTy: Type, expr: in.Expr) {$/;"	methods	line:1012
pushIntegerConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushIntegerConstant(value: Int) = value match {$/;"	methods	line:202
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:453
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:476
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:503
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:536
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:436
pushMethodArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushMethodArgs($/;"	methods	line:788
pushPathRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathRvalues(lvalue: Pattern.Any, rvalue: SPath.Typed, asmTypes: List[asm.Type]): List[asm.Type] = {$/;"	methods	line:740
pushPathValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValue(path: SPath.Typed) {$/;"	methods	line:837
pushPathValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValueDowncastingTo(toAsmTy: asm.Type, path: SPath.Typed) {$/;"	methods	line:832
pushPathValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushPathValueDowncastingTo(toTy: Type, path: SPath.Typed) {$/;"	methods	line:828
pushResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1168
pushStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def pushStatement(stmt: in.Stmt) {$/;"	methods	line:1155
pushSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushSym(sym: VarSymbol.Any, mvis: asm.MethodVisitor) = syms(sym).push(mvis)$/;"	methods	line:585
quals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val quals = resolveRelList(names)$/;"	constants	line:362
query	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    override def query[F <: Fact.Forward]($/;"	methods	line:161
query	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def query[F <: Fact.Forward]($/;"	methods	line:16
query	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def query[F <: Fact.Forward]($/;"	methods	line:35
query	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def query[F <: Fact.Forward]($/;"	methods	line:82
query	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Recurse.scala	/^    def query[F <: Fact.Forward]($/;"	methods	line:9
queryAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def queryAll($/;"	methods	line:74
queryArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^                val queryArgs = optArgs.zipWithIndex$/;"	constants	line:91
queryLGivenR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def queryLGivenR[L, R]($/;"	methods	line:32
queryLGivenR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Recurse.scala	/^    def queryLGivenR[L, R]($/;"	methods	line:21
queryRGivenL	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def queryRGivenL[L, R]($/;"	methods	line:23
queryRGivenL	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Recurse.scala	/^    def queryRGivenL[L, R]($/;"	methods	line:14
queryRGivenL	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    def queryRGivenL[L, R](left: L, kind: Class[_ <: inference.Fact.Binary[L, R]]): Set[R] = {$/;"	methods	line:18
queue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val queue: mutable.Queue[Fact.Forward]$/;"	constants	line:55
rawData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^            val rawData = loadData(inter)$/;"	constants	line:83
rawSuperClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        val rawSuperClassNames = rawSuperClassNames1 match {$/;"	constants	line:63
rawSuperClassNames1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        val rawSuperClassNames1 = cdecl.extendsDecls.map { case in.ExtendsDecl(relName, _, ()) =>$/;"	constants	line:60
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rcvr = asm.Type.getObjectType(msym.className.internalName)$/;"	constants	line:158
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rcvr = asm.Type.getObjectType(msym.className.internalName)$/;"	constants	line:165
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val rcvr = in.varExpr(tvar)$/;"	constants	line:1090
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val rcvr: PackratParser[out.Rcvr] = positioned($/;"	constants	line:389
reader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val reader = new FileReader(interFile, PagedSeq.fromReader(javaReader), 0)$/;"	constants	line:460
reassignLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reassignLvalue = positioned($/;"	constants	line:280
redirect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def redirect(optName: Option[Name.Var], accessPath: AccessPath): AccessPath = {$/;"	methods	line:1244
redirectedAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val redirectedAccessPath = redirect(Some(sym.name), accessPath)$/;"	constants	line:1292
reflClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val reflClasses = config.reflectiveClasses(className)$/;"	constants	line:212
reflTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val reflTypes = {$/;"	constants	line:52
reflectiveClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def reflectiveClasses(name: Name.Qual) = {$/;"	methods	line:71
registerInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    def registerInterval(parentPage: lathos.Page, log: lathos.Page): IntervalInfo = synchronized {$/;"	methods	line:53
relBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relBase = positioned(varIdent ^^ out.RelBase)$/;"	constants	line:82
relDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDecl = positioned($/;"	constants	line:253
relDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDot = positioned($/;"	constants	line:84
relName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relName = relDot | relBase$/;"	constants	line:89
relNameToRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def relNameToRelList(relName: in.RelName): List[String] = relName match {$/;"	methods	line:120
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val relPath = className.relPath + suffix + ext$/;"	constants	line:350
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def relPath: String = internalName$/;"	methods	line:75
relativeFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def relativeFiles(paths: List[File], ext: String)(name: Name.Class) = {$/;"	methods	line:59
remEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val remEntries = otherEntries.filterNot { entry =>$/;"	constants	line:299
remaining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val remaining = msyms.drop(matching.length)$/;"	constants	line:2057
remove	/Users/niko/git/intervals-java/Harmonic/test.py	/^def remove(filenm):$/;"	function	line:476
remove_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def remove_all(self):$/;"	member	line:463
render	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        private[this] def render(out: Output, any: Any): Unit = any match {$/;"	methods	line:921
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def renderInLine(out: Output): Unit = {$/;"	methods	line:917
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def renderInLine(out: Output): Unit = {$/;"	methods	line:194
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            override def renderInLine(out: lathos.Output): Unit = synchronized {$/;"	methods	line:221
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            override def renderInLine(out: lathos.Output): Unit = synchronized {$/;"	methods	line:242
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            override def renderInLine(out: lathos.Output): Unit = synchronized {$/;"	methods	line:261
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def renderInLine(out: lathos.Output): Unit = {$/;"	methods	line:178
renderInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    override def renderInLine(out: lathos.Output): Unit = {$/;"	methods	line:72
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def renderInPage(out: Output): Unit = {$/;"	methods	line:949
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def renderInPage(out: Output): Unit = {$/;"	methods	line:198
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            override def renderInPage(out: lathos.Output): Unit = synchronized {$/;"	methods	line:225
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            override def renderInPage(out: lathos.Output): Unit = synchronized {$/;"	methods	line:248
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def renderInPage(out: lathos.Output): Unit = synchronized {$/;"	methods	line:182
renderInPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    def renderInPage(out: lathos.Output): Unit = synchronized {$/;"	methods	line:76
renderIteratorInLine	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def renderIteratorInLine(page: lathos.Page, out: lathos.Output, iter: Iterator[_]) = {$/;"	methods	line:197
replace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def replace(from: E, to: E): List[E] = {$/;"	methods	line:129
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        override def report(global: Global, pos: Position): Unit = {$/;"	methods	line:26
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    def report(global: Global, pos: Position): Unit    $/;"	methods	line:12
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    def report(implicit global: Global): Unit = $/;"	methods	line:14
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def report(pos: Position, msgKey: String, msgArgs: String*): Unit = {$/;"	methods	line:47
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def report(error: Error) = synchronized {$/;"	methods	line:20
reported	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val reported = new mutable.HashSet[(MethodSymbol, MethodSymbol)]()$/;"	constants	line:153
reporter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^                val reporter = new Reporter(config)$/;"	constants	line:12
representing	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Creates a new class representing the statements$/;"	classes	line:1525
reqRelation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reqRelation = positioned($/;"	constants	line:189
reqTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reqTypeRef = ":"~>typeRef$/;"	constants	line:300
requireLoadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def requireLoadedOrLoadable(pos: Position, className: Name.Class) = synchronized {$/;"	methods	line:148
requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val requirement = "requires"~>reqRelation$/;"	constants	line:194
requirements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def requirements: List[Requirement]$/;"	methods	line:194
requirements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def requirements = Requirements.v$/;"	methods	line:90
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^                    val res = app.main(ctx)$/;"	constants	line:76
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val res = func(stashSlot)$/;"	constants	line:580
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^            val res = method.invoke(this, (xtra.asObj :: facts): _*)$/;"	constants	line:68
resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val resolve = new ResolveClassParams(csym.name, emptyScope, cdecl.pattern)$/;"	constants	line:36
resolveAbsToQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveAbsToQual(relName: in.RelName): Option[Name.Qual] = {$/;"	methods	line:52
resolveAbstractableBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveAbstractableBody(body: in.AbstractableBody) = withPosOf(body, {$/;"	methods	line:718
resolveAgainst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainst(ctxName: Name.Qual, nm: String) = {$/;"	methods	line:40
resolveAgainstClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstClass(baseName: Name.Class, nm: String): Option[Name.Class] = {$/;"	methods	line:31
resolveAgainstPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstPackage(pkgName: Name.Package, nm: String): Name.Qual = {$/;"	methods	line:22
resolveAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveAnnotation(ann: in.Annotation) = withPosOf(ann, $/;"	methods	line:277
resolveBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBlock(tmpl: in.Block) = withPosOf(tmpl, {$/;"	methods	line:707
resolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBody(body: in.Body) = withPosOf(body, $/;"	methods	line:725
resolveClassBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveClassBody(csym: ClassFromSource, cdecl: in.ClassDecl) = {$/;"	methods	line:29
resolveClassHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^    def resolveClassHeader($/;"	methods	line:53
resolveDeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveDeclareVarLvalue($/;"	methods	line:170
resolveDottedMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveDottedMemberName(relDot: in.RelDot) = withPosOf(relDot, {$/;"	methods	line:236
resolveExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExpr(expr: in.Expr): out.Expr = withPosOf(expr, expr match {$/;"	methods	line:683
resolveExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExtendsArg(arg: in.ExtendsArg): out.ExtendsArg = withPosOf(arg, {$/;"	methods	line:268
resolveExtendsDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExtendsDecl(extendsDecl: in.ExtendsDecl) = withPosOf(extendsDecl, {$/;"	methods	line:260
resolveField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveField(expr: in.Field) = withPosOf(expr, {$/;"	methods	line:662
resolveFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldDecl(className: Name.Class, decl: in.FieldDecl) = withPosOf(decl, {$/;"	methods	line:334
resolveFieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldLvalue($/;"	methods	line:226
resolveGhostDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveGhostDecl(className: Name.Class, decl: in.GhostDecl) = withPosOf(decl, {$/;"	methods	line:327
resolveImport	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveImport(imp: in.ImportDecl) = {        $/;"	methods	line:64
resolveIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveIntervalDecl(className: Name.Class, decl: in.IntervalDecl) = withPosOf(decl, {$/;"	methods	line:294
resolveLiteral	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLiteral(expr: in.Literal) = {$/;"	methods	line:698
resolveLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLvalue(lvalue: in.Lvalue): out.Lvalue = withPosOf(lvalue, lvalue match {$/;"	methods	line:157
resolveLvs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val resolveLvs = new ResolveLvalues(this, lvs)$/;"	constants	line:619
resolveMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMember(className: Name.Class, mem: in.MemberDecl): out.MemberDecl = withPosOf(mem, {$/;"	methods	line:284
resolveMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveMemberName(relName: in.RelName) = withPosOf(relName, {$/;"	methods	line:242
resolveMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodCall(expr: in.MethodCall) = {$/;"	methods	line:674
resolveMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodDecl(decl: in.MethodDecl) = withPosOf(decl, {$/;"	methods	line:303
resolveName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveName(relName: in.RelName): Ast.ClassName = withPosOf(relName, {$/;"	methods	line:125
resolveNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveNewCtor(expr: in.NewCtor): out.NewCtor = withPosOf(expr, {$/;"	methods	line:638
resolveOptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOptionalTypeRef(otref: in.OptionalParseTypeRef): out.OptionalResolveTypeRef = {$/;"	methods	line:518
resolveOverloading	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def resolveOverloading($/;"	methods	line:636
resolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOwner(owner: in.Owner): out.Owner = withPosOf(owner, {$/;"	methods	line:647
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val resolveParam = new ResolveMethodParams(this, decl.params)$/;"	constants	line:304
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveParam(param: in.Param[Unit]): out.Param[Unit] = withPosOf(param, param match {$/;"	methods	line:97
resolvePathToAny	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToAny(path: in.AnyPathNode): ResolvePathResult = withPosOfRes(path, {$/;"	methods	line:376
resolvePathToClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToClassName(path: in.AnyPathNode): Name.Class = {$/;"	methods	line:503
resolvePathToFinal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToFinal(path: in.AnyPathNode): ResolvePathFinalResult = {$/;"	methods	line:477
resolvePathToPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToPath(path: in.AnyPathNode): out.AnyPathNode = withPosOf(path, {$/;"	methods	line:485
resolvePathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathTypeArg(targ: in.PathTypeArg): out.PathTypeArg = withPosOf(targ, {$/;"	methods	line:599
resolvePendingFacts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    private[this] def resolvePendingFacts: Unit = {$/;"	methods	line:143
resolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRcvr(rcvr: in.Rcvr): out.Rcvr = withPosOf(rcvr, {$/;"	methods	line:667
resolveReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveReassignVarLvalue($/;"	methods	line:189
resolveRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRelDecl(decl: in.RelDecl) = withPosOf(decl, {$/;"	methods	line:343
resolveRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveRelList(relList: List[String]): List[Name.Qual] = relList match {$/;"	methods	line:89
resolveRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRequirement(requirement: in.Requirement) = withPosOf(requirement, {$/;"	methods	line:317
resolveStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveStmts(stmts: List[in.Stmt]): List[out.Stmt] = stmts match {$/;"	methods	line:607
resolveToClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveToClass(pos: Position, relList: List[String]): Option[Name.Class] = {$/;"	methods	line:106
resolveToClassOrObject	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveToClassOrObject(pos: Position, relList: List[String]): Name.Class = {$/;"	methods	line:115
resolveTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTuple(tuple: in.Tuple) = withPosOf(tuple, $/;"	methods	line:703
resolveTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTupleParam(tupleParam: in.TupleParam[Unit]) = withPosOf(tupleParam, {$/;"	methods	line:102
resolveTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeArg(targ: in.TypeArg): out.TypeArg = withPosOf(targ, targ match {$/;"	methods	line:588
resolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeRef(tref: in.ParseTypeRef): out.ResolveTypeRef = withPosOf(tref, tref match {$/;"	methods	line:527
resolveTypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeTypeArg(targ: in.TypeTypeArg): out.TypeTypeArg = withPosOf(targ, {$/;"	methods	line:593
resolveVarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveVarParam(varParam: in.VarParam[Unit]) = withPosOf(varParam, {$/;"	methods	line:107
resolvedMemories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    override def resolvedMemories = withLock(lock) {$/;"	methods	line:149
resolvedMemories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/InternalFactSet.scala	/^    def resolvedMemories: Memories$/;"	methods	line:7
resolvedMemories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def resolvedMemories = Memories(Map(), Map(), Set())$/;"	methods	line:41
resolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def resolvedSource = ResolvedSource.v$/;"	methods	line:197
rest	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def rest: FileReader =$/;"	methods	line:442
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val result = AccessField(thisAccessPath, fieldName.text, asmType)$/;"	constants	line:1272
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val result = new StringBuilder(str.length + n * 2)$/;"	constants	line:55
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherExtends.scala	/^        val result = new mutable.HashMap[Name.Class, (Name.Class, in.ExtendsDecl, List[SPath.Typed])]()$/;"	constants	line:30
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val result = loadedOrLoadable(className)$/;"	constants	line:149
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val result = new mutable.ListBuffer[out.Stmt]()$/;"	constants	line:709
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val result = expansions.firstSome(_.asClassName)$/;"	constants	line:108
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                val result = func$/;"	constants	line:365
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                val result = func$/;"	constants	line:387
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                val result = func$/;"	constants	line:406
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val result = inter.newAsyncChild(new AbstractTask(name) {$/;"	constants	line:570
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        var result: Object = "Wait"$/;"	local variables	line:28
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^        val result = new DerivedFactSet(baseFactSet, pendingFacts, xtra)$/;"	constants	line:21
resultAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val resultAsmTy = asm.Type.getType(resultClass)$/;"	constants	line:936
resultAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val resultAsmTy = asm.Type.getType(resultClass)$/;"	constants	line:967
ret	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val ret = msym.msig.returnTy.toAsmType$/;"	constants	line:157
ret	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val ret = msym.msig.returnTy.toAsmType$/;"	constants	line:164
retTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val retTypes = stmts.flatMap {$/;"	constants	line:87
retainPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                def retainPair(pair: (String, SymTab.Entry)) = {$/;"	methods	line:72
returnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnClass = numericTypes(returnIndex)$/;"	constants	line:75
returnIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnIndex = ($/;"	constants	line:70
returnResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def returnResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:1182
returnTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTref: OTR$/;"	methods	line:193
returnTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/    def returnTref = voidTy$/;"	methods	line:208
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(data: MCallData) = data._2.returnTy$/;"	methods	line:1146
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:1060
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:1102
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def returnTy(data: MCallData): Ty$/;"	methods	line:80
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnTy = Type.Class(returnClass)$/;"	constants	line:78
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val returnTy = tmpl.returnTref match {$/;"	constants	line:1159
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val returnTy = (mdecl.returnTref, absBody) match {$/;"	constants	line:117
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val returnTy: Type,$/;"	constants	line:4
rhs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^            val rhs = {$/;"	constants	line:253
rhs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val rhs: Rhs$/;"	constants	line:157
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right = inter$/;"	methods	line:40
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right = lock$/;"	methods	line:61
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right = parent$/;"	methods	line:32
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right = sup$/;"	methods	line:95
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right = ty$/;"	methods	line:105
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right: Path.Ref$/;"	methods	line:15
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def right: Type$/;"	methods	line:79
right	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Fact.scala	/^        def right: R$/;"	methods	line:31
rightArgsUp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val rightArgsUp = rightArgs.filter(appliesTo(bestCsym))$/;"	constants	line:527
rightCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val rightCsym = global.csym(rightName)$/;"	constants	line:520
rightTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val rightTy = Type.Class(rightClass)$/;"	constants	line:77
rootPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val rootPage = debugServer.topLevelPage("Root")$/;"	constants	line:32
row	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def row(func: => Unit) {$/;"	methods	line:438
row	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def row(objs: Object*) {$/;"	methods	line:456
row	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def row(info: IntervalInfo): Unit = {$/;"	methods	line:79
rules	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val rules = new mutable.ListBuffer[Rule.Backward[X]]()$/;"	constants	line:201
rules	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val rules = new mutable.ListBuffer[Rule.Forward[X]]()$/;"	constants	line:160
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def run(inlineInterval: Interval) = $/;"	methods	line:617
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                override def run(current: Interval): Unit = {$/;"	methods	line:571
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public abstract void run();$/;"	method	line:16
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/HarmonicTask.java	/^    public final void run(Interval current) {$/;"	method	line:19
runmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val runmvis = interwr.cvis.visitMethod($/;"	constants	line:1362
rvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rvalues = srcPatterns.map(constructPathFromPattern)$/;"	constants	line:1666
sFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sFile = fileWithExtension(".s")$/;"	constants	line:358
sameLength	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def sameLength(lst1: List[_], lst2: List[_]) = (lst1.length == lst2.length)$/;"	methods	line:43
sanityCheckGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def sanityCheckGroup($/;"	methods	line:132
scopeWithInline	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val scopeWithInline = addEntry(SymTab.LocalVar(name.name))$/;"	constants	line:631
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        private[this] def sep = if(async) ("{{", "}}") else ("{", "}")$/;"	methods	line:720
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val sep = "()[]{};@\\"\\'."$/;"	constants	line:34
server	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        val server = JettyLathosServer.start(8080)$/;"	constants	line:157
set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    void set(int index, E value);$/;"	method	line:5
setCompleted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def setCompleted = Intervals.this.synchronized {$/;"	methods	line:41
setHarmonicField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def setHarmonicField(fsym: VarSymbol.Field) = {$/;"	methods	line:193
setInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def setInterval(inter: Interval) = Intervals.this.synchronized {$/;"	methods	line:24
setMemories	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    private[this] def setMemories(memories: Memories) = synchronized {$/;"	methods	line:72
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {}$/;"	methods	line:18
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {$/;"	methods	line:287
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def setMethodGroups(groups: List[MethodGroup]): Unit$/;"	methods	line:43
setPosition	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def setPosition(pos: Position) {$/;"	methods	line:317
setRunning	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def setRunning = Intervals.this.synchronized {$/;"	methods	line:36
setThrew	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^        def setThrew(thr: Throwable) = Intervals.this.synchronized {$/;"	methods	line:46
set_compile_opts	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def set_compile_opts(self, opts):$/;"	member	line:407
signatures	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        \/\/ Both of these class signatures mapped to the same Harmonic types.$/;"	classes	line:327
slot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val slot = maxSlot$/;"	constants	line:562
sorted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val sorted = errors.toList.sortWith((e1, e2) => e1.pos < e2.pos)$/;"	constants	line:33
sourceExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val sourceExt = ".harm"$/;"	constants	line:11
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def sourceFiles(name: Name.Class) = relativeFiles(sourcePaths, sourceExt)(name)$/;"	methods	line:68
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val sourceFiles = config.sourceFiles(className)$/;"	constants	line:210
sourcePaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var sourcePaths = List(new File("."))$/;"	local variables	line:13
sowner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val sowner = symOwner(owner)$/;"	constants	line:132
spath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val spath = SPath.Ghost(ownerPath, gsym)$/;"	constants	line:973
specialize	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def specialize(self, cmd):$/;"	member	line:410
start	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        val start = System.currentTimeMillis$/;"	constants	line:507
startLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val startLabel = new asm.Label()$/;"	constants	line:1375
startLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val startLabel = new asm.Label()$/;"	constants	line:1904
start_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def start_fragment(self, name):$/;"	function	line:290
stashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stashSlot = maxSlot$/;"	constants	line:578
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^    def state($/;"	methods	line:44
static	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val static = "static" ^^^ Path.Static$/;"	constants	line:82
staticMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def staticMethods(className: Name.Class, methodName: Name.Method) = {$/;"	methods	line:243
staticMroMethodDescFromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def staticMroMethodDescFromSym(msym: MethodSymbol): String = {$/;"	methods	line:163
staticPlainMethodDescFromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def staticPlainMethodDescFromSym(msym: MethodSymbol): String = {$/;"	methods	line:156
staticSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val staticSuffix = "$Harmonic$Static"$/;"	constants	line:20
stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmt: PackratParser[out.Stmt] = positioned($/;"	constants	line:419
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1834
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1846
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1856
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(verInt + 1), mvis)$/;"	constants	line:2102
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(0, accessMap, nextMro, mvis)$/;"	constants	line:1902
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor($/;"	constants	line:1587
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:1726
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:2030
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(0, accessMap, IntConstant(0), mvis)$/;"	constants	line:2199
stmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmts: PackratParser[List[out.Stmt]] = ($/;"	constants	line:431
stmtsSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtsSummary = stmts.foldLeft(SymbolSummary.empty)(summarizeSymbolsInStmt)$/;"	constants	line:692
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:456
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:480
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:508
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:540
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:439
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:460
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:484
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:512
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:549
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor): Unit$/;"	methods	line:442
storeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:180
strs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            val strs = name.parts.zip(args).map { case (p, a) =>$/;"	constants	line:812
subinterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def subinterval[R]($/;"	methods	line:546
subpage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def subpage(title: String)(func: => Unit) {$/;"	methods	line:460
subpaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^            val subpaths = fact.path match {$/;"	constants	line:68
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = lvalues$/;"	methods	line:471
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = params$/;"	methods	line:444
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns: List[AstPattern[S]]$/;"	methods	line:417
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val subst = Subst(Path.This -> path)$/;"	constants	line:173
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val subst = pps_sub.zip(pps_sup).foldLeft(Subst.empty)(addOverrideSubst)$/;"	constants	line:664
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = createSubst(msym) \/\/ must succeed or else would not be appl.$/;"	constants	line:678
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:1008
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val subst = createSubst(msym)$/;"	constants	line:645
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^            var subst = Subst.vt(varNames -> args)$/;"	local variables	line:88
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        private[this] lazy val subst = {$/;"	constants	line:63
substArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val substArgs = for(a <- superArgs) yield subst.typeArg(a)$/;"	constants	line:175
substForFlatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    def substForFlatArgs(flatArgs: List[SPath.Typed]) = {$/;"	methods	line:75
substFromPatExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def substFromPatExprs(pats: List[Pattern.Ref], asts: List[in.Expr]): Subst = {$/;"	methods	line:300
suffixAdded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        def suffixAdded(state: State, suffix: List[Fact.Forward]): Unit = {$/;"	methods	line:190
summarizeSymbolsInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInExpr(summary: SymbolSummary, expr: in.Expr): SymbolSummary = {$/;"	methods	line:666
summarizeSymbolsInPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInPath(summary: SymbolSummary, path: SPath.Typed): SymbolSummary = {$/;"	methods	line:648
summarizeSymbolsInPathNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInPathNode(summary: SymbolSummary, node: in.TypedPath) = {$/;"	methods	line:662
summarizeSymbolsInStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmt(summary: SymbolSummary, stmt: in.Stmt): SymbolSummary = {$/;"	methods	line:685
summarizeSymbolsInStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmts(stmts: List[in.Stmt]) = {$/;"	methods	line:723
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1240
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1793
summaryExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryExprs = exprs.foldLeft(summary)(summarizeSymbolsInExpr)$/;"	constants	line:714
summaryRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryRv = summarizeSymbolsInExpr(summary, rv)$/;"	constants	line:707
summaryTmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryTmpl = summarizeSymbolsInStmts(tmpl.stmts)$/;"	constants	line:669
supCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^                val supCsym = global.csym(name.name)$/;"	constants	line:53
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def superClassNames: List[Name.Class] = LoadedData.join.superClassNames$/;"	methods	line:47
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def superClassNames = SuperClassNames.join$/;"	methods	line:184
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def superClassNames: List[Name.Class]$/;"	methods	line:55
superClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val superClasses = {$/;"	constants	line:36
superClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val superClasses = opt("extends"~>comma1(extendsDecl)) ^^ {$/;"	constants	line:142
superCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^            val superCsym = global.csym(superName) $/;"	constants	line:25
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val superCsyms = superNames.map(global.csym)$/;"	constants	line:55
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superCsyms = csym.superClassNames.map(global.csym)$/;"	constants	line:62
superLists	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val superLists = superCsyms.map(_.mro)$/;"	constants	line:56
superNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val superNames = for(c <- superClasses) yield Name.Class(c)$/;"	constants	line:45
superNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val superNames = csym.superClassNames$/;"	constants	line:54
superSymTab	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        var superSymTab = mergeSuperSymbolTables(csym)$/;"	local variables	line:90
superSymtabs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superSymtabs = superCsyms.map(constructSymbolTable)$/;"	constants	line:63
superTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def superTypes: List[Type.Class] = LoadedData.join.superTypes$/;"	methods	line:48
superTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def superTypes = SuperTypes.join$/;"	methods	line:206
superTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def superTypes: List[Type.Class]$/;"	methods	line:83
superTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def superTypes($/;"	methods	line:163
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: S$/;"	methods	line:431
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: VSym$/;"	methods	line:475
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sym = new VarSymbol.Local(NoPosition, Modifier.Set.empty, name, ty)$/;"	constants	line:1661
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val sym = env.locals(localName.name)$/;"	constants	line:862
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val sym = env.locals(localName.name)$/;"	constants	line:899
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = env.locals(localName)$/;"	constants	line:413
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(outExpr.pos, Modifier.Set.empty, name, outExpr.ty)$/;"	constants	line:1236
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(stmt.pos, Modifier.Set.empty, name.name, Type.InlineInterval)$/;"	constants	line:737
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = newSym(name.pos, modifiers, name.name, ty)$/;"	constants	line:244
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val sym = new VarSymbol.Local(name.pos, mod, name.name, ty)$/;"	constants	line:818
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = VarSymbol.errorLocal(Name.LocalVar(name), None)$/;"	constants	line:368
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    def sym = Sym.v$/;"	methods	line:79
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    val sym = {$/;"	constants	line:31
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    def sym = Sym.v$/;"	methods	line:110
symCreate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    private[this] val symCreate: AsyncInterval = {$/;"	constants	line:40
symCreate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val symCreate: AsyncInterval = {$/;"	constants	line:59
symElaborate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    private[this] val symElaborate: AsyncInterval = {$/;"	constants	line:81
symElaborate	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    private[this] val symElaborate: AsyncInterval = {$/;"	constants	line:112
symOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def symOwner(owner: Path.Owner): SPath.Owner = owner match {$/;"	methods	line:62
symPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val symPath = accessMap.syms(decl.vsym)$/;"	constants	line:1414
symPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def symPath(path: Path.Ref): SPath = Lathos.context.indent(this, ".symPath(", path, ")") {$/;"	methods	line:99
symPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def symPath(path: Path.Ref) = xtra.symPath(path)$/;"	methods	line:233
symPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def symPath(spath: SPath): SPath = {$/;"	methods	line:28
symPathForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def symPathForPath(path: in.AnyPathNode): SPath = {$/;"	methods	line:382
sym_pat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val sym_pat = global.csym(name_pat)$/;"	constants	line:546
sym_val	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                    val sym_val = global.csym(name_val)$/;"	constants	line:545
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ Every class symbol potentially has several intervals corresponding$/;"	classes	line:15
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                \/\/ Find the most specific class symbol that is a supertype of both:$/;"	classes	line:516
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                \/\/ Restrict the arguments to those defined on that class symbol:$/;"	classes	line:524
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S] = List(sym)$/;"	methods	line:434
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S] = subpatterns.flatMap(_.symbols)$/;"	methods	line:420
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[S]$/;"	methods	line:413
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/\/ to different processing phases.  For some class symbols, these intervals$/;"	classes	line:16
symbolsDeclaredInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsDeclaredInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:643
symbolsReassignedInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsReassignedInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:638
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val syms = new mutable.HashMap[VarSymbol.Any, AccessPath]()$/;"	constants	line:558
table	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def table(func: => Unit) {$/;"	methods	line:450
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targ = typeArg(Name.ArrayElem, ty.getComponentType).get$/;"	constants	line:150
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targ = typeArg(Name.ArrayElem, ty.getGenericComponentType).get$/;"	constants	line:160
targetCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val targetCsym = global.csym(extendsDecl.className.name)$/;"	constants	line:612
targs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targs = tparams.zip(ty.getActualTypeArguments).flatMap(typeArg)$/;"	constants	line:180
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1412
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1448
taskClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val taskClassName = genClassName(accessMap.context, decl)$/;"	constants	line:1502
tcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val tcRel: PackratParser[TcRel] = ($/;"	constants	line:126
tcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tcRel = ($/;"	constants	line:219
techniques	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] val techniques = List[Technique](tryConstant, tryBuiltin, tryAlreadyMapped)$/;"	constants	line:59
templateClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val templateClass = classOf[harmonic.lang.Block[_, _]]$/;"	constants	line:113
templateTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def templateTy($/;"	methods	line:140
test	/Users/niko/git/intervals-java/Harmonic/Makefile	/^test: compile$/;"	targets	line:52
testBackwardsContains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def testBackwardsContains(context: Context): Unit = {$/;"	methods	line:138
testSimpleAssertAfter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def testSimpleAssertAfter(context: Context): Unit = {$/;"	methods	line:79
testSimpleAssertDuring	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def testSimpleAssertDuring(context: Context): Unit = {$/;"	methods	line:59
testSimpleValueBasedQueries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^    def testSimpleValueBasedQueries(context: Context): Unit = {$/;"	methods	line:98
test_file	/Users/niko/git/intervals-java/Harmonic/test.py	/^def test_file(filenm):$/;"	function	line:575
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:143
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:177
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val text = name.name.text$/;"	constants	line:193
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Impl.class: a Java class that implements Foo, suitable$/;"	classes	line:29
theOldCollegeTry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def theOldCollegeTry(lvalue: in.Lvalue): Type = lvalue match {$/;"	methods	line:768
thisAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisAccessPath = derivedAccessMap.pathToFreshSlot(asmClassType(cname))$/;"	constants	line:1242
thisCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def thisCsym = $/;"	methods	line:321
thisField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            def thisField(memberName: Name.Member) = {$/;"	methods	line:377
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val thisPath = accessMap.addUnboxedSym(csym.loweredSource.thisSym)$/;"	constants	line:1895
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisPath = accessMap.addUnboxedSym(thisSym)$/;"	constants	line:1822
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPath = accessMap.addUnboxedSym(csym.loweredSource.thisSym)$/;"	constants	line:2196
thisPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^        val thisPath = csym.loweredSource.thisSym.toSPath$/;"	constants	line:268
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(className, List()).toAsmType) \/\/ reserve this ptr$/;"	constants	line:1717
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(csym.name, List()).toAsmType) \/\/ reserve this ptr$/;"	constants	line:2026
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(Type.Class(csym.name, List()).toAsmType)$/;"	constants	line:2081
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisSym = csym.loweredSource.thisSym$/;"	constants	line:1818
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^        val thisSym = loweredSource.thisSym$/;"	constants	line:266
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val thisSym = env.lookupThis$/;"	constants	line:605
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisSym = new VarSymbol.Local(csym.pos, Modifier.Set.empty, Name.ThisLocal, thisTy)$/;"	constants	line:24
thisTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisTy = Type.Class(csym.name, List())$/;"	constants	line:23
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Byte l, Double r) { return l * r; }$/;"	method	line:237
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Byte r) { return l * r; }$/;"	method	line:312
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Double r) { return l * r; }$/;"	method	line:327
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Float r) { return l * r; }$/;"	method	line:324
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Integer r) { return l * r; }$/;"	method	line:318
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Long r) { return l * r; }$/;"	method	line:321
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Short r) { return l * r; }$/;"	method	line:315
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Float l, Double r) { return l * r; }$/;"	method	line:309
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Integer l, Double r) { return l * r; }$/;"	method	line:273
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Long l, Double r) { return l * r; }$/;"	method	line:291
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Short l, Double r) { return l * r; }$/;"	method	line:255
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Byte l, Float r) { return l * r; }$/;"	method	line:234
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Byte r) { return l * r; }$/;"	method	line:294
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Float r) { return l * r; }$/;"	method	line:306
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Integer r) { return l * r; }$/;"	method	line:300
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Long r) { return l * r; }$/;"	method	line:303
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Short r) { return l * r; }$/;"	method	line:297
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Integer l, Float r) { return l * r; }$/;"	method	line:270
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Long l, Float r) { return l * r; }$/;"	method	line:288
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Short l, Float r) { return l * r; }$/;"	method	line:252
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Byte r) { return l * r; }$/;"	method	line:222
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Integer r) { return l * r; }$/;"	method	line:228
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Short r) { return l * r; }$/;"	method	line:225
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Byte r) { return l * r; }$/;"	method	line:258
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Integer r) { return l * r; }$/;"	method	line:264
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Short r) { return l * r; }$/;"	method	line:261
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Byte r) { return l * r; }$/;"	method	line:240
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Integer r) { return l * r; }$/;"	method	line:246
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Short r) { return l * r; }$/;"	method	line:243
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Byte l, Long r) { return l * r; }$/;"	method	line:231
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Integer l, Long r) { return l * r; }$/;"	method	line:267
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Byte r) { return l * r; }$/;"	method	line:276
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Integer r) { return l * r; }$/;"	method	line:282
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Long r) { return l * r; }$/;"	method	line:285
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Short r) { return l * r; }$/;"	method	line:279
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Short l, Long r) { return l * r; }$/;"	method	line:249
tmpVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def tmpVarName(from: Ast.Node) = {$/;"	methods	line:699
tmplmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplmvis = tmplwr.cvis.visitMethod($/;"	constants	line:1566
tmplwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplwr = new ClassWriter(blockClassName, noSuffix, tmpl.pos)$/;"	constants	line:1535
toAnnPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toAnnPrefix: String$/;"	methods	line:24
toAnnPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnPrefix = ""$/;"	methods	line:39
toAnnPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnPrefix = toString + "$"$/;"	methods	line:67
toAnnPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnPrefix = toString + "."$/;"	methods	line:51
toAnnString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toAnnString = "(%s#%s)".format(className, text)$/;"	methods	line:155
toAnnString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toAnnString: String$/;"	methods	line:27
toAnnString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnString = "<root>"$/;"	methods	line:40
toAnnString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnString = base.toAnnPrefix + name$/;"	methods	line:52
toAnnString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toAnnString = base.toAnnPrefix + name$/;"	methods	line:82
toAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def toAnon = AnonTuple(patterns.map(_.toAnon))$/;"	methods	line:61
toAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def toAnon = AnonVar(ty)$/;"	methods	line:55
toAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def toAnon: Anon$/;"	methods	line:50
toApNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toApNode: AnyPath = AnyPath(path)$/;"	methods	line:1166
toApNodeWithPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toApNodeWithPosOf(n: Node): AnyPath = withPosOf(n, toApNode)$/;"	methods	line:1167
toAsmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def toAsmType: asm.Type = ty match {$/;"	methods	line:112
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(context.toPackage(pkg), component)$/;"	methods	line:124
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(pkg, nm)$/;"	methods	line:117
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package): Name.Class$/;"	methods	line:109
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toFact = req match {$/;"	methods	line:1173
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.EnsuresFinal(left, right)$/;"	methods	line:71
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.Hb(left, right)$/;"	methods	line:45
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.InlineSubOf(left, right)$/;"	methods	line:39
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.Locks(left, right)$/;"	methods	line:27
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.PathEq(left, right)$/;"	methods	line:51
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.PermitsRd(left, right)$/;"	methods	line:66
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.PermitsWr(left, right)$/;"	methods	line:61
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref) = K.SubOf(left, right)$/;"	methods	line:33
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref): inference.Fact    $/;"	methods	line:12
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref): inference.Fact$/;"	methods	line:6
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref): inference.Fact.Backward$/;"	methods	line:22
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def toFact(left: Path.Ref, right: Path.Ref): inference.Fact.Forward$/;"	methods	line:16
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    def toFact(left: Type, right: Type) = K.TypeEq(left, right)$/;"	methods	line:10
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    def toFact(left: Type, right: Type) = K.TypeUb(left, right)$/;"	methods	line:15
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    def toFact(left: Type, right: Type) = K.TypeUb(right, left)$/;"	methods	line:20
toFact	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    def toFact(left: Type, right: Type): inference.Fact$/;"	methods	line:4
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix: String$/;"	methods	line:12
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toInternalPrefix = ""$/;"	methods	line:35
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toInternalPrefix = base.toInternalPrefix + name + "\/"$/;"	methods	line:47
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toInternalPrefix = internalName + "$"$/;"	methods	line:61
toList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def toList = All.filter(contains)$/;"	methods	line:21
toNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toNode: TypedPath = TypedPath(path)$/;"	methods	line:1159
toNodeWithPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toNodeWithPosOf(n: Node): TypedPath = withPosOf(n, toNode)$/;"	methods	line:1160
toOptFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerFieldMember.scala	/^    override def toOptFieldSymbol(memName: Name.Member): Option[VarSymbol.Field] = {$/;"	methods	line:97
toOptFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerIntervalMember.scala	/^    override def toOptFieldSymbol(memName: Name.Member): Option[VarSymbol.Field] = {$/;"	methods	line:44
toOptFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptFieldSymbol(memName: Name.Member): Option[VarSymbol.Field] = None$/;"	methods	line:24
toOptMethodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptMethodSymbol(mthdName: Name.Method): Option[MethodSymbol] = None$/;"	methods	line:20
toOptMethodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMethodMember.scala	/^    override def toOptMethodSymbol(mthdName: Name.Method): Option[MethodSymbol] = {$/;"	methods	line:125
toOptTypeArgOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toOptTypeArgOf(csym: ClassSymbol)(targ: in.TypeArg) = {$/;"	methods	line:529
toOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def toOption[A](a: A): Option[A] = {$/;"	methods	line:66
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(context.toPackage(pkg), component)$/;"	methods	line:125
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(pkg, nm)$/;"	methods	line:118
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package): Name.Package$/;"	methods	line:110
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        def toPath = Path.Local(name)$/;"	methods	line:154
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPath = Path.Local(this)$/;"	methods	line:169
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Call(receiver.toPathOwner, msym.id, args.map(_.toPath))$/;"	methods	line:96
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Cast(ty, path.toPath)$/;"	methods	line:49
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Constant(obj)$/;"	methods	line:54
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Field(base.toPathOwner, sym.name) \/\/ fields, ghosts same in non-typed form$/;"	methods	line:75
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Field(base.toPathOwner, sym.name)$/;"	methods	line:62
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Index(array.toPath, index.toPath)$/;"	methods	line:101
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Local(sym.name)$/;"	methods	line:43
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPath = Path.Tuple(paths.map(_.toPath))$/;"	methods	line:119
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    def toPath: Path.Ref$/;"	methods	line:17
toPathOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPathOwner = Path.Static$/;"	methods	line:27
toPathOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def toPathOwner: Path.Owner$/;"	methods	line:23
toPathOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^    def toPathOwner = toPath$/;"	methods	line:18
toPatternRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^                def toPatternRef: Pattern.Ref = pat match {$/;"	methods	line:1150
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix: String$/;"	methods	line:17
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toPrefix = ""$/;"	methods	line:37
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toPrefix = toString + "."$/;"	methods	line:49
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toPrefix = toString + "."$/;"	methods	line:65
toSPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        def toSPath = SPath.Local(this)$/;"	methods	line:155
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, kind, right)$/;"	methods	line:343
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, rel, right)$/;"	methods	line:277
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, rel, right)$/;"	methods	line:290
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:605
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, typeRef)$/;"	methods	line:598
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), name, tref)$/;"	methods	line:454
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), tref, name)$/;"	methods	line:486
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s = %s".format(lvsym, rvalue)$/;"	methods	line:763
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(context, component)$/;"	methods	line:122
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(owner, name)$/;"	methods	line:790
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:569
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s[%s]".format(className, typeArgs.mkString(", "))$/;"	methods	line:573
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s) = (%s)".format(lvalues.mkString(", "), rvalues.mkString(", "))$/;"	methods	line:775
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(args.mkString(", "))$/;"	methods	line:395
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(exprs.mkString(", "))$/;"	methods	line:702
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(subpatterns.mkString(", "))$/;"	methods	line:422
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(types.mkString(", "))$/;"	methods	line:583
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)(%s)".format(typeRef, expr)$/;"	methods	line:742
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = ";"$/;"	methods	line:664
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<(Void)null>"$/;"	methods	line:851
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<err:%s>".format(name)$/;"	methods	line:619
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<infer>"$/;"	methods	line:544
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<this>"$/;"	methods	line:856
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "@%s(%s)".format(name, args.mkString(", "))$/;"	methods	line:358
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[class %s%s]".format($/;"	methods	line:175
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[interval %s(%s)]".format(name, parent)$/;"	methods	line:232
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[method %s]".format(name)$/;"	methods	line:250
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "extends %s(%s)".format(className, args.mkString(", "))$/;"	methods	line:379
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s -> %s".format(fromName, toName)$/;"	methods	line:157
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s.*".format(fromName)$/;"	methods	line:163
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "interval %s {...}".format(name)$/;"	methods	line:865
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s".format(tref, args.mkString("(", ", ", ")"))$/;"	methods	line:834
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "null"$/;"	methods	line:846
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "return(%s)".format(value)$/;"	methods	line:876
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "super"$/;"	methods	line:799
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "{...}"$/;"	methods	line:671
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = ($/;"	methods	line:556
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = Type.Null.toString$/;"	methods	line:579
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:1004
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:1010
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:1014
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:1018
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:500
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:511
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:623
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:803
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:989
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:993
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = nm$/;"	methods	line:114
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = obj.toString$/;"	methods	line:756
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = owner + "." + name$/;"	methods	line:636
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString        $/;"	methods	line:552
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:399
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:649
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:653
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = ty.toString$/;"	methods	line:528
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:628
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:641
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:722
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:811
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/    override def toString = "[ctor %s]".format(name)$/;"	methods	line:206
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:45
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    override def toString = getId$/;"	methods	line:197
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "EnsuresFinal-Implies-PermitsRd"$/;"	methods	line:490
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Eq-Implies-Sub-Sup"$/;"	methods	line:424
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Exists-Derived-From-Path"$/;"	methods	line:65
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Exists-Derived-From-Type"$/;"	methods	line:96
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Extends"$/;"	methods	line:347
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Final-EnsuresFinal"$/;"	methods	line:537
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "InlineSubOf-Implies-SubOf"$/;"	methods	line:441
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "InlineSubOf-PermitsWr"$/;"	methods	line:522
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Mock-" + outputKind.toString$/;"	methods	line:571
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Path-Has-Class"$/;"	methods	line:549
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Path-HasType"$/;"	methods	line:311
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Path-Induction-Path-Eq"$/;"	methods	line:243
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Path-Simplify"$/;"	methods	line:222
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PathEq-Reflexive"$/;"	methods	line:192
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PathEq-Symmetric"$/;"	methods	line:206
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PathEqualityRuleBackward(%s)".format(outputKind)$/;"	methods	line:169
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PathEqualityRuleForward(%s)".format(otherKind)$/;"	methods	line:145
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PathFactRule(%s)".format(kind)$/;"	methods	line:50
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "PermitsWr-Implies-PermitsRd"$/;"	methods	line:476
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Sub-Sup-Imply-Eq"$/;"	methods	line:367
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Sub-Transitive"$/;"	methods	line:407
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "SubOf-Implies-HB"$/;"	methods	line:456
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "SubOf-PermitsRd"$/;"	methods	line:505
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Type-Eq-Inductive"$/;"	methods	line:274
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Type-Eq-Reflexive"$/;"	methods	line:260
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Type-Induction-Path-Eq"$/;"	methods	line:295
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Type-Induction-Path-Eq"$/;"	methods	line:329
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "Type-Ub-Eq-Prop"$/;"	methods	line:389
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "TypeFactRule(%s)".format(kind)$/;"	methods	line:84
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        override def toString = "typeArgs"$/;"	methods	line:121
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    override def toString = "%s:%s:%s".format(file, line, column)$/;"	methods	line:8
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:176
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def toString = "Ghost(%s, %x)".format(name, System.identityHashCode(this))$/;"	methods	line:108
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    override def toString = "MethodSymbol(%s.%s, %x)".format(className, name, System.identityHashCode(this))$/;"	methods	line:67
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    override def toString = {$/;"	methods	line:31
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodId.scala	/^    override def toString = {$/;"	methods	line:12
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    override def toString = "[(%s): %s]".format($/;"	methods	line:9
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        override def toString = "ModSet(%s)".format(toList.mkString(", "))$/;"	methods	line:18
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toString: String$/;"	methods	line:20
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "(%s.%s)".format(className, text)$/;"	methods	line:151
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "<root>"$/;"	methods	line:38
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:50
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:80
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = parts.mkString("", "()", "()")$/;"	methods	line:135
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = text$/;"	methods	line:171
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            override def toString = "operator '%s'".format(chars)$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "%s.%s(%s)".format(receiver, methodId, args.mkString(", "))$/;"	methods	line:36
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "%s[%s]".format(array, index)$/;"	methods	line:39
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "(%s)".format(paths.mkString(","))$/;"	methods	line:42
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = "(%s)%s".format(ty, path)$/;"	methods	line:24
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = base.toString + "." + f.toString$/;"	methods	line:33
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = obj match {$/;"	methods	line:27
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = v.toString$/;"	methods	line:21
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        override def toString = "%s: %s".format(name, ty)$/;"	methods	line:57
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        override def toString = "(%s)".format(patterns.mkString(", "))        $/;"	methods	line:44
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        override def toString = "(%s)".format(patterns.mkString(", "))$/;"	methods	line:63
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        override def toString = ty.toString$/;"	methods	line:39
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "->"$/;"	methods	line:44
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "="$/;"	methods	line:50
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "ensuresFinal"$/;"	methods	line:70
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "inlineSubOf"$/;"	methods	line:38
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "locks"$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsRd"$/;"	methods	line:65
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsWr"$/;"	methods	line:60
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "subOf"$/;"	methods	line:32
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:115
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:121
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:45
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:50
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:58
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:71
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:76
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        override def toString = toPath.toString$/;"	methods	line:97
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":"$/;"	methods	line:9
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":>"$/;"	methods	line:19
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = "<:"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:32
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, ty)$/;"	methods	line:35
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "(%s)".format(typeRefs.mkString(", "))$/;"	methods	line:22
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "Null"$/;"	methods	line:25
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = $/;"	methods	line:17
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                    override def toString = $/;"	methods	line:611
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        override def toString = getId$/;"	methods	line:164
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/debug/Intervals.scala	/^    override def toString = getId$/;"	methods	line:62
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        override def toString = "Beta[%s]".format(kinds.map(_.getName).mkString(", "))$/;"	methods	line:162
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                override def toString = "X(i) => Y(i)"$/;"	methods	line:122
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                override def toString = "X(i), Y(i) => A(i)"$/;"	methods	line:130
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^            override def toString = "W(i), Y(i) => Z(i)"$/;"	methods	line:45
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^            override def toString = "X(i) => Y(i)"$/;"	methods	line:37
toSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val toSym = global.csym(toName)$/;"	constants	line:125
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toTag: String$/;"	methods	line:15
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toTag = "$Harmonic$"$/;"	methods	line:36
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toTag = base.toTag + name + "$"$/;"	methods	line:48
toTag	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toTag = base.toTag + name + "$"$/;"	methods	line:63
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type) = ()$/;"	methods	line:1055
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type) = ()$/;"	methods	line:1097
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type) = ty$/;"	methods	line:1141
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def toTy(ty: Type): Ty$/;"	methods	line:75
toType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def toType: Type.Class = name.toType$/;"	methods	line:50
toType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toType = Type.Class(this, Nil)$/;"	methods	line:71
toTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toTypeRef(tref: in.ResolveTypeRef): Type = {$/;"	methods	line:505
token	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def token: Parser[Token] = ( $/;"	methods	line:41
tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^        val tokens = new lexical.Scanner(text)$/;"	constants	line:138
tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val tokens = new parser.lexical.Scanner(reader)$/;"	constants	line:461
topLevelClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val topLevelClassName = rep1sep(ident, ".") ^^ { idents => $/;"	constants	line:51
topLevelPage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def topLevelPage(id: String, title: Object*) = {$/;"	methods	line:327
tops	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val tops = group.msyms.foldLeft(group.msyms) {$/;"	constants	line:150
total	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^        var total = 0$/;"	local variables	line:162
tparams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val tparams = cls.getTypeParameters.toList.map(tv => Name.Member(className, tv.getName))$/;"	constants	line:179
trace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def trace(cvis: asm.ClassVisitor) = {$/;"	methods	line:354
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:1056
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:1098
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = tref.ty$/;"	methods	line:1142
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def trefTy(tref: TR): Ty$/;"	methods	line:77
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.EnsuresFinal): Boolean = {$/;"	methods	line:539
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.HasClass): Boolean = {$/;"	methods	line:555
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.PermitsRd): Boolean = {$/;"	methods	line:478
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.PermitsRd): Boolean = {$/;"	methods	line:492
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.PermitsRd): Boolean = {$/;"	methods	line:507
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(recurse: Recurse[Env.Xtra], fact: K.PermitsWr): Boolean = {$/;"	methods	line:524
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, bnd1: K.TypeUb, bnd2: K.TypeUb): Iterable[Fact.Forward] = {$/;"	methods	line:409
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, eq: K.PathEq): Iterable[Fact.Forward] = {$/;"	methods	line:208
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, eq: K.PathExists): Iterable[Fact.Forward] = {$/;"	methods	line:194
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, eq: K.TypeEq): Iterable[Fact.Forward] = {$/;"	methods	line:262
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.PathExists) = {$/;"	methods	line:67
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.PathExists): Iterable[Fact.Forward] = {$/;"	methods	line:224
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.PathExists): Iterable[Fact.Forward] = {$/;"	methods	line:313
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.PathExists, eq: K.PathEq): Iterable[Fact.Forward] = {$/;"	methods	line:245
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.TypeEq): Iterable[Fact.Forward] = {$/;"	methods	line:426
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.TypeExists) = {$/;"	methods	line:103
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.TypeExists): Iterable[Fact.Forward] = {$/;"	methods	line:276
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, fact: K.TypeExists, factEq: K.PathEq): Iterable[Fact.Forward] = {$/;"	methods	line:297
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, hasType: K.HasType) = {$/;"	methods	line:123
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, hasType: K.HasType, ub: K.TypeUb): Iterable[Fact.Forward] = {$/;"	methods	line:331
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, ht: K.HasType): Iterable[Fact.Forward] = {$/;"	methods	line:349
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, inlineSubOf: K.InlineSubOf): Iterable[Fact.Forward] = {$/;"	methods	line:443
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, subOf: K.SubOf): Iterable[Fact.Forward] = {$/;"	methods	line:458
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, ub1: K.TypeUb, ub2: K.TypeUb): Iterable[Fact.Forward] = {$/;"	methods	line:369
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/HarmonicRulesNetwork.scala	/^        def trigger(xtra: Env.Xtra, ub: K.TypeUb, eq: K.TypeEq): Iterable[Fact.Forward] = {$/;"	methods	line:391
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                def trigger(recurse: Recurse[Unit], a: A) = {$/;"	methods	line:131
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                def trigger(unit: Unit, x: X) = {$/;"	methods	line:123
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^            def trigger(unit: Unit, w: W, y: Y) = {$/;"	methods	line:46
trigger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^            def trigger(unit: Unit, x: X) = {$/;"	methods	line:38
tryAlreadyMapped	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] def tryAlreadyMapped(path: Path.Ref) = {$/;"	methods	line:44
tryBuiltin	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] def tryBuiltin(path: Path.Ref) = {$/;"	methods	line:31
tryConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] def tryConstant(path: Path.Ref) = {$/;"	methods	line:24
tryLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tryLabel = new asm.Label()$/;"	constants	line:1207
tryMock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    def tryMock(path: Path.Ref): Option[Object] = {$/;"	methods	line:61
tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tuple = positioned($/;"	constants	line:370
tupleBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleBlkParam = positioned($/;"	constants	line:268
tupleExtendsArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleExtendsArg = positioned($/;"	constants	line:126
tupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleLvalue = positioned($/;"	constants	line:277
tupleMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleMthdParam = positioned($/;"	constants	line:259
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:1058
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:1100
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = Type.Tuple(tys)$/;"	methods	line:1144
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def tupleTy(tys: List[Ty]): TyTuple$/;"	methods	line:78
tupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleType = positioned($/;"	constants	line:304
tvar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val tvar = Name.LocalVar(tmpVarName(expr))$/;"	constants	line:1089
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val ty: PackratParser[Type] = ($/;"	constants	line:102
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = errTy$/;"	methods	line:618
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = returnTy(data)$/;"	methods	line:810
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = toTy(path.ty)$/;"	methods	line:654
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = trefTy(typeRef)$/;"	methods	line:740
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:231
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:762
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:774
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:864
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = voidTy$/;"	methods	line:874
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:432
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:624
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:414
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:95
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: TyTuple = tupleTy(subpatterns.map(_.ty))$/;"	methods	line:418
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Check.scala	/^                    val ty = In(env, current).checkExpr(rv)$/;"	constants	line:230
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val ty = InEnv(outEnv).toTypeRef(inTref)$/;"	constants	line:853
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val ty = InEnv(outEnv).toTypeRef(inTref)$/;"	constants	line:888
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = firstSuperClassOfferingMethod(mcall.rcvr.pos, mcall.name)$/;"	constants	line:1064
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = tref match {$/;"	constants	line:239
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:1118
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val ty = decl.tref match {$/;"	constants	line:149
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:138
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:164
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val ty: Type$/;"	constants	line:152
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^        val ty: Type,$/;"	constants	line:124
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MemberSymbol.scala	/^    val ty: Type$/;"	constants	line:174
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type$/;"	methods	line:10
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type$/;"	methods	line:15
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type$/;"	methods	line:35
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Tuple = Type.Tuple(patterns.map(_.ty))$/;"	methods	line:43
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def ty = msig.returnTy$/;"	methods	line:95
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def ty = sym.ty$/;"	methods	line:44
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def ty: Type$/;"	methods	line:34
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val ty = Type.Tuple(paths.map(_.ty))$/;"	constants	line:120
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val ty = subst.ty(sym.ty)$/;"	constants	line:69
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val ty = {$/;"	constants	line:103
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        lazy val ty = {$/;"	constants	line:55
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def ty(t: Type): Type = t match {$/;"	methods	line:45
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c[...]` must be class type:$/;"	classes	line:568
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c` could be path or class type:$/;"	classes	line:532
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a` must be class type:$/;"	classes	line:562
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeArg(pair: (Name.Member, reflect.Type)): Option[Type.TypeArg] = pair match {$/;"	methods	line:135
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeArg: PackratParser[out.TypeArg] = typeTypeArg | pathTypeArg$/;"	constants	line:316
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def typeArg(targ: Type.Arg): Type.Arg = targ match {$/;"	methods	line:52
typeArgIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typeArgIsFinalBy(targ: Type.Arg, inter: SPath): Boolean = {$/;"	methods	line:724
typeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typeArgs = inTypeArgs.flatMap(toOptTypeArgOf(csym))$/;"	constants	line:523
typeArgsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typeArgsAreEquatable(targ1: Type.Arg, targ2: Type.Arg): Boolean = {$/;"	methods	line:584
typeIsFinalBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typeIsFinalBy(ty: Type, inter: SPath): Boolean = {$/;"	methods	line:715
typeParamSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeParamSymTabEntry(tv: reflect.TypeVariable[_]) = {$/;"	methods	line:131
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeRef(ty: reflect.Type): Type = ty match {$/;"	methods	line:148
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeRef: PackratParser[out.TR] = constrainedType | pathType | tupleType$/;"	constants	line:302
typeT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val typeT = Type.Member(Path.This, Name.Member(iterableTy.name, "T"))$/;"	constants	line:244
typeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeTypeArg = positioned($/;"	constants	line:318
typedOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def typedOwner(owner: SPath.Owner): SPath.Owner = {$/;"	methods	line:21
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def typedPath(path: Path.Ref): SPath.Typed = Lathos.context.indent(this, ".typedPath(", path, ")") {$/;"	methods	line:67
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typedPath = typedPathForPath(path)$/;"	constants	line:510
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TypedSubst.scala	/^    def typedPath(path: SPath.Typed): SPath.Typed = {$/;"	methods	line:35
typedPathForExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForExpr(outExpr: out.Expr) = {$/;"	methods	line:1252
typedPathForExprFilter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForExprFilter(filter: (SPath.Typed => Boolean))(outExpr: out.Expr): SPath.Typed = {$/;"	methods	line:1228
typedPathForPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathForPath(path: in.AnyPathNode): SPath.Typed = {$/;"	methods	line:372
typedPathNodeForExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def typedPathNodeForExpr(outExpr: out.Expr): out.TypedPath = {$/;"	methods	line:1256
typedSubstForFlatArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def typedSubstForFlatArgs(args: List[SPath.Typed]): TypedSubst = {$/;"	methods	line:265
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * means that we remove redundant class types; i.e., if $/;"	classes	line:264
typesAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typesAreEquatable(ty1: Type, ty2: Type) = factHolds(K.TypeEq(ty1, ty2))$/;"	methods	line:231
tys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val tys = msig.parameterPatterns.flatMap(_.varTys)$/;"	constants	line:820
tys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val tys = for(rt <- reflTypes) yield typeRef(rt).asInstanceOf[Type.Class]$/;"	constants	line:56
ub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val ub = minimalUpperBounds(varTy)$/;"	constants	line:456
ubPathTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val ubPathTys = pathUpperBounds(spath.toPath)$/;"	constants	line:856
ubs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val ubs = wt.getUpperBounds$/;"	constants	line:138
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def unapply(fact: GuardInter) = Some(fact.guard, fact.inter)$/;"	methods	line:44
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def unapply(fact: Paths) = Some(fact.left, fact.right)$/;"	methods	line:20
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def unapply(fact: Types) = Some(fact.left, fact.right)$/;"	methods	line:84
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def unapply(any: Any) = (this == any)$/;"	methods	line:8
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def unapply(r: Ref) = (this == r)$/;"	methods	line:18
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(p: AnyTuple) = Some(p.patterns)$/;"	methods	line:29
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(p: AnyVar) = Some(p.ty)$/;"	methods	line:20
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    def unapply(rel: PcRel) = (rel == this)$/;"	methods	line:5
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^        def unapply(symPath: SPath.Typed) = Some(symPath.ty)$/;"	methods	line:39
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    def unapply(rel: TcRel) = (rel == this)$/;"	methods	line:5
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    def unapply(ty: Type) = (this == ty)    $/;"	methods	line:8
unbox	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def unbox(box: BoxInfo) {$/;"	methods	line:220
uncovers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Rule.scala	/^    \/\/ trait uncovers the input kinds by reflection.$/;"	traits	line:53
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def undent() {$/;"	methods	line:12
unit	/Users/niko/git/intervals-java/Harmonic/Makefile	/^unit: compile$/;"	targets	line:47
unknown	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    val unknown = new Position() {$/;"	constants	line:29
upperBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def upperBounds(ty: Type) = {$/;"	methods	line:252
usage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def usage(err: PrintStream) {$/;"	methods	line:30
useReflection	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var useReflection = true$/;"	local variables	line:23
used	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    \/\/ HarmonicTask: convenience class used for our harmonic tasks$/;"	classes	line:221
using	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * We also generate the FooTask class using `deriveIntervalTask`. *\/$/;"	classes	line:1444
usingLog	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def usingLog[R](log: lathos.Context)(func: => R) = {$/;"	methods	line:495
v	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def v: T = {$/;"	methods	line:14
v_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    def v_=(v: T) = {$/;"	methods	line:19
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GuardedBy.scala	/^    private[this] var value: Option[T] = None$/;"	local variables	line:7
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/Ghosts.java	/^    public Ghost[] value();$/;"	method	line:15
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/jcompat/OfType.java	/^    public AnnType value();$/;"	method	line:17
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^    public R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^    R value(A argument);$/;"	method	line:10
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^    public String value();$/;"	field	line:20
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^    public String[] value();$/;"	field	line:15
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/runtime/Return.java	/^    public final Object value;$/;"	field	line:9
varBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varBlkParam = positioned($/;"	constants	line:271
varExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def varExpr(name: Name.LocalVar) = {$/;"	methods	line:1104
varIdent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/AnnParse.scala	/^    lazy val varIdent = ident$/;"	constants	line:45
varIdent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varIdent = ident | "this"$/;"	constants	line:80
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    final def varMembers: List[SymTab.Entry] = LoadedData.join.varMembers$/;"	methods	line:49
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def varMembers = VarMembers.join$/;"	methods	line:187
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def varMembers: List[SymTab.Entry]$/;"	methods	line:61
varMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varMthdParam = positioned($/;"	constants	line:262
varName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varName = relBase | "("~>relName<~")"$/;"	constants	line:92
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames = List(name)$/;"	methods	line:56
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames = patterns.flatMap(_.varNames)$/;"	methods	line:62
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varNames: List[Name.LocalVar]$/;"	methods	line:51
varNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SPath.scala	/^            val varNames = msym.msig.parameterPatterns.flatMap(_.varNames)$/;"	constants	line:87
varParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def varParams = List(this)$/;"	methods	line:456
varParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def varParams = params.flatMap(_.varParams)$/;"	methods	line:445
varParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def varParams: List[VarParam[S]]$/;"	methods	line:438
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = List(ty)$/;"	methods	line:16
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = patterns.flatMap(_.varTys)$/;"	methods	line:25
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys: List[Type]$/;"	methods	line:11
version	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Harmonize.scala	/^    val version = "1.0"$/;"	constants	line:15
visitFieldAccessor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitFieldAccessor($/;"	methods	line:1996
visitMethodWithMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitMethodWithMro($/;"	methods	line:1962
visitPlainMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitPlainMethod($/;"	methods	line:1940
voidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidClass = classOf[java.lang.Void]$/;"	constants	line:110
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = ()$/;"	methods	line:1054
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = ()$/;"	methods	line:1096
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def voidTy = Type.Void$/;"	methods	line:1140
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def voidTy: Ty$/;"	methods	line:74
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidTy = Type.Class(voidClass)$/;"	constants	line:122
vp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def vp(lists: (List[Name.LocalVar], List[Path.Ref])) = {$/;"	methods	line:73
vsubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Envirate.scala	/^                val vsubst = msym.substForFlatArgs(argPaths)$/;"	constants	line:48
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:1057
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:1099
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(vsym: VSym) = vsym.ty$/;"	methods	line:1143
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def vsymTy(vsym: VSym): Ty$/;"	methods	line:76
vt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def vt(lists: (List[Name.LocalVar], List[SPath.Typed])) = {$/;"	methods	line:78
wcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val wcRel: PackratParser[PcWcRel] = ($/;"	constants	line:208
we	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                    \/\/ Check that we got (at least) the class we expected to find:$/;"	classes	line:190
which	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ Creates a name for the class which will be generated for node `node`$/;"	classes	line:42
while_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void while_($/;"	method	line:59
will	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * onto the bytecode stack.  The class will have fields$/;"	classes	line:1527
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Returns an access map for a method-local class with$/;"	classes	line:1225
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** True if a class with the name `className` has been$/;"	classes	line:139
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        \/\/ Process the rest of the class with all members in scope:$/;"	classes	line:38
withLock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withLock[R](lock: Lock)(func: => R): R = {$/;"	methods	line:526
withOptReturnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def withOptReturnTy(optReturnTy: Option[Type]): Env = $/;"	methods	line:207
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = EnsuresFinal(left, right)                                $/;"	methods	line:72
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = Hb(left, right)                $/;"	methods	line:51
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = InlineSubOf(left, right)                                $/;"	methods	line:57
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = Locks(left, right)                        $/;"	methods	line:62
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = PathEq(left, right)        $/;"	methods	line:48
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = PermitsRd(left, right)                        $/;"	methods	line:69
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = PermitsWr(left, right)                                $/;"	methods	line:66
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref) = SubOf(left, right)                        $/;"	methods	line:54
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref): inference.Fact$/;"	methods	line:16
withPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withPaths(left: Path.Ref, right: Path.Ref): inference.Fact.Forward$/;"	methods	line:24
withPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOf[P <: Positional, Q <: Product with Positional](from: P, to: Q): Q = {$/;"	methods	line:21
withPosOfOpt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfOpt[P <: Positional, Q <: Product with Positional](from: P, to: Option[Q]): Option[Q] = {$/;"	methods	line:32
withPosOfR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfR[P <: Positional, Q, R <: Product with Positional](from: P, to: Either[Q, R]): Either[Q, R] = {$/;"	methods	line:36
withPosOfRes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def withPosOfRes(path: in.AnyPathNode, res: ResolvePathResult) = res match {$/;"	methods	line:370
withStashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def withStashSlot[R](func: (Int => R)) = {$/;"	methods	line:577
withSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def withSuffix(suffix: String) = Class(base, name + suffix)$/;"	methods	line:85
withTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withTypes(left: Type, right: Type) = TypeEq(left, right)                $/;"	methods	line:89
withTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withTypes(left: Type, right: Type) = TypeUb(left, right)$/;"	methods	line:96
withTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/K.scala	/^        def withTypes(left: Type, right: Type): inference.Fact$/;"	methods	line:80
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, implSuffix, csym.pos)$/;"	constants	line:2271
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, noSuffix, csym.pos)$/;"	constants	line:2155
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, staticSuffix, csym.pos)$/;"	constants	line:2330
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def wr(path: Path.Ref) = Path.Field(path, Name.Wr)$/;"	methods	line:739
writeClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeClassSymbol(csym: ClassFromSource) = {$/;"	methods	line:2357
writeEmptyCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeEmptyCtor($/;"	methods	line:2128
writeForwardingMethodIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethodIfNeeded($/;"	methods	line:1690
writeForwardingMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethods($/;"	methods	line:1743
writeImplClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeImplClass(csym: ClassFromSource) {$/;"	methods	line:2270
writeImplCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeImplCtor($/;"	methods	line:2180
writeInterClassInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterClassInterface(csym: ClassFromSource) {$/;"	methods	line:2154
writeIntervalCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def writeIntervalCtor = {$/;"	methods	line:1328
writeIntervalRun	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def writeIntervalRun = {$/;"	methods	line:1361
writeMethodInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMethodInterface($/;"	methods	line:1985
writeMroMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMroMethodImpl($/;"	methods	line:2074
writePlainToMroDispatch	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writePlainToMroDispatch($/;"	methods	line:2019
writeStaticClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticClass(csym: ClassFromSource) {$/;"	methods	line:2329
writeStaticConstructorMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticConstructorMethodImpl($/;"	methods	line:1804
writeStaticMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticMethodImpl($/;"	methods	line:1875
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val writer = new java.io.FileWriter(sFile)$/;"	constants	line:361
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val writer = new asm.ClassWriter(asm.ClassWriter.COMPUTE_MAXS | asm.ClassWriter.COMPUTE_FRAMES)$/;"	constants	line:378
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val xtra = Env.Xtra(global, Map(Name.FinalLocal -> global.finalSym))$/;"	constants	line:44
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def xtra = factSet.xtra$/;"	methods	line:221
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/DerivedFactSet.scala	/^    val xtra: X$/;"	constants	line:51
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/FactSet.scala	/^    def xtra: X$/;"	methods	line:8
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Network.scala	/^        val xtra: X,$/;"	constants	line:54
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/Recurse.scala	/^    def xtra: X$/;"	methods	line:5
xtra	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/mock/MockEnv.scala	/^    private[this] val xtra = recurse.xtra$/;"	constants	line:11
y	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                    val y = Y(x.i)$/;"	constants	line:124
y	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                val y = Y(x.i)$/;"	constants	line:39
z	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/inference/TestNetwork.scala	/^                    val z = Z(w.i)$/;"	constants	line:48
