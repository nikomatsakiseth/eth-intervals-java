!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
%Gen.java	/Users/niko/git/intervals-java/Harmonic/Makefile	/^%Gen.java: %Gen.py$/;"	targets	line:25
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^public interface AsyncBlock<R, A> extends Block<R, A> {$/;"	interface	line:3
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^public interface Block<R, A> {$/;"	interface	line:3
Abstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^public @interface Abstract {$/;"	interface	line:3
AbstractClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AbstractClass = Class(classOf[harmonic.lang.Abstract])$/;"	constants	line:152
AccessField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessField($/;"	classes	line:306
AccessIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessIndex($/;"	classes	line:276
AccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class AccessMap(val context: Name.Class)$/;"	classes	line:341
AccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class AccessPath extends ValuePath {$/;"	classes	line:245
AccessVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessVar($/;"	classes	line:256
All	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    val All = List(Abstract, Mutable, Override)$/;"	constants	line:13
AmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousInheritance($/;"	classes	line:44
AmbiguousMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class AmbiguousMember(options: List[SymTab.MemberEntry]) extends Error {$/;"	classes	line:210
Annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Annotation($/;"	classes	line:288
Anon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Anon {$/;"	traits	line:7
AnonTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonTuple extends Anon {$/;"	traits	line:24
AnonVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonVar extends Anon {$/;"	traits	line:16
Any	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    type Any = VarSymbol[Name.Var]$/;"	types	line:4
Application	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^public interface Application {$/;"	interface	line:3
Arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Arg$/;"	classes	line:24
ArrayClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayClass = Class(classOf[harmonic.lang.Array[_]])$/;"	constants	line:149
ArrayElem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayElem = Member(ArrayClass, "E")$/;"	constants	line:150
Assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Assign(lvalue: Lvalue, rvalue: Expr) $/;"	classes	line:617
Ast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^abstract class Ast {$/;"	classes	line:10
AstPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AstPath = ParsePath$/;"	types	line:830
AstPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AstPath = ResolvePath$/;"	types	line:868
AstPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type AstPath = TypedPath$/;"	types	line:904
AstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class AstPattern extends Node {$/;"	classes	line:310
AsyncBlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncBlockClass = Class(classOf[harmonic.lang.AsyncBlock[_, _]])$/;"	constants	line:157
AtomicExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait AtomicExpr extends LowerTlExpr$/;"	traits	line:556
Base	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Base(v: Name.Var) extends Ref {$/;"	classes	line:7
Block	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Block($/;"	classes	line:570
BlockA	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockA = Member(BlockClass, "A")$/;"	constants	line:159
BlockClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockClass = Class(classOf[harmonic.lang.Block[_, _]])$/;"	constants	line:156
BlockParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockParent = Member(BlockClass, "Parent")$/;"	constants	line:160
BlockR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockR = Member(BlockClass, "R")$/;"	constants	line:158
Body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Body(stmts: List[Stmt]) extends Node {$/;"	classes	line:521
Body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Body ="Body"$/;"	constants	line:9
Bounder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Bounder(Rel: TcRel) extends TransitiveCloser[Type.Ref] {$/;"	classes	line:280
BoxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class BoxedArray(accessMap: AccessMap)$/;"	classes	line:373
ByteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^case class ByteCode(state: State) {$/;"	classes	line:29
Bytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Bytecode = "Bytecode"    $/;"	constants	line:14
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^  * can still override one another if a third class C extends both A and B$/;"	classes	line:9
C	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        \/\/ to construct the merge, Python 2.3 will refuse to create the class C and $/;"	classes	line:28
CLASSPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	macro	line:10
CLASSPATH=$(JARPATH)	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	targets	line:10
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:857
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = ClassName$/;"	types	line:893
CN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CN = RelName$/;"	types	line:819
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:858
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = ClassName$/;"	types	line:894
CND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CND = RelBase$/;"	types	line:820
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = ClassSymbol$/;"	types	line:907
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:833
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:871
CannotResolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CannotResolve(name: String) extends Error {$/;"	classes	line:139
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Cast(expr: NE, typeRef: TR) extends AtomicExpr {$/;"	classes	line:597
CircularInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class CircularInheritance($/;"	classes	line:30
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Class($/;"	classes	line:32
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Class(name: Name.Class, typeArgs: List[Type.Arg]) extends Ref {$/;"	classes	line:12
ClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassDecl($/;"	classes	line:158
ClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClassName(name: Name.Class) extends QualName {$/;"	classes	line:789
ClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^abstract class ClassSymbol($/;"	classes	line:17
ClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassType(className: ClassName, typeArgs: List[TypeArg]) extends ResolveTypeRef {$/;"	classes	line:454
ClassWriter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ClassWriter(className: Name.Class, suffix: String) $/;"	classes	line:168
ClasslessMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class ClasslessMember(text: String) extends UnloweredMember {$/;"	classes	line:137
ClasslessMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class ClasslessMemberName(name: Name.ClasslessMember) extends UnloweredMemberName {$/;"	classes	line:806
CompUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class CompUnit($/;"	classes	line:122
CompilationFailed	/Users/niko/git/intervals-java/Harmonic/test.py	/^class CompilationFailed(Exception):$/;"	class	line:190
ConstrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ConstrainedType(path: AstPath, typeArgs: List[TypeArg]) extends ParseTypeRef {$/;"	classes	line:442
Create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Create = "Create"$/;"	constants	line:11
DEBUGLOGS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^DEBUGLOGS=..\/debug-logs$/;"	macro	line:14
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    class Data {$/;"	classes	line:11
Data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    class Data {$/;"	classes	line:6
DeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class DeclareVarLvalue($/;"	classes	line:369
DiffStaticClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class DiffStaticClasses(className1: Name.Class, className2: Name.Class) extends Error {$/;"	classes	line:148
E	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^public interface Array<E> {$/;"	interface	line:3
Entry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class Entry {$/;"	classes	line:4
Env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^case class Env($/;"	classes	line:23
Equater	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Equater extends TransitiveCloser[Path.Ref] {$/;"	classes	line:258
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^abstract class Error {$/;"	classes	line:10
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    case class Error(pos: Position, msgKey: String, msgArgs: List[String]) {$/;"	classes	line:8
ExpClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpClassName(path: String) extends Error {$/;"	classes	line:190
ExpPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpPath(name: Name.Qual) extends Error {$/;"	classes	line:184
ExpStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ExpStatic(memberVar: Name.Member) extends Error {$/;"	classes	line:196
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = LowerTlExpr$/;"	types	line:903
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ParseTlExpr$/;"	types	line:829
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ResolveTlExpr$/;"	types	line:867
ExtendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    case class ExtendedInterval(inter: Interval) {$/;"	classes	line:111
ExtendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedIterable[E](iterable: Iterable[E]) {$/;"	classes	line:42
ExtendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedList[E](list: List[E]) {$/;"	classes	line:65
ExtendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    case class ExtendedMap(m: Map) {$/;"	classes	line:37
ExtendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class ExtendedMethodVisitor(mvis: asm.MethodVisitor) {$/;"	classes	line:109
ExtendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedOption[E](option: Option[E]) {$/;"	classes	line:79
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:836
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = Unit$/;"	types	line:874
FSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type FSym = VarSymbol.Field$/;"	types	line:910
FailedException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            case class FailedException() extends Exception$/;"	classes	line:474
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Field(owner: Owner, name: MN, sym: FSym, ty: Ty) extends LowerTlExpr {$/;"	classes	line:651
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Field(base: Path.Ref, f: Name.Member) extends Ref {$/;"	classes	line:10
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    type Field = VarSymbol[Name.Member]$/;"	types	line:5
FieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldDecl($/;"	classes	line:247
FieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldLvalue($/;"	classes	line:396
FileReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class FileReader(interFile: File, seq: PagedSeq[Char], off: Int) extends PagedSeqReader(seq, off) {$/;"	classes	line:400
Foo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * Given a class Foo, the following class files are generated:$/;"	classes	line:22
FragmentFile	/Users/niko/git/intervals-java/Harmonic/test.py	/^class FragmentFile(object):$/;"	class	line:210
GENERATEDJAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDJAVA=$(subst Gen.py,Gen.java,${GENERATEDPY})$/;"	macro	line:9
GENERATEDPY	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDPY=$(wildcard src\/harmonic\/compiler\/*Gen.py)$/;"	macro	line:8
GatherOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^case class GatherOverrides(state: State) {$/;"	classes	line:17
Ghost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Ghost(name: Name.Member) extends MemberEntry {$/;"	classes	line:26
HPROFOPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
HPROFOPTS=-agentlib	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	targets	line:12
Header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Header = "Header"$/;"	constants	line:8
HlLexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class HlLexical extends StdLexical with HlTokens {$/;"	classes	line:28
HlTokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    trait HlTokens extends StdTokens {$/;"	traits	line:22
IOError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class IOError(err: java.io.IOError) extends Error {$/;"	classes	line:103
ImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpThis(ty: Ty)$/;"	classes	line:731
ImpVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpVoid(ty: Ty)$/;"	classes	line:725
Import	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    sealed abstract class Import$/;"	classes	line:48
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportAll($/;"	classes	line:152
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportAll(qualName: Name.Qual)$/;"	classes	line:49
ImportDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ImportDecl extends Node$/;"	classes	line:143
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportOne($/;"	classes	line:145
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    case class ImportOne(qualName: Name.Qual, as: String)$/;"	classes	line:50
InEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnv(env: Env) {$/;"	classes	line:215
InEnvStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InEnvStmt(env: Env, stmts: mutable.ListBuffer[out.Stmt]) extends InEnv(env) {$/;"	classes	line:445
InScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    case class InScope($/;"	classes	line:232
InferredTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InferredTypeRef() extends OptionalParseTypeRef with OptionalResolveTypeRef {$/;"	classes	line:430
InitMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InitMethod = Method(List("<init>"))$/;"	constants	line:163
Instance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^    class Instance($/;"	classes	line:13
InstanceField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class InstanceField(name: Name.Member) extends MemberEntry {$/;"	classes	line:18
IntConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class IntConstant($/;"	classes	line:235
Interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Interval.java	/^public interface Interval {$/;"	interface	line:3
IntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class IntervalDecl($/;"	classes	line:189
Intrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^case class Intrinsic(state: State) {$/;"	classes	line:3
IntrinsicControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^public class IntrinsicControlFlow {$/;"	class	line:5
IntrinsicMath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    case class IntrinsicMath($/;"	classes	line:6
IntrinsicMathGen	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^public class IntrinsicMathGen {$/;"	class	line:4
IntrinsicStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^    case class IntrinsicStatic($/;"	classes	line:12
InvalidMetaData	/Users/niko/git/intervals-java/Harmonic/test.py	/^class InvalidMetaData(Exception):$/;"	class	line:187
JARFILES	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARFILES=$(wildcard lib\/*.jar)$/;"	macro	line:6
JARPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARPATH=$(subst .jar ,.jar:,${JARFILES})$/;"	macro	line:7
JAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVA=java$/;"	macro	line:1
JAVAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVAC=javac$/;"	macro	line:2
JPROFILEROPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	macro	line:13
JPROFILEROPTS=-javaagent	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	targets	line:13
LIBDIR	/Users/niko/git/intervals-java/Harmonic/Makefile	/^LIBDIR=$(CURDIR)\/lib$/;"	macro	line:11
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:835
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = Unit$/;"	types	line:873
LVSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type LVSym = VarSymbol.Local$/;"	types	line:909
Labeled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Labeled(name: LocalName, body: Body)$/;"	classes	line:736
Literal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Literal(obj: Object, ty: Ty) extends LowerTlExpr {$/;"	classes	line:613
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    type Local = VarSymbol[Name.LocalVar]$/;"	types	line:6
LocalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class LocalName(name: Name.LocalVar) extends VarName {$/;"	classes	line:810
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed case class LocalVar($/;"	classes	line:123
LocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class LocalVar(name: Name.LocalVar) extends Entry {$/;"	classes	line:29
Lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Lower ="Lower"$/;"	constants	line:10
Lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^case class Lower(state: State) {$/;"	classes	line:15
LowerOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerOwner extends LowerRcvr with ResolveOwner$/;"	traits	line:550
LowerRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerRcvr extends ResolveRcvr$/;"	traits	line:549
LowerStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerStmt extends ResolveStmt$/;"	traits	line:539
LowerTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerTlExpr extends ResolveTlExpr with LowerStmt$/;"	traits	line:551
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Lvalue extends AstPattern$/;"	classes	line:359
LvalueLower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class LvalueLower($/;"	classes	line:385
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = (MethodSymbol, MethodSignature[Pattern.Anon])$/;"	types	line:912
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:838
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:876
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = MemberName $/;"	types	line:895
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = RelName $/;"	types	line:821
MN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MN = UnloweredMemberName $/;"	types	line:859
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:860
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = MemberName$/;"	types	line:896
MNC	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MNC = RelDot$/;"	types	line:822
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:861
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = MemberName$/;"	types	line:897
MND	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MND = RelBase$/;"	types	line:823
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = MethodSymbol$/;"	types	line:911
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:837
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:875
Map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    type Map = scala.collection.immutable.Map[String, Entry]$/;"	types	line:33
Member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed case class Member($/;"	classes	line:106
MemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class MemberDecl extends Node {$/;"	classes	line:136
MemberEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed abstract class MemberEntry extends Entry {$/;"	classes	line:9
MemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class MemberName(name: Name.Member) extends VarName with UnloweredMemberName {$/;"	classes	line:802
Members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Members = "Members"$/;"	constants	line:12
Merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    val Merge = "Merge"$/;"	constants	line:13
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Method($/;"	classes	line:85
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val Method = Path.Base(Name.MethodLocal)$/;"	constants	line:15
MethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodCall(rcvr: Rcvr, name: Name.Method, args: List[NE], data: MCallData)$/;"	classes	line:669
MethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodDecl($/;"	classes	line:207
MethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    class MethodGroups(env: Env) {$/;"	classes	line:40
MethodKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodKind.scala	/^sealed abstract class MethodKind/;"	classes	line:27
MethodLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MethodLocal = Name.LocalVar("method")$/;"	constants	line:143
MethodResolutionOrder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^case class MethodResolutionOrder(state: State) {$/;"	classes	line:16
MethodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^case class MethodSignature[+P <: Pattern.Anon]($/;"	classes	line:3
Mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	classes	line:7
MultipleOverridesInSameClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MultipleOverridesInSameClass($/;"	classes	line:74
MustResolveAmbiguousInheritance	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class MustResolveAmbiguousInheritance($/;"	classes	line:57
Mutable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^public @interface Mutable {$/;"	interface	line:3
MutableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MutableClass = Class(classOf[harmonic.lang.Mutable])$/;"	constants	line:153
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = AtomicExpr$/;"	types	line:901
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ParseTlExpr$/;"	types	line:827
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ResolveTlExpr$/;"	types	line:865
Name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Name extends Node$/;"	classes	line:781
NewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewAnon(tref: TR, arg: NE, members: List[MemberDecl], csym: CSym, msym: MSym, ty: TyClass) $/;"	classes	line:705
NewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewCtor(tref: TR, arg: NE, msym: MSym, ty: TyClass) extends LowerTlExpr {$/;"	classes	line:694
NoSuchMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMember(ty: Type.Ref, uName: Name.UnloweredMember) extends Error {$/;"	classes	line:157
NoSuchMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NoSuchMethod(ty: Type.Ref, name: Name.Method) extends Error {$/;"	classes	line:166
Node	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Node extends Positional with Product {$/;"	classes	line:753
NotExecutable	/Users/niko/git/intervals-java/Harmonic/test.py	/^class NotExecutable(Exception):$/;"	class	line:193
NotField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotField(name: Name.Member) extends Error {$/;"	classes	line:219
NotInStaticScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotInStaticScope(memberVar: Name.Member) extends Error {$/;"	classes	line:202
NotMarkedOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotMarkedOverride($/;"	classes	line:89
NotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotOverride() extends Error {$/;"	classes	line:15
NotTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class NotTypeVar(entry: SymTab.MemberEntry) extends Error {$/;"	classes	line:228
Null	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Null(ty: Ty)$/;"	classes	line:719
NullType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NullType() extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:460
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalParseTypeRef$/;"	types	line:825
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = OptionalResolveTypeRef$/;"	types	line:863
OTR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OTR = TypeRef$/;"	types	line:899
Object	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Object = Type.Class(Name.ObjectClass, List())$/;"	constants	line:36
ObjectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ObjectClass = Class(classOf[java.lang.Object])$/;"	constants	line:147
Operator	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        case class Operator(chars: String) extends Token {$/;"	classes	line:23
OptionalParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class OptionalParseTypeRef extends Node$/;"	classes	line:424
OptionalResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait OptionalResolveTypeRef extends Node$/;"	traits	line:427
OverrideClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val OverrideClass = Class(classOf[java.lang.Override])$/;"	constants	line:154
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = LowerOwner$/;"	types	line:906
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ParseOwner$/;"	types	line:832
Owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Owner = ResolveOwner$/;"	types	line:870
Package	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Package extends Qual {$/;"	classes	line:13
PackageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class PackageName(name: Name.Package) extends Name {$/;"	classes	line:785
Param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Param extends AstPattern$/;"	classes	line:335
ParameterAdapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ParameterAdapter($/;"	classes	line:1047
ParseError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ParseError($/;"	classes	line:23
ParseOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseOwner extends ParseRcvr$/;"	traits	line:542
ParsePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParsePath extends ResolvePath$/;"	traits	line:499
ParseRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseRcvr extends Node$/;"	traits	line:541
ParseStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseStmt extends TypedNode {$/;"	traits	line:530
ParseTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTlExpr extends ParseRcvr with ParseOwner with ParseStmt$/;"	traits	line:543
ParseTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseTypeRef extends OptionalParseTypeRef$/;"	traits	line:436
PathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class PathArg(name: Name.Member, rel: PcRel, path: Path.Ref) extends Arg {$/;"	classes	line:25
PathBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathBase(name: VN, sym: VSym) extends ParsePath {$/;"	classes	line:506
PathDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathDot(owner: AstPath, name: MN, sym: FSym, ty: Ty) extends ParsePath {$/;"	classes	line:511
PathErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathErr(name: String) extends ResolvePath {$/;"	classes	line:501
PathExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathExpr(path: AstPath) extends ParseTlExpr {$/;"	classes	line:633
PathRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathRequirement($/;"	classes	line:235
PathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathType(path: AstPath) extends ParseTypeRef {$/;"	classes	line:438
PathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathTypeArg(name: MN, rel: PcRel, path: AstPath) extends TypeArg {$/;"	classes	line:486
PcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcRel$/;"	classes	line:3
PcTransRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcTransRel extends PcRel$/;"	classes	line:17
PcWcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcWcRel extends PcRel$/;"	classes	line:23
PrecompiledClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^abstract class PrecompiledClass($/;"	classes	line:3
PrettyPrinter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^abstract class PrettyPrinter {$/;"	classes	line:3
Qual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Qual {$/;"	classes	line:7
QualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class QualName extends Name$/;"	classes	line:783
QualStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class QualStatic(memberVar: Name.Member) extends Error {$/;"	classes	line:175
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = LowerRcvr$/;"	types	line:905
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ParseRcvr$/;"	types	line:831
Rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Rcvr = ResolveRcvr$/;"	types	line:869
ReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ReassignVarLvalue($/;"	classes	line:385
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Ref$/;"	classes	line:6
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Ref extends Anon$/;"	traits	line:13
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Ref$/;"	classes	line:8
Reflect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^case class Reflect(state: State) {$/;"	classes	line:9
RelBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelBase(nm: String) extends RelName {$/;"	classes	line:105
RelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDecl($/;"	classes	line:272
RelDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDot(context: RelName, component: String) extends RelName {$/;"	classes	line:113
RelName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class RelName extends QualName {$/;"	classes	line:96
Requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^public @interface Requirement {$/;"	interface	line:3
Requires	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^public @interface Requires {$/;"	interface	line:3
Resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^abstract class Resolve(state: State, compUnit: in.CompUnit) {$/;"	classes	line:20
ResolveBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveBlockParam(scope0: InScope, inParam: in.Param)$/;"	classes	line:129
ResolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^case class ResolveBody(state: State, compUnit: in.CompUnit) $/;"	classes	line:24
ResolveClassParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveClassParams(className: Name.Class, scope0: InScope, inParam: in.Param)$/;"	classes	line:100
ResolveHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^case class ResolveHeader(state: State, compUnit: in.CompUnit) $/;"	classes	line:17
ResolveLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveLvalue(var scope: InScope, inLvalue: in.Lvalue) {$/;"	classes	line:134
ResolveMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    class ResolveMethodParams(scope0: InScope, inParams: List[in.Param])$/;"	classes	line:116
ResolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveOwner extends ParseOwner with ResolveRcvr$/;"	traits	line:546
ResolveParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    abstract class ResolveParams(var scope: InScope, inParams: List[in.Param]) {$/;"	classes	line:72
ResolvePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolvePath extends TypedNode$/;"	traits	line:497
ResolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveRcvr extends ParseRcvr$/;"	traits	line:545
ResolveStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveStmt extends ParseStmt$/;"	traits	line:537
ResolveTlExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTlExpr extends ParseTlExpr with ResolveOwner with ResolveStmt$/;"	traits	line:547
ResolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ResolveTypeRef extends OptionalResolveTypeRef$/;"	traits	line:448
Results	/Users/niko/git/intervals-java/Harmonic/test.py	/^class Results(object):$/;"	class	line:396
SBT	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SBT=${JAVA} -Dsbt.log.noformat=true -Xmx256M -jar sbt-launch-0.7.0.jar$/;"	macro	line:3
SCALA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALA=scala$/;"	macro	line:5
SCALAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALAC=scalac -make:changed$/;"	macro	line:4
STDLIB	/Users/niko/git/intervals-java/Harmonic/Makefile	/^STDLIB=java_standard_library.jar$/;"	macro	line:15
Set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    case class Set(mods: Int) {$/;"	classes	line:15
ShadowedClassParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedClassParam(name: String) extends Error {$/;"	classes	line:112
ShadowedLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedLocalVar(name: String) extends Error {$/;"	classes	line:130
ShadowedMethodParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    case class ShadowedMethodParam(name: String) extends Error {$/;"	classes	line:121
State	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^case class State($/;"	classes	line:77
StatementVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class StatementVisitor(accessMap: AccessMap, nextMro: ValuePath, mvis: asm.MethodVisitor) {$/;"	classes	line:498
Static	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Static(name: Name.Class) extends LowerOwner {$/;"	classes	line:665
StaticField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class StaticField(name: Name.Member) extends MemberEntry$/;"	classes	line:22
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = LowerStmt$/;"	types	line:902
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ParseStmt$/;"	types	line:828
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ResolveStmt$/;"	types	line:866
Subpackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Subpackage($/;"	classes	line:23
SubstdTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdTuple(patterns: List[Pattern.Anon]) extends AnonTuple$/;"	classes	line:36
SubstdVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdVar(ty: Type.Ref) extends AnonVar$/;"	classes	line:34
Super	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Super(ty: Ty) extends LowerRcvr {$/;"	classes	line:661
Symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^abstract class Symbol {$/;"	classes	line:8
SymbolSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class SymbolSummary($/;"	classes	line:398
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ParseTypeRef$/;"	types	line:826
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = ResolveTypeRef$/;"	types	line:864
TR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TR = TypeRef$/;"	types	line:900
TcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^sealed abstract class TcRel$/;"	classes	line:3
This	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val This = Path.Base(Name.ThisLocal)    $/;"	constants	line:14
ThisLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ThisLocal = Name.LocalVar("this")$/;"	constants	line:141
Tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    type Tokens = StdTokens$/;"	types	line:52
TransitiveCloser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    abstract class TransitiveCloser[T] {$/;"	classes	line:42
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Tuple(exprs: List[NE]) extends AtomicExpr {$/;"	classes	line:558
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Tuple(patterns: List[Pattern.Ref]) extends AnonTuple with Ref$/;"	classes	line:43
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Tuple(typeRefs: List[Type.Ref]) extends Ref {$/;"	classes	line:17
TupleAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TupleAstPattern extends AstPattern {$/;"	traits	line:314
TupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleLvalue($/;"	classes	line:361
TupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleParam($/;"	classes	line:337
TupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleType(types: List[TR]) extends ParseTypeRef with ResolveTypeRef {$/;"	classes	line:464
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Type.Ref$/;"	types	line:913
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:839
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:877
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Type.Class$/;"	types	line:914
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:840
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:878
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Type.Tuple$/;"	types	line:915
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:841
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:879
TyVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val TyVarName = tyVar.typeVar$/;"	constants	line:289
Type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    sealed case class Type(name: Name.Member) extends MemberEntry {$/;"	classes	line:23
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TypeArg extends Node {$/;"	classes	line:474
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class TypeArg(name: Name.Member, rel: TcRel, ty: Type.Ref) extends Arg {$/;"	classes	line:28
TypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeRef(ty: Type.Ref) extends Node$/;"	classes	line:416
TypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeTypeArg(name: MN, rel: TcRel, typeRef: TR) extends TypeArg {$/;"	classes	line:479
TypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeVar(path: AstPath, typeVar: MN) extends ResolveTypeRef {$/;"	classes	line:450
Typed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Typed {$/;"	classes	line:17
TypedBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedBase(sym: VarSymbol.Any) extends Typed {$/;"	classes	line:22
TypedField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedField(base: Path.Typed, sym: VarSymbol.Field) extends Typed {$/;"	classes	line:26
TypedNode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TypedNode extends Node {$/;"	traits	line:86
TypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypedPath(path: Path.Typed) extends TypedNode {$/;"	classes	line:515
UnloweredMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract trait UnloweredMember {$/;"	traits	line:132
UnloweredMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait UnloweredMemberName extends Name {$/;"	traits	line:797
UsageError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^        case class UsageError(val msg: String) extends RuntimeException$/;"	classes	line:18
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = RelName$/;"	types	line:824
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:862
VN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VN = VarName$/;"	types	line:898
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:834
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:872
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = VarSymbol.Any$/;"	types	line:908
ValueMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ValueMethod = Method(List("value"))$/;"	constants	line:161
ValuePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class ValuePath {$/;"	classes	line:227
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Var(name: LocalName, sym: LVSym) extends AtomicExpr with LowerOwner {$/;"	classes	line:641
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    sealed abstract class Var {$/;"	classes	line:94
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Var($/;"	classes	line:38
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Var(path: Path.Ref, typeVar: Name.Member) extends Ref {$/;"	classes	line:9
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^public @interface Var {$/;"	interface	line:3
VarAstPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarAstPattern extends AstPattern {$/;"	traits	line:328
VarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarName extends Name {$/;"	traits	line:793
VarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarParam($/;"	classes	line:343
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <Void, A> Void forEach($/;"	field	line:50
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Void = Type.Class(Name.VoidClass, List())$/;"	constants	line:37
VoidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val VoidClass = Class(classOf[java.lang.Void])$/;"	constants	line:145
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, filenm):$/;"	member	line:398
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, fname):$/;"	member	line:211
_execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _execute():$/;"	function	line:482
_run_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _run_test(filenm, experrors):$/;"	function	line:578
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val accessMap = new AccessMap(csym.name)$/;"	constants	line:1196
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(className)$/;"	constants	line:1116
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:1282
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(csym.name)$/;"	constants	line:1337
accessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessPath = accessMap.syms(sym)$/;"	constants	line:514
accessSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def accessSyms = readSyms ++ writeSyms$/;"	methods	line:414
adaptTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def adaptTo(tarPatterns: List[Pattern.Ref], stmtVisitor: StatementVisitor) {$/;"	methods	line:1069
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:1284
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, group.msig.parameterPatterns)$/;"	constants	line:1340
adapter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val adapter = new ParameterAdapter(accessMap, overriddenSig.parameterPatterns)$/;"	constants	line:1125
add	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def add() = {$/;"	methods	line:250
addBoxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addBoxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:378
addControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addControlFlow() = {$/;"	methods	line:70
addCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def addCsym[C <: ClassSymbol](cls: C): C = synchronized {$/;"	methods	line:26
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(entry: SymTab.Entry) = {$/;"	methods	line:236
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:104
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String) = {$/;"	methods	line:118
addEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def addEntry(pos: Position, text: String): InScope$/;"	methods	line:73
addErrorReport	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def addErrorReport() = synchronized {$/;"	methods	line:12
addFresh	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addFresh($/;"	methods	line:442
addInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def addInterval(name: String)(inter: Interval): Interval = synchronized {$/;"	methods	line:22
addIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def addIntrinsic(msym: MethodSymbol) {$/;"	methods	line:74
addMathTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addMathTo() = {$/;"	methods	line:32
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def addMsym(msym: MethodSymbol) = {$/;"	methods	line:57
addMsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def addMsym(msym: MethodSymbol) = msymsBuffer += msym$/;"	methods	line:26
addOverrideSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addOverrideSubst($/;"	methods	line:466
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addSym(sym: VarSymbol.Any, accessPath: AccessPath) {$/;"	methods	line:352
addSymbolsDeclaredIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addSymbolsDeclaredIn($/;"	methods	line:1165
addUnboxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addUnboxedSym(sym: VarSymbol.Any) = {$/;"	methods	line:356
add_frag_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_frag_exp_error(self, rel, experror):$/;"	function	line:298
add_header_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_header_exp_error(self, rel, experror):$/;"	function	line:280
add_remove_files	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def add_remove_files(self, fnames):$/;"	member	line:407
add_to_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_fragment(self, line):$/;"	function	line:295
add_to_header	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_header(self, line):$/;"	function	line:277
add_to_trailer	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_trailer(self, line):$/;"	function	line:284
add_trailer_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_trailer_exp_error(self, res, experror):$/;"	function	line:287
after	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val after = superLists.drop(idx + 1)$/;"	constants	line:48
all	/Users/niko/git/intervals-java/Harmonic/Makefile	/^all: test$/;"	targets	line:17
allEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val allEntries = mro.flatMap { mrosym => $/;"	constants	line:103
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val allGroups = methodGroups.allGroups$/;"	constants	line:34
allGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def allGroups = groups.valuesIterator.toList.flatten$/;"	methods	line:66
allImports	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    val allImports = ($/;"	constants	line:76
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def allMethodSymbols = {$/;"	methods	line:43
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def allMethodSymbols = Nil$/;"	methods	line:11
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val allMethodSymbols = {$/;"	constants	line:20
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var allMethodSymbols: List[MethodSymbol] = Nil$/;"	local variables	line:76
allMethodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def allMethodSymbols: List[MethodSymbol]$/;"	methods	line:89
annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotation = positioned($/;"	constants	line:123
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:137
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotations = rep(annotation) $/;"	constants	line:127
app	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                val app = ctor.newInstance().asInstanceOf[Application]$/;"	constants	line:62
appArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^        val appArgs = new mutable.ArrayBuffer[String]()$/;"	constants	line:21
appClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                val appClassName = optAppClassName.getOrElse {$/;"	constants	line:37
appendLoweredStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendLoweredStmt(stmt: in.Stmt): Env = {$/;"	methods	line:446
applicableMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val applicableMsyms = msyms.filter(potentiallyApplicable)$/;"	constants	line:669
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def apply(state: State) = new Create(state)$/;"	methods	line:7
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env) = new InEnv(env)$/;"	methods	line:212
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env, stmts: mutable.ListBuffer[out.Stmt]) = $/;"	methods	line:441
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def apply(mods: List[Mod]): Set = Set(mods.foldLeft(0)(_ | _.bit))$/;"	methods	line:33
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(cls: java.lang.Class[_]): Class = cls match {$/;"	methods	line:60
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(pkg: java.lang.Package): Package = {$/;"	methods	line:52
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(str: String): Package = {$/;"	methods	line:47
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def apply(global: Global, interFile: File) = {$/;"	methods	line:415
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def apply(pairs: (Path.Ref, Path.Ref)*) = new Subst(Map(pairs: _*))$/;"	methods	line:46
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def apply(cls: java.lang.Class[_]): Type.Class = Class(Name.Class(cls), List())$/;"	methods	line:33
are	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        \/\/ take it, if it is a good head. Then repeat the operation until all the class are$/;"	classes	line:26
arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val arg: PackratParser[out.Expr] = tuple | blk | asyncBlk$/;"	constants	line:328
argAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val argAsmTys = argumentClasses.map(asm.Type.getType)$/;"	constants	line:758
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val argTys = outArgs.map(_.ty)$/;"	constants	line:657
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def args(cps: List[(String, out.Expr)]) = cps.map(_._2)$/;"	methods	line:335
as	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** A position for reporting errors related to the class as a whole *\/$/;"	classes	line:29
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName = None$/;"	methods	line:14
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName = Some(this)$/;"	methods	line:42
asClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asClassName: Option[Class]$/;"	methods	line:10
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asFieldNamed(name: Name.Var): Option[FieldDecl] = None$/;"	methods	line:140
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asFieldNamed(fldName: Name.Var) = {$/;"	methods	line:253
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember) = {$/;"	methods	line:11
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def asMemberEntryMatching(uName: Name.UnloweredMember): Option[MemberEntry]$/;"	methods	line:6
asMemberEntryMatching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def asMemberEntryMatching(uName: Name.UnloweredMember) = None        $/;"	methods	line:30
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asMethodNamed(name: Name.Method): Option[MethodDecl] = None$/;"	methods	line:139
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asMethodNamed(mthdName: Name.Method) = {$/;"	methods	line:217
asmBooleanType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmBooleanType = asm.Type.getObjectType("java\/lang\/Boolean")$/;"	constants	line:49
asmClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmClassType(name: Name.Class) = asm.Type.getObjectType(name.internalName)$/;"	methods	line:86
asmObjectArrayType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectArrayType = asm.Type.getType("[Ljava\/lang\/Object;")$/;"	constants	line:46
asmObjectType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectType = asm.Type.getObjectType("java\/lang\/Object")$/;"	constants	line:47
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType = asm.Type.INT_TYPE$/;"	methods	line:238
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType: asm.Type$/;"	methods	line:229
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmType(ty: Type.Ref): asm.Type = ty match {$/;"	methods	line:62
asmVoidType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmVoidType = asm.Type.getObjectType("java\/lang\/Void")$/;"	constants	line:48
assemble	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def assemble(self, fragnum, ):$/;"	member	line:229
assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val assign = out.Assign($/;"	constants	line:504
asyncBlk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val asyncBlk = positioned($/;"	constants	line:320
baseName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        val baseName = name.relPath$/;"	constants	line:52
before	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val before = superLists.take(idx)$/;"	constants	line:47
being	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    \/\/ For a class being loaded from source, this is the structure:$/;"	classes	line:20
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val best = identifyBestMethod($/;"	constants	line:757
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val best = identifyBestMethod($/;"	constants	line:739
bestMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val bestMsyms = applicableMsyms.filter(isBestChoice)$/;"	constants	line:691
blk	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blk = positioned($/;"	constants	line:316
blkBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkBody: PackratParser[(out.OptionalParseTypeRef, out.Param, List[out.Stmt])] = ($/;"	constants	line:310
blkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val blkParam: PackratParser[out.Param] = tupleBlkParam | varBlkParam$/;"	constants	line:234
blockTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockTy = Type.Class(name, List())$/;"	constants	line:938
bnds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val bnds = upperBoundType(ty)$/;"	constants	line:335
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Environment immediately within the class body *\/$/;"	classes	line:51
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val body = positioned($/;"	constants	line:302
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^  * rest of the body.  Before we can resolve a class body, we must first $/;"	classes	line:14
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    val body = csym.addInterval(ClassSymbol.Body) {$/;"	constants	line:44
booleanClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanClass = classOf[java.lang.Boolean]$/;"	constants	line:72
booleanTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanTy = Type.Class(booleanClass)$/;"	constants	line:84
boundsFromClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            def boundsFromClassType(tyClass: Type.Class) = {$/;"	methods	line:291
boxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val boxedArray = new BoxedArray(accessMap)$/;"	constants	line:1170
boxedArrayPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] val boxedArrayPath = accessMap.pathToFreshSlot(asmObjectArrayType)$/;"	constants	line:375
boxedSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def boxedSyms(sym: VarSymbol.Any) = writeSyms(sym) && sharedSyms(sym)$/;"	methods	line:415
but	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Symbols for all methods defined on this class but not superclasses. *\/$/;"	classes	line:88
byField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byField = P1 match {$/;"	constants	line:260
byRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byRel = pathRels.flatMap {$/;"	constants	line:266
cache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val cache = new mutable.HashMap[AccessPath, AccessPath]()$/;"	constants	line:873
callPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val callPart = ident~arg                           ^^ { case i~a => (i, a) }$/;"	constants	line:330
callWithDetails	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    def callWithDetails(op: Int, ownerAsmType: asm.Type, desc: String) = {$/;"	methods	line:729
callWithOpcode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    def callWithOpcode(op: Int) = {$/;"	methods	line:735
casted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val casted = $/;"	constants	line:1074
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:15
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:24
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val cdecl = csym.resolvedSource$/;"	constants	line:31
check	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def check(cvis: asm.ClassVisitor) = {$/;"	methods	line:194
checkBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var checkBytecode = false$/;"	local variables	line:21
checker	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val checker = check(writer)$/;"	constants	line:200
classBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val classBounds = List[Type.Ref]() \/\/ FIXME$/;"	constants	line:293
classDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val classDecl = positioned($/;"	constants	line:136
classEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var classEnv: Env = null$/;"	local variables	line:52
classExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val classExt = ".class"$/;"	constants	line:12
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def classFiles(name: Name.Class) = relativeFiles(classPaths, classExt)(name)$/;"	methods	line:61
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val classFiles = config.classFiles(className)$/;"	constants	line:142
classMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val classMap = $/;"	constants	line:15
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def className = if(async) Name.AsyncBlockClass else Name.BlockClass$/;"	methods	line:577
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val className = Name.Class(cls)$/;"	constants	line:78
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val className = Name.Class(cls)$/;"	constants	line:42
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(clsName, nm)$/;"	constants	line:32
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = Name.Class(pkgName, nm)$/;"	constants	line:23
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val className = resolveToClass(relName.pos, relNameToRelList(relName)).getOrElse(Name.ObjectClass)$/;"	constants	line:121
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                        val className = Name.Class(qualName, name)$/;"	constants	line:454
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:476
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val className = resolvePathToClassName(path)$/;"	constants	line:482
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val className = cdecl.name.toClass(compUnit.pkg.name)$/;"	constants	line:243
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val className = resolveName(base).name$/;"	constants	line:219
classNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val classNames = msym.overrides.map(_.clsName)$/;"	constants	line:101
classParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var classParam: Ast.Lower.Param = null$/;"	local variables	line:49
classParamAndEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def classParamAndEnv: (out.Param, Env) = {$/;"	methods	line:20
classPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var classPaths = List(new File("."))$/;"	local variables	line:14
classType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val classType = asm.Type.getType(objClass)$/;"	constants	line:682
classlessName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                            val classlessName = Name.ClasslessMember(text)$/;"	constants	line:391
clean	/Users/niko/git/intervals-java/Harmonic/Makefile	/^clean:$/;"	targets	line:20
close_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def close_all(self):$/;"	member	line:468
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                val cls = {$/;"	constants	line:41
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val cls = ty.getGenericDeclaration.asInstanceOf[java.lang.Class[_]]$/;"	constants	line:72
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val cls = ty.getRawType.asInstanceOf[Class[_]]$/;"	constants	line:77
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    val cls: java.lang.Class[_]$/;"	constants	line:5
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val cls = pt.getRawType.asInstanceOf[Class[_]]$/;"	constants	line:41
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val cls = tv.getGenericDeclaration.asInstanceOf[java.lang.Class[_]]$/;"	constants	line:36
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^        val cls = sym.cls$/;"	constants	line:66
clsFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val clsFile = fileWithExtension(".class")$/;"	constants	line:207
clsName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val clsName: Name.Class,         \/** Class in which the method is defined. *\/$/;"	constants	line:29
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:14
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:20
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:27
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:34
comma	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma[A](p: PackratParser[A]) = repsep(p, ",")<~opt(",")$/;"	methods	line:65
comma1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma1[A](p: PackratParser[A]) = rep1sep(p, ",")<~opt(",")$/;"	methods	line:66
command	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def command(self, cmd, retcode, stdout, stderr):$/;"	member	line:425
comp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^            val comp = str.split('.')$/;"	constants	line:48
compUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val compUnit = positioned($/;"	constants	line:99
compare_errors	/Users/niko/git/intervals-java/Harmonic/test.py	/^def compare_errors(expected, stdout, stderr):$/;"	function	line:522
compile	/Users/niko/git/intervals-java/Harmonic/Makefile	/^compile: ${GENERATEDJAVA}$/;"	targets	line:28
compile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def compile() = {$/;"	methods	line:52
complete	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def complete {$/;"	methods	line:110
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component = nm$/;"	methods	line:107
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component: String$/;"	methods	line:99
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def compute(item: T) = expand(Queue(item), Set())$/;"	methods	line:45
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^                override def compute() = func(this)$/;"	methods	line:121
computeOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def computeOverrides($/;"	methods	line:90
computeVersions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def computeVersions($/;"	methods	line:1300
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val config: Config,$/;"	constants	line:9
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val config = new Config()$/;"	constants	line:9
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def config = global.config$/;"	methods	line:91
constrainedType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val constrainedType = positioned($/;"	constants	line:272
constructExprFromPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def constructExprFromPattern(pattern: Pattern.Ref): in.AtomicExpr = pattern match {$/;"	methods	line:1057
constructSymbolTable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def constructSymbolTable(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:67
constructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var constructor: MethodSymbol = null$/;"	local variables	line:55
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def constructors = {$/;"	methods	line:23
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def constructors = Nil$/;"	methods	line:7
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val constructors = {$/;"	constants	line:12
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def constructors = List(constructor)$/;"	methods	line:60
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def constructors: List[MethodSymbol]$/;"	methods	line:76
contains	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def contains(mod: Mod) = (mods & mod.bit) != 0$/;"	methods	line:17
contract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def contract(lvalue: in.Lvalue) {$/;"	methods	line:590
controlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def controlFlow($/;"	methods	line:89
cpu	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
create	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    val create = csym.addInterval(ClassSymbol.Create) {$/;"	constants	line:57
createArrayIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def createArrayIfNeeded(mvis: asm.MethodVisitor) = {$/;"	methods	line:383
createMemberIntervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^    def createMemberIntervals() {$/;"	methods	line:12
createSymbolForConstructor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def createSymbolForConstructor() = {$/;"	methods	line:30
createSymbolOnce	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def createSymbolOnce(func: => (in.FieldDecl, out.TypeRef)) = {$/;"	methods	line:128
createSymbolOnce	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        def createSymbolOnce(func: => (in.MethodDecl, List[out.Param], out.TypeRef)) = {$/;"	methods	line:48
createSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def createSymbols($/;"	methods	line:6
create_error_list	/Users/niko/git/intervals-java/Harmonic/test.py	/^def create_error_list(stdout, stderr):$/;"	function	line:496
cross	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def cross[J](js: Iterable[J]) = $/;"	methods	line:57
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val csym = state.curCsym$/;"	constants	line:13
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = state.csym(className)$/;"	constants	line:152
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = state.csym(entry.name.className)$/;"	constants	line:112
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = state.csym(className)$/;"	constants	line:204
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val csym = state.csym(name.className)$/;"	constants	line:239
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def csym(name: Name.Class) = synchronized {$/;"	methods	line:22
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(className)$/;"	constants	line:301
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(className)$/;"	constants	line:583
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(className)$/;"	constants	line:726
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(memberName.className)$/;"	constants	line:486
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(memberVar.className)$/;"	constants	line:235
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(name)$/;"	constants	line:753
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.csym(name.className)$/;"	constants	line:426
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    val csym = state.curCsym$/;"	constants	line:18
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    val csym = addCsym(new ClassFromSource(className, this))$/;"	constants	line:18
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def csym(name: Name.Class) = global.csym(name)$/;"	methods	line:96
ctor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                val ctor = {$/;"	constants	line:53
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def ctorSymbol(mthd: reflect.Constructor[_]) = {$/;"	methods	line:101
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def ctorSymbol(clsName: Name.Class)(mthd: reflect.Constructor[_]) = {$/;"	methods	line:85
ctors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def ctors(sym: ClassFromReflection) = {$/;"	methods	line:101
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] val data: GatherOverrides.Data = state.data(classOf[GatherOverrides.Data])$/;"	constants	line:19
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def data[C](cls: java.lang.Class[C]): C = synchronized {$/;"	methods	line:39
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    private[this] val data = state.data(classOf[Lower.Data])$/;"	constants	line:16
data	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] val data: MethodResolutionOrder.Data = state.data(classOf[MethodResolutionOrder.Data])$/;"	constants	line:17
debug	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debug(fmt: String, args: Any*) = $/;"	methods	line:90
debugIndent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def debugIndent[R](fmt: String, args: Any*)(func: => R) = {$/;"	methods	line:93
declLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declLvalue = positioned($/;"	constants	line:245
declOp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declOp = ($/;"	constants	line:166
declPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declPart = ident~tupleMthdParam ^^ { case i~p => (i, p) }$/;"	constants	line:160
declaration	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    \/\/ - merge: merges all the lowered members into a lowered class declaration$/;"	classes	line:33
define	/Users/niko/git/intervals-java/Harmonic/test.py	/^def define(varnm, defval):$/;"	function	line:158
defined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** Creates a `Type.Class` for the class defined by this symbol. *\/$/;"	classes	line:41
definedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def definedClasses(cunit: CompUnit) =$/;"	methods	line:851
defining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Static.class: a Java class defining static members for all $/;"	classes	line:26
depth	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
deriveAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveAccessMap($/;"	methods	line:866
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = deriveAccessMap(name, tmplwr.cvis, tmpl.stmts)$/;"	constants	line:962
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = new AccessMap(cname)$/;"	constants	line:871
desc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val desc = plainMethodDescFromSig(msym.msig)$/;"	constants	line:737
descFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val descFunc = if(withMroIndex) mroMethodDescFromSig _ else plainMethodDescFromSig _$/;"	constants	line:1099
dfltLabel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val dfltLabel = new asm.Label()$/;"	constants	line:1346
diff	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def diff(self, expected, diff):$/;"	member	line:437
dirs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def dirs(paths: String) = {$/;"	methods	line:47
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Byte l, Double r) { return l * r; }$/;"	method	line:345
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Byte r) { return l * r; }$/;"	method	line:420
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Double r) { return l * r; }$/;"	method	line:435
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Float r) { return l * r; }$/;"	method	line:432
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Integer r) { return l * r; }$/;"	method	line:426
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Long r) { return l * r; }$/;"	method	line:429
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Double l, Short r) { return l * r; }$/;"	method	line:423
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Float l, Double r) { return l * r; }$/;"	method	line:417
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Integer l, Double r) { return l * r; }$/;"	method	line:381
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Long l, Double r) { return l * r; }$/;"	method	line:399
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double divide(Short l, Double r) { return l * r; }$/;"	method	line:363
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Byte l, Float r) { return l * r; }$/;"	method	line:342
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Byte r) { return l * r; }$/;"	method	line:402
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Float r) { return l * r; }$/;"	method	line:414
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Integer r) { return l * r; }$/;"	method	line:408
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Long r) { return l * r; }$/;"	method	line:411
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Float l, Short r) { return l * r; }$/;"	method	line:405
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Integer l, Float r) { return l * r; }$/;"	method	line:378
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Long l, Float r) { return l * r; }$/;"	method	line:396
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float divide(Short l, Float r) { return l * r; }$/;"	method	line:360
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Byte r) { return l * r; }$/;"	method	line:330
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Integer r) { return l * r; }$/;"	method	line:336
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Byte l, Short r) { return l * r; }$/;"	method	line:333
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Byte r) { return l * r; }$/;"	method	line:366
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Integer r) { return l * r; }$/;"	method	line:372
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Integer l, Short r) { return l * r; }$/;"	method	line:369
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Byte r) { return l * r; }$/;"	method	line:348
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Integer r) { return l * r; }$/;"	method	line:354
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer divide(Short l, Short r) { return l * r; }$/;"	method	line:351
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Byte l, Long r) { return l * r; }$/;"	method	line:339
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Integer l, Long r) { return l * r; }$/;"	method	line:375
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Byte r) { return l * r; }$/;"	method	line:384
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Integer r) { return l * r; }$/;"	method	line:390
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Long r) { return l * r; }$/;"	method	line:393
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Long l, Short r) { return l * r; }$/;"	method	line:387
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long divide(Short l, Long r) { return l * r; }$/;"	method	line:357
divider	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def divider(self):$/;"	member	line:449
doSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubst(pat_from: Pattern.Ref, pat_to: Pattern.Ref): Subst = {$/;"	methods	line:48
doSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubsts(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]): Subst = {$/;"	methods	line:65
downcast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcast(toAsmTy: asm.Type) {$/;"	methods	line:146
downcast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcast(toTy: Type.Ref) {$/;"	methods	line:156
downcastIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcastIfNeeded(toTy: Type.Ref, fromTy: Type.Ref) {$/;"	methods	line:160
downcastNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def downcastNeeded(toAsmTy: asm.Type, fromAsmTy: asm.Type): Boolean = {$/;"	methods	line:70
downcastNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def downcastNeeded(toTy: Type.Ref, fromTy: Type.Ref): Boolean = {$/;"	methods	line:74
drop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def drop(n: Int): FileReader = $/;"	methods	line:406
dummySubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def dummySubst(subst: Subst)(pat: Pattern.Ref, text: String): Subst = pat match {$/;"	methods	line:512
dumpBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpBytecode = false$/;"	local variables	line:20
dumpLoweredTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpLoweredTrees = false$/;"	local variables	line:19
dumpParsedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpParsedTrees = false$/;"	local variables	line:17
dumpResolvedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpResolvedTrees = false$/;"	local variables	line:18
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val empty = SymbolSummary(Set(), Set(), Set(), Set())$/;"	constants	line:419
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def empty(state: State) = Env($/;"	methods	line:11
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        val empty = Set(0)$/;"	constants	line:32
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    val empty = new Subst(Map())$/;"	constants	line:44
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    val empty: Map = scala.collection.immutable.Map()$/;"	constants	line:35
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    private[this] val emptyEnv = Env.empty(state)$/;"	constants	line:17
end	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def end() {$/;"	methods	line:203
ensureLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def ensureLoadable(cls: Class[_]) {$/;"	methods	line:5
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            var env = Env.empty(state) \/\/ TODO Enrich environment based on `csym`$/;"	local variables	line:31
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env = ThisEnv(csym)$/;"	constants	line:119
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:157
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:374
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env: Env$/;"	local variables	line:386
env0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env0 = emptyEnv.plusThis(thisTy, thisSym)$/;"	constants	line:23
equalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equalType(ty: Type.Ref) = new Bounder(TcEq).compute(ty)$/;"	methods	line:318
equatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equatable(path: Path.Ref) = new Equater().compute(path)$/;"	methods	line:275
err	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val err = $/;"	constants	line:10
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:843
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = ()$/;"	methods	line:881
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def errTy = Type.Object$/;"	methods	line:917
errTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def errTy: Ty$/;"	methods	line:66
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def error(name: Name.Method, clsName: Name.Class) = {$/;"	methods	line:7
error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    def error[N <: Name.Var](name: N, optExpTy: Option[Type.Ref]) = {$/;"	methods	line:8
error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def error(self, message):$/;"	member	line:452
errorPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def errorPath(name: String) = {$/;"	methods	line:220
errorReports	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    private[this] var errorReports = 0$/;"	local variables	line:10
errors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    private[this] val errors = new ListBuffer[Error]()$/;"	constants	line:14
esc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def esc = elem("escape", c => c == '`')$/;"	methods	line:29
execStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execStatement(stmt: in.Stmt) {$/;"	methods	line:810
execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^def execute(res, args):$/;"	function	line:480
expArgumentTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val expArgumentTy = optTypeArg(Name.BlockA, optExpTy).getOrElse(Type.Void)$/;"	constants	line:822
expReturnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            \/\/ val expReturnTy = optTypeArg(Name.BlockR, optExpTy).getOrElse(Type.Void)$/;"	constants	line:832
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def expand(lvalue: Pattern.Anon) {$/;"	methods	line:570
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def expand(queue0: Queue[T], result: Set[T]): Set[T] = {$/;"	methods	line:47
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^            val expansions = resolveRelList(context)$/;"	constants	line:100
expansions	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val expansions = resolveRelList(relList)$/;"	constants	line:106
expects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                            throw new UsageError("Application class expects parameters.")$/;"	classes	line:58
expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr: PackratParser[out.Expr] = positioned($/;"	constants	line:376
expr0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr0: PackratParser[out.Expr] = positioned($/;"	constants	line:356
exprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val exprs = tuple.exprs.map(lowerExpr(None))$/;"	constants	line:804
extendedInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedInterval(inter: Interval) = ExtendedInterval(inter)$/;"	methods	line:139
extendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedIterable[E](iterable: Iterable[E]) = new ExtendedIterable(iterable)$/;"	methods	line:63
extendedList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedList[E](list: List[E]) = new ExtendedList(list)$/;"	methods	line:77
extendedMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^    implicit def extendedMap(m: Map) = ExtendedMap(m)$/;"	methods	line:40
extendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedMethodVisitor(mvis: asm.MethodVisitor) = ExtendedMethodVisitor(mvis)$/;"	methods	line:164
extendedOption	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedOption[E](option: Option[E]) = new ExtendedOption(option)$/;"	methods	line:85
extract_fragments	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_fragments(filenm):$/;"	function	line:305
extract_metadata	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_metadata(filenm):$/;"	function	line:344
fieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldDecl = positioned($/;"	constants	line:206
fieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldLvalue = positioned($/;"	constants	line:242
fieldName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fieldName = freshVarName(optName)$/;"	constants	line:881
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def fieldNamed(name: Name.Member) = {$/;"	methods	line:48
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def fieldNamed(name: Name.Member) = None$/;"	methods	line:10
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def fieldNamed(name: Name.Member) = {$/;"	methods	line:36
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def fieldNamed(name: Name.Member) = {$/;"	methods	line:69
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def fieldNamed(name: Name.Member): Option[VarSymbol.Field]$/;"	methods	line:84
fieldSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymTabEntry(csym: ClassFromReflection)(fld: reflect.Field) = {$/;"	methods	line:40
fieldSymTabEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def fieldSymTabEntry(csym: ClassFromReflection)(fld: reflect.Field) = {$/;"	methods	line:70
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def fieldSymbol(fld: reflect.Field) = {$/;"	methods	line:86
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def fieldSymbol(csym: ClassFromReflection)(fld: reflect.Field) = {$/;"	methods	line:50
fields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val fields = {$/;"	constants	line:24
fields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def fields(csym: ClassFromReflection) = {$/;"	methods	line:133
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^            val file = new File(path, baseName + ext)$/;"	constants	line:54
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = file$/;"	methods	line:12
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(cls.toString)$/;"	methods	line:32
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(name.toString)$/;"	methods	line:25
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def file: java.io.File$/;"	methods	line:6
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            def file = interFile$/;"	methods	line:410
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val file = $/;"	constants	line:23
fileWithExtension	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def fileWithExtension(ext: String) = {$/;"	methods	line:170
findSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def findSym(memberVar: Name.Member) = {$/;"	methods	line:176
first	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            var first = true$/;"	local variables	line:680
firstRight	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstRight[L,R](left0: L)(func: ((L, E) => Either[L,R])) = {$/;"	methods	line:50
firstSome	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstSome[F](func: (E => Option[F])) = {$/;"	methods	line:43
floatTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val floatTypes = List[Class[_]]($/;"	constants	line:18
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:423
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Base class for optional (i.e., inferable) type references. *\/$/;"	classes	line:426
for	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - AstPattern is a base class for Param and Lvalue$/;"	classes	line:307
forAnnotationsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forAnnotationsNamed(annotationNames: List[Name.Class]) = {$/;"	methods	line:48
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClass(cls: java.lang.Class[_]) = new InterPosition() {$/;"	methods	line:31
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forClass(cls: java.lang.Class[_]) = {$/;"	methods	line:40
forClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClassNamed(name: Name.Class) = new InterPosition() {$/;"	methods	line:24
forClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    def forClassType(classTy: Type.Class): List[ClassSymbol] = {$/;"	methods	line:84
forEach	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <Void, A> Void forEach($/;"	method	line:50
forFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forFile(file: java.io.File) = new InterPosition() {$/;"	methods	line:11
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = None$/;"	methods	line:483
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:490
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(name: VarName): Option[PathTypeArg]$/;"	methods	line:476
forJavaModifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forJavaModifiers(bits: Int) = {$/;"	methods	line:36
forLoweredAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forLoweredAnnotations(annotations: List[Ast.Lower.Annotation]) = {$/;"	methods	line:56
forMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forMember(mem: java.lang.reflect.Member) = {$/;"	methods	line:44
forResolvedAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    def forResolvedAnnotations(annotations: List[Ast.Resolve.Annotation]) = {$/;"	methods	line:52
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    def forSym(csym: ClassSymbol): Unit = {$/;"	methods	line:23
forSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    def forSym(csym: ClassSymbol): List[ClassSymbol] = {$/;"	methods	line:58
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = None$/;"	methods	line:489
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:482
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(name: VarName): Option[TypeTypeArg]$/;"	methods	line:475
format_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def format_error(outfilenm, linenum, msg):$/;"	function	line:175
format_error	/Users/niko/git/intervals-java/Harmonic/test_config.py	/^def format_error(outfilenm, linenum, msg):$/;"	function	line:7
fragment_count	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def fragment_count(self):$/;"	member	line:220
freshClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshClassName(context: Name.Class) = {$/;"	methods	line:36
freshCounter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] var freshCounter = 0$/;"	local variables	line:172
freshInteger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def freshInteger() = {$/;"	methods	line:174
freshName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val freshName = Name.LocalVar("(env-%s)".format(state.freshInteger()))$/;"	constants	line:449
freshVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshVarName(base: Option[Name.Var]) = {$/;"	methods	line:40
fromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val fromSym = state.csym(fromName)$/;"	constants	line:78
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val fsym = lookupFieldOrError(csym.toType, name, None)$/;"	constants	line:240
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val fsym = csym.fieldNamed(state)(memberVar) match {$/;"	constants	line:584
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val fsym = csym.fieldNamed(state)(name) match {$/;"	constants	line:427
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val fsym = env.lookupField(sym.ty, expr.name.name) match {$/;"	constants	line:602
fsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val fsym = new VarSymbol.Field($/;"	constants	line:135
fsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val fsyms = csym.cls.getDeclaredFields.map(fieldSymbol(csym)).toList$/;"	constants	line:135
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fvis = cvis.visitField($/;"	constants	line:884
gatherMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def gatherMethodGroups($/;"	methods	line:75
gathered	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val gathered = new mutable.HashSet[ClassSymbol]()$/;"	constants	line:12
get	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    E get(int index);$/;"	method	line:4
getField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def getField(fsym: VarSymbol.Field) = {$/;"	methods	line:124
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = methodGroups.group(msym)$/;"	constants	line:95
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val group = new MethodGroup(msym.name, msym.msig)$/;"	constants	line:44
group	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        def group(msym: MethodSymbol) =$/;"	methods	line:69
groups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] val groups = new mutable.HashMap[Name.Method, List[MethodGroup]]()$/;"	constants	line:41
handle_negative_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_negative_test(res, experrors, retcode, stdout, stderr):$/;"	function	line:548
handle_positive_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_positive_test(res, exp_output, retcode, stdout, stderr):$/;"	function	line:562
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Interval.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Mutable.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^package harmonic.lang;$/;"	package	line:1
hasErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def hasErrors = !errors.isEmpty$/;"	methods	line:16
head	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^            val head = superList.head$/;"	constants	line:32
header	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    val header = csym.addInterval(ClassSymbol.Header) {$/;"	constants	line:37
helper	/Users/niko/git/intervals-java/Harmonic/test.py	/^        def helper(str):$/;"	member	line:414
hprof	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
i	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        var i = 0$/;"	local variables	line:75
identifyBestMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def identifyBestMethod($/;"	methods	line:627
idx	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val idx = stack.indexOf(csym)$/;"	constants	line:63
ifElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifElse($/;"	method	line:26
ifNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void ifNull($/;"	method	line:16
ifNullElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifNullElse($/;"	method	line:38
if_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void if_($/;"	method	line:7
ignoreErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var ignoreErrors = false$/;"	local variables	line:22
impThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impThis = positioned($/;"	constants	line:370
impVoidStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impVoidStmt = ($/;"	constants	line:387
implSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val implSuffix = "$Impl"$/;"	constants	line:15
importDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val importDecl = positioned($/;"	constants	line:112
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    type CND <: Ast.Name    \/\/ Name of class in declaration (starts out unqual, becomes qual)$/;"	classes	line:37
in	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val in.RelDot(base, mname) = relDot$/;"	constants	line:218
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = Member(className, text)        $/;"	methods	line:138
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class) = this$/;"	methods	line:119
inDefaultClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def inDefaultClass(className: Name.Class): Member$/;"	methods	line:135
inMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    val inMemberDecl: in.MemberDecl$/;"	constants	line:10
inPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val inPath = withPosOf(expr, in.PathBase(relName, ()))$/;"	constants	line:561
ind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var ind = 0$/;"	local variables	line:22
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def indent() {$/;"	methods	line:24
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indent(): Unit$/;"	methods	line:4
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    private[this] var indent: Int = 0$/;"	local variables	line:88
indented	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indented(start: String, end: String)(func: => Unit) {$/;"	methods	line:9
infTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val infTypeRef = positioned($/;"	constants	line:256
init	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^               override def init(inlineInterval: Interval) = Intervals.addHb(end, inlineInterval.start)$/;"	methods	line:134
inlineInterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def inlineInterval[R](func: (Interval => R)):R = {$/;"	methods	line:141
inputFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val inputFiles = new ListBuffer[File]()$/;"	constants	line:15
integralTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val integralTypes = List[Class[_]]($/;"	constants	line:11
inter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] val inter = inState.master.subinterval(during = members) { inter =>$/;"	constants	line:17
interfaceMethodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interfaceMethodSig = MethodSignature($/;"	constants	line:997
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val internalImplName = state.csym(name).internalImplName$/;"	constants	line:782
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def internalImplName = name.internalName$/;"	methods	line:8
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def internalImplName = name.internalName + ByteCode.implSuffix$/;"	methods	line:8
internalImplName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def internalImplName: String$/;"	methods	line:27
internalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def internalName = base.toInternalPrefix + name$/;"	methods	line:37
intersects	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def intersects(seq: Seq[E]): Boolean =$/;"	methods	line:60
interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def interval(name: String) = None$/;"	methods	line:10
interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def interval(name: String) = synchronized {$/;"	methods	line:18
interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def interval(name: String): Option[Interval]$/;"	methods	line:22
intervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val intervalDecl = positioned($/;"	constants	line:189
intervals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    private[this] val intervals = new mutable.ListMap[String, Interval]()$/;"	constants	line:16
intrinsics	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val intrinsics = new mutable.HashMap[(Name.Qual, Name.Method), List[MethodSymbol]]()$/;"	constants	line:72
introduceVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def introduceVar(fromExpr: in.Expr, toExpr: out.Expr): out.Var = {$/;"	methods	line:501
is	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    \/** When a new instance of this class is created, what should we REALLY instantiate? *\/$/;"	classes	line:26
isAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isAbstract = contains(Abstract)$/;"	methods	line:21
isBestChoice	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def isBestChoice(msym: MethodSymbol) = {$/;"	methods	line:686
isBetterChoiceThan	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def isBetterChoiceThan(msym_better: MethodSymbol, msym_worse: MethodSymbol) = {$/;"	methods	line:672
isCompatibleWith	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def isCompatibleWith($/;"	methods	line:49
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInPathArg: Boolean = false$/;"	methods	line:15
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true        $/;"	methods	line:27
isConstrainableInPathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInPathArg = true$/;"	methods	line:20
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isConstrainableInTypeArg: Boolean = false$/;"	methods	line:16
isConstrainableInTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isConstrainableInTypeArg = true$/;"	methods	line:24
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^            override def isError = true$/;"	methods	line:19
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def isError: Boolean = false$/;"	methods	line:10
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^            override def isError = true$/;"	methods	line:11
isFromClassNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def isFromClassNamed(aName: Name.Qual) = (clsName == aName)$/;"	methods	line:35
isGoodHead	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        def isGoodHead(superList: List[ClassSymbol]) = {$/;"	methods	line:31
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def isInstanceFieldNamed(aName: Name.Member): Boolean = false$/;"	methods	line:7
isInstanceFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        override def isInstanceFieldNamed(aName: Name.Member): Boolean = (name == aName)$/;"	methods	line:19
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def isNamed(aName: Name.Qual) = (name == aName)$/;"	methods	line:27
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def isNamed(aName: Name.Method) = (name == aName)$/;"	methods	line:36
isNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    def isNamed(aName: Name.Var) = (name == aName)    $/;"	methods	line:27
isNotAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotAbstract = !contains(Abstract)$/;"	methods	line:22
isNotOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotOverride = !contains(Override)$/;"	methods	line:25
isNotStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isNotStatic = !contains(Override)$/;"	methods	line:28
isOperCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperCont(c: Char) = c != EofCh && !c.isWhitespace && !sep.contains(c)$/;"	methods	line:33
isOperStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperStart(c: Char) = isOperCont(c) && !c.isLetter && !c.isDigit$/;"	methods	line:34
isOverride	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isOverride = contains(Override)$/;"	methods	line:24
isStatic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def isStatic = contains(Override)$/;"	methods	line:27
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def isSubclass(superCsym: ClassSymbol) = {$/;"	methods	line:50
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def isSubclass(ty_sub: Type.Ref, ty_sup: Type.Ref): Boolean = {$/;"	methods	line:506
isSuitableArgument	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSuitableArgument(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:384
isSuitableArgumentBounded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def isSuitableArgumentBounded(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:356
iterableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableClass = classOf[java.lang.Iterable[_]]$/;"	constants	line:75
iterableTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableTy = Type.Class(iterableClass)$/;"	constants	line:87
jBit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^    abstract class Mod(val bit: Int, val jBit: Int, val name: Name.Class)$/;"	constants	line:7
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = parts.mkString("$")$/;"	methods	line:88
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = text$/;"	methods	line:112
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = text$/;"	methods	line:126
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName: String$/;"	methods	line:95
javaReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val javaReader = Util.javaReaderFromFile(interFile)$/;"	constants	line:416
javaReaderFromFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromFile(file: java.io.File) = new java.io.FileReader(file)$/;"	methods	line:14
javaReaderFromPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromPath(path: String) = javaReaderFromFile(new java.io.File(path))$/;"	methods	line:13
join	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def join() = {$/;"	methods	line:132
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val key = (msym.clsName, msym.name)$/;"	constants	line:75
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val kind: MethodKind,            \/** Intrinsic, harmonic, java, etc. *\/$/;"	constants	line:28
labels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val labels = msyms.map(_ => new asm.Label()).toArray$/;"	constants	line:1347
lbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val lbs = wt.getLowerBounds$/;"	constants	line:49
lbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val lbs = wt.getLowerBounds$/;"	constants	line:13
leftAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val leftAsmTy = asm.Type.getType(leftClass)$/;"	constants	line:744
leftTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val leftTy = Type.Class(leftClass)$/;"	constants	line:45
length	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    int length();$/;"	method	line:6
lexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    val lexical = new HlLexical$/;"	constants	line:53
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:13
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:19
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:26
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:33
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:15
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:28
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:35
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = "<unknown>"$/;"	methods	line:21
list	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val list = csym :: merge(csym, superLists)$/;"	constants	line:76
ll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ll = new LvalueLower(env)$/;"	constants	line:451
load	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def load(state: State) = synchronized {$/;"	methods	line:55
loadFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def loadFrom(args: Array[String]): Boolean = {$/;"	methods	line:74
loadSourceFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        def loadSourceFile(file: java.io.File) {$/;"	methods	line:113
loadVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def loadVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:115
loaded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var loaded = false$/;"	local variables	line:8
loadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def loadedOrLoadable(className: Name.Class) = {$/;"	methods	line:90
localIsDefined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def localIsDefined(name: Name.LocalVar) = $/;"	methods	line:129
localName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val localName = positioned(varIdent ^^ { s => Ast.LocalName(Name.LocalVar(s)) })    $/;"	constants	line:87
localize	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var localize = false$/;"	local variables	line:24
locateSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def locateSource(className: Name.Class) = {        $/;"	methods	line:108
log	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def log(self, text):$/;"	member	line:457
lookupEntry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupEntry(csym: ClassSymbol, uName: Name.UnloweredMember): CanFail[SymTab.MemberEntry] = {$/;"	methods	line:99
lookupField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupField($/;"	methods	line:172
lookupFieldOrError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupFieldOrError($/;"	methods	line:188
lookupInstanceMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupInstanceMethods($/;"	methods	line:209
lookupInstanceMethodsDefinedOnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupInstanceMethodsDefinedOnClass($/;"	methods	line:199
lookupIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def lookupIntrinsic(className: Name.Qual, methodName: Name.Method): Option[List[MethodSymbol]] = {$/;"	methods	line:81
lookupLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupLocal(name: Name.LocalVar) = $/;"	methods	line:132
lookupLocalOrError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupLocalOrError(name: Name.LocalVar, optExpTy: Option[Type.Ref]) = $/;"	methods	line:135
lookupMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def lookupMember[R]($/;"	methods	line:144
lookupThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupThis = $/;"	methods	line:138
lookupTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupTypeVar($/;"	methods	line:162
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val lower = csym.interval(ClassSymbol.Lower).toList$/;"	constants	line:14
lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    val lower = csym.addInterval(ClassSymbol.Lower) {$/;"	constants	line:51
lowerAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerAnnotation(ann: in.Annotation) = withPosOf(ann,$/;"	methods	line:358
lowerAnyParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerAnyParams(env0: Env, inputs: List[(Type.Ref, in.Param)]): (List[out.Param], Env) = {$/;"	methods	line:156
lowerBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerBlock(optExpTy: Option[Type.Ref])(tmpl: in.Block) = introduceVar(tmpl, {$/;"	methods	line:821
lowerBlockParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBlockParam(env: Env, expTy: Type.Ref, inParam: in.Param) = {$/;"	methods	line:151
lowerBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBody(env: Env, body: in.Body): out.Body = {$/;"	methods	line:369
lowerBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lowerBoundType(ty: Type.Ref) = new Bounder(TcSup).compute(ty)$/;"	methods	line:328
lowerCast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerCast(expr: in.Cast) = withPosOf(expr, {$/;"	methods	line:861
lowerExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExpr(optExpTy: Option[Type.Ref])(expr: in.Expr): out.AtomicExpr = expr match {$/;"	methods	line:901
lowerExprToVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExprToVar(optExpTy: Option[Type.Ref])(expr: in.Expr): out.Var = {$/;"	methods	line:916
lowerField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerField(optExpTy: Option[Type.Ref])(expr: in.Field) = introduceVar(expr, { $/;"	methods	line:568
lowerFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerFieldDecl($/;"	methods	line:114
lowerImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerImpThis(expr: in.Expr) = withPosOf(expr, {$/;"	methods	line:856
lowerIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerIntervalDecl($/;"	methods	line:67
lowerLiteralExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLiteralExpr(expr: in.Literal) = introduceVar(expr, {$/;"	methods	line:622
lowerLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLvalue(rvalueTy: Type.Ref, lvalue: in.Lvalue): out.Lvalue = withPosOf(lvalue, {$/;"	methods	line:388
lowerMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMemberDecl($/;"	methods	line:47
lowerMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var lowerMembers: List[LowerMember] = Nil$/;"	local variables	line:58
lowerMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerMethodCall(optExpTy: Option[Type.Ref])(mcall: in.MethodCall) = introduceVar(mcall, {$/;"	methods	line:722
lowerMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodDecl($/;"	methods	line:77
lowerMethodParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodParams(classEnv: Env, inParams: List[in.Param]) = {$/;"	methods	line:146
lowerNewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewAnon(expr: in.NewAnon) = introduceVar(expr, {$/;"	methods	line:786
lowerNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewCtor(expr: in.NewCtor) = introduceVar(expr, {$/;"	methods	line:750
lowerNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNull(optExpTy: Option[Type.Ref])(expr: in.Null) = introduceVar(expr, {$/;"	methods	line:790
lowerOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerOwner(owner: in.Owner): out.Owner = withPosOf(owner, owner match {$/;"	methods	line:563
lowerParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerParam(expTy: Type.Ref, param: in.Param): out.Param = withPosOf(param, {$/;"	methods	line:159
lowerPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerPath(path: in.AstPath): out.TypedPath = {$/;"	methods	line:278
lowerRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerRcvr(rcvr: in.Rcvr, mthdName: Name.Method): out.Rcvr = withPosOf(rcvr, rcvr match {$/;"	methods	line:869
lowerRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerRelDecl($/;"	methods	line:57
lowerRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerRequirement(req: in.PathRequirement) = withPosOf(req, out.PathRequirement($/;"	methods	line:352
lowerStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerStmts(env0: Env, stmts: List[in.Stmt]): List[out.Stmt] = {$/;"	methods	line:373
lowerTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTuple(optExpTy: Option[Type.Ref])(tuple: in.Tuple) = withPosOf(tuple, {$/;"	methods	line:795
lowerTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeRef(tref: in.ResolveTypeRef): out.TypeRef = withPosOf(tref, {$/;"	methods	line:346
lowerVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerVar(optExpTy: Option[Type.Ref])(v: in.Var) = withPosOf(v, {$/;"	methods	line:896
loweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var loweredSource: Ast.Lower.ClassDecl = null$/;"	local variables	line:78
lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val lvalue: PackratParser[out.Lvalue] = tupleLvalue | declLvalue | reassignLvalue | fieldLvalue$/;"	constants	line:250
lvsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val lvsym = locals.get(name).getOrElse(Symbol.errorLocalVar(name, None))$/;"	constants	line:234
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^        def main(args: Array[String]) {$/;"	methods	line:33
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^    def main(args: Array[String]) {$/;"	methods	line:77
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^    def main(args: Array[String]) {$/;"	methods	line:8
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^    public Object main(); \/\/ FIXME Add args$/;"	method	line:5
main	/Users/niko/git/intervals-java/Harmonic/test.py	/^def main(args):$/;"	function	line:654
map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^class Subst(private val map: Map[Path.Ref, Path.Ref]) {$/;"	constants	line:5
mapContext	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def mapContext[C,F](context: C, func: (E => (C, F))): (C, List[F]) = {$/;"	methods	line:66
masterDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val masterDesc = descFunc(masterSig)$/;"	constants	line:1100
matches	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def matches(unlowerName: UnloweredMember) = unlowerName match {$/;"	methods	line:114
matchesByClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def matchesByClass(pattern: Pattern.Ref, ty: Type.Ref): Boolean = {$/;"	methods	line:521
matching	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val matching = msyms.takeWhile(_.isFromClassNamed(csym.name))$/;"	constants	line:1313
mathOps	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val mathOps = List($/;"	constants	line:25
maxIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxIndex = 0$/;"	local variables	line:376
maxSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxSlot = 0$/;"	local variables	line:344
mdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mdecl = csym.loweredMethods(msym.methodId)$/;"	constants	line:1473
member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val member: PackratParser[out.MemberDecl] = ($/;"	constants	line:144
memberCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val memberCsym = state.csym(memberVar.className)$/;"	constants	line:177
memberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def memberDecl = {$/;"	methods	line:23
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val memberName = Name.Member(csym.name, fld.getName)$/;"	constants	line:41
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val memberName = varName$/;"	constants	line:89
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^        val memberName = Name.Member(csym.name, fld.getName)$/;"	constants	line:71
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                                    val memberName = Name.Member(className, text)$/;"	constants	line:386
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                    val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:371
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val memberName = resolveDottedMemberName(relDot)$/;"	constants	line:469
memberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val memberName = resolveMemberName(expr.name)$/;"	constants	line:594
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val memberVar = expr.name.name.inDefaultClass(Name.ObjectClass)$/;"	constants	line:612
memberVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val memberVar = expr.name.name match {$/;"	constants	line:572
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** List of class members being lowered. *\/$/;"	classes	line:57
members	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Create.scala	/^        val members = csym.addInterval(ClassSymbol.Members) {$/;"	constants	line:18
merge	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] def merge(csym: ClassSymbol, superLists: List[List[ClassSymbol]]): List[ClassSymbol] = {$/;"	methods	line:21
mergeSuperSymbolTables	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def mergeSuperSymbolTables(csym: ClassSymbol): SymTab.Map = {$/;"	methods	line:39
methodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val methodDecl = positioned($/;"	constants	line:151
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var methodGroups: List[MethodGroup] = Nil$/;"	local variables	line:85
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val methodGroups = gatherMethodGroups(csym, env)$/;"	constants	line:32
methodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val methodGroups = new MethodGroups(env)$/;"	constants	line:79
methodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def methodId = Id.Method(clsName, name, msig.parameterPatterns)$/;"	methods	line:38
methodName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val methodName: Name.Method,$/;"	constants	line:14
methodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val methodSig = MethodSignature($/;"	constants	line:964
methodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def methodSignature(msig: MethodSignature[Pattern.Anon]) = {$/;"	methods	line:33
methodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def methodSymbol(mthd: reflect.Method) = {$/;"	methods	line:117
methodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def methodSymbol(clsName: Name.Class)(mthd: reflect.Method) = {$/;"	methods	line:109
methods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def methods(csym: ClassFromReflection) = {$/;"	methods	line:125
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def methodsNamed(name: Name.Method) = {$/;"	methods	line:38
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def methodsNamed(name: Name.Method) = Nil$/;"	methods	line:9
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    def methodsNamed(name: Name.Method) = {$/;"	methods	line:32
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def methodsNamed(mthdName: Name.Method) = {$/;"	methods	line:64
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def methodsNamed(name: Name.Method): List[MethodSymbol]$/;"	methods	line:80
minimalUpperBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def minimalUpperBoundType(ty: Type.Ref) = {$/;"	methods	line:334
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Byte l, Double r) { return l - r; }$/;"	method	line:129
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Byte r) { return l - r; }$/;"	method	line:204
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Double r) { return l - r; }$/;"	method	line:219
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Float r) { return l - r; }$/;"	method	line:216
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Integer r) { return l - r; }$/;"	method	line:210
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Long r) { return l - r; }$/;"	method	line:213
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Double l, Short r) { return l - r; }$/;"	method	line:207
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Float l, Double r) { return l - r; }$/;"	method	line:201
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Integer l, Double r) { return l - r; }$/;"	method	line:165
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Long l, Double r) { return l - r; }$/;"	method	line:183
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double minus(Short l, Double r) { return l - r; }$/;"	method	line:147
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Byte l, Float r) { return l - r; }$/;"	method	line:126
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Byte r) { return l - r; }$/;"	method	line:186
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Float r) { return l - r; }$/;"	method	line:198
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Integer r) { return l - r; }$/;"	method	line:192
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Long r) { return l - r; }$/;"	method	line:195
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Float l, Short r) { return l - r; }$/;"	method	line:189
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Integer l, Float r) { return l - r; }$/;"	method	line:162
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Long l, Float r) { return l - r; }$/;"	method	line:180
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float minus(Short l, Float r) { return l - r; }$/;"	method	line:144
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Byte r) { return l - r; }$/;"	method	line:114
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Integer r) { return l - r; }$/;"	method	line:120
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Byte l, Short r) { return l - r; }$/;"	method	line:117
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Byte r) { return l - r; }$/;"	method	line:150
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Integer r) { return l - r; }$/;"	method	line:156
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Integer l, Short r) { return l - r; }$/;"	method	line:153
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Byte r) { return l - r; }$/;"	method	line:132
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Integer r) { return l - r; }$/;"	method	line:138
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer minus(Short l, Short r) { return l - r; }$/;"	method	line:135
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Byte l, Long r) { return l - r; }$/;"	method	line:123
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Integer l, Long r) { return l - r; }$/;"	method	line:159
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Byte r) { return l - r; }$/;"	method	line:168
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Integer r) { return l - r; }$/;"	method	line:174
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Long r) { return l - r; }$/;"	method	line:177
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Long l, Short r) { return l - r; }$/;"	method	line:171
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long minus(Short l, Long r) { return l - r; }$/;"	method	line:141
mod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val mod = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:409
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def modifiers = {$/;"	methods	line:18
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def modifiers = Modifier.Set.empty$/;"	methods	line:6
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^        val modifiers = Modifier.forMember(fld)$/;"	constants	line:42
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val modifiers = {$/;"	constants	line:8
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def modifiers = {$/;"	methods	line:42
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val modifiers = Modifier.forLoweredAnnotations(outAnnotations)$/;"	constants	line:198
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    def modifiers(state: State) = modifiers$/;"	methods	line:40
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val modifiers: Modifier.Set,$/;"	constants	line:27
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^        val modifiers = Modifier.forMember(fld)$/;"	constants	line:72
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def modifiers: Modifier.Set$/;"	methods	line:9
modifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val modifiers: Modifier.Set,$/;"	constants	line:17
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = MethodResolutionOrder(state).forClassType(classTy)$/;"	constants	line:215
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val mro = MethodResolutionOrder(state).forClassType(classTy)$/;"	constants	line:338
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val mro = MethodResolutionOrder(state).forSym(csym)$/;"	constants	line:100
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val mro = MethodResolutionOrder(state).forSym(csym)$/;"	constants	line:80
mro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val mro = MethodResolutionOrder(state).forSym(env.thisCsym)$/;"	constants	line:874
mroCache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^        val mroCache = new mutable.HashMap[ClassSymbol, List[ClassSymbol]]()$/;"	constants	line:8
mroIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mroIndex = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1121
mroInt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mroInt = accessMap.pathToFreshSlot(asm.Type.INT_TYPE) $/;"	constants	line:1339
mroMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def mroMethodDescFromSig(msig: MethodSignature[Pattern.Anon]): String = {$/;"	methods	line:95
msg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        def msg = $/;"	methods	line:9
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val msig = subst.methodSignature(msym.msig)$/;"	constants	line:696
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:648
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val msig = msym.msig$/;"	constants	line:554
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:17
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:31
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val msym = new MethodSymbol($/;"	constants	line:55
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val msyms = computeVersions(group, MethodResolutionOrder(state).forSym(csym), group.msyms)$/;"	constants	line:1343
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val msyms = mroCsym.allMethodSymbols(state)$/;"	constants	line:82
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = csym.constructors(state)$/;"	constants	line:754
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = csym.methodsNamed(state)(mcall.name).filter(_.modifiers.isStatic)$/;"	constants	line:727
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    def msyms = msymsBuffer.toList$/;"	methods	line:27
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val msyms = csym.cls.getDeclaredMethods.map(methodSymbol(csym.name)).toList$/;"	constants	line:127
msymsBuffer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodGroup.scala	/^    private[this] val msymsBuffer = new mutable.ListBuffer[MethodSymbol]()$/;"	constants	line:24
mthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val mthdParam: PackratParser[out.Param] = tupleMthdParam | varMthdParam$/;"	constants	line:225
mthdScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val mthdScope = resolveParam.scope$/;"	constants	line:280
mthdSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def mthdSubst(msym: MethodSymbol, rcvr: in.ParseRcvr, args: List[in.ParseTlExpr]) = {$/;"	methods	line:553
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(data: MCallData) = data._1$/;"	methods	line:922
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:848
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def mthdSym(unit: MSym) = ()$/;"	methods	line:886
mthdSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def mthdSym(data: MCallData): MSym$/;"	methods	line:71
must	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ However, to fulfill the `Block` interface, the class must also $/;"	classes	line:1028
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val mvis = cvis.visitMethod($/;"	constants	line:1187
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1106
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1220
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1242
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:1391
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitMethodWithMro(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:1336
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = visitPlainMethod(csym, cvis, group.methodName, group.msig, 0)$/;"	constants	line:1281
mvisMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisMro = visitMethodWithMro(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1265
mvisPlain	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvisPlain = visitPlainMethod(csym, cvis, msym.name, msym.msig, O.ACC_ABSTRACT)$/;"	constants	line:1263
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                    throw new UsageError("No application class name provided.")$/;"	classes	line:38
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.UnloweredMember$/;"	methods	line:798
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: Name.Var$/;"	methods	line:794
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val name = freshClassName(accessMap.context)$/;"	constants	line:937
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val name = Name.Class(cls)$/;"	constants	line:73
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val name = Name.Class(ty)$/;"	constants	line:62
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Maps a class name to its symbol. *\/$/;"	classes	line:14
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val name = Name.LocalVar(tmpVarName(fromExpr))$/;"	constants	line:502
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val name: Name.Method,           \/** Name of the method. *\/$/;"	constants	line:30
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val name = Name.Method(parts.map(_._1))$/;"	constants	line:154
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val name = Name.Class(cls)$/;"	constants	line:26
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val name = Name.Class(cls)$/;"	constants	line:37
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Member$/;"	methods	line:10
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/SymTab.scala	/^        def name: Name.Var$/;"	methods	line:5
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val name: N,$/;"	constants	line:18
named	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** Loads a class named `className`.  If it fails, reports an $/;"	classes	line:94
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ ___ Generating fresh, unique class names _____________________________$/;"	classes	line:34
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                    \/\/ body: resolves members in the body to absolute class names, etc.$/;"	classes	line:28
newAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newAnon = positioned($/;"	constants	line:337
newCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newCtor = positioned($/;"	constants	line:343
newExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newExpr = newAnon | newCtor$/;"	constants	line:349
newGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        private[this] def newGroup(msym: MethodSymbol) = {$/;"	methods	line:43
nextCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^                val nextCsym = queued.dequeue()$/;"	constants	line:56
nextMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val nextMro = accessMap.pathToFreshSlot(asm.Type.INT_TYPE)$/;"	constants	line:1198
nl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var nl = false$/;"	local variables	line:23
noBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noBlkParam = positioned($/;"	constants	line:306
noSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val noSuffix = ""$/;"	constants	line:14
normalize_whitespace	/Users/niko/git/intervals-java/Harmonic/test.py	/^def normalize_whitespace(str):$/;"	function	line:519
notAbstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val notAbstract = matching.filter(_.modifiers(state).isNotAbstract)$/;"	constants	line:1315
notArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val notArg = not(guard("(" | "{" | "{{"))$/;"	constants	line:292
notEsc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def notEsc = elem("escape", c => c != '`' && c != EofCh && c != '\\n')$/;"	methods	line:30
numericTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val numericTypes = integralTypes ++ floatTypes$/;"	constants	line:23
objClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val objClass = obj.getClass$/;"	constants	line:681
objectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectClass = classOf[java.lang.Object]$/;"	constants	line:74
objectTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectTy = Type.Class(objectClass)$/;"	constants	line:86
of	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Symbols which are accessed from an inner class of some kind: $/;"	classes	line:410
op	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val op = {$/;"	constants	line:125
oper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val oper = ($/;"	constants	line:69
operCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operCont = elem("operCont", isOperCont)$/;"	methods	line:37
operPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val operPart = oper~expr0 ^^ { case o~r => (o, r) }$/;"	constants	line:374
operStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operStart = elem("operStart", isOperStart)            $/;"	methods	line:36
optAppClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^        var optAppClassName: Option[String] = None$/;"	local variables	line:20
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val optBody = decl.optBody.map(lowerBody(ThisEnv(csym), _))$/;"	constants	line:118
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val optBody = mdecl.optBody.map(lowerBody(env, _))$/;"	constants	line:82
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optBody = ($/;"	constants	line:196
optClassTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optClassTupleParam = positioned($/;"	constants	line:129
optCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def optCsym(name: Name.Class) = synchronized {$/;"	methods	line:18
optExpTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTy = optTypeFromLocal(env, lvalue)$/;"	constants	line:449
optExpTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTys = msym.msig.parameterPatterns.map(p => Some(subst.ty(p.ty)))$/;"	constants	line:646
optFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] var optFieldSymbol: Option[VarSymbol.Field] = None$/;"	local variables	line:124
optFieldValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optFieldValue = opt(positioned($/;"	constants	line:201
optMthdSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] var optMthdSymbol: Option[MethodSymbol] = None$/;"	local variables	line:44
optSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def optSubst(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]) = {$/;"	methods	line:75
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optTy = env.upperBoundType(expTy).firstSome {$/;"	constants	line:173
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val optTy = mro.firstSome { $/;"	constants	line:875
optTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeArg(TypeVarName: Name.Var, optExpTy: Option[Type.Ref]) = optExpTy match {$/;"	methods	line:810
optTypeFromLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeFromLocal(env: Env, lvalue0: in.Lvalue): Option[Type.Ref] = {$/;"	methods	line:473
optTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optTypeRef: PackratParser[out.OTR] = reqTypeRef | infTypeRef$/;"	constants	line:254
optl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def optl[A](p: PackratParser[List[A]]) = opt(p) ^^ { _.getOrElse(List()) }$/;"	methods	line:67
or	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^      * whether they are defined in this class or in a superclass. Populated $/;"	classes	line:83
orErr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def orErr(err: => Error): CanFail[E] = option match {$/;"	methods	line:80
out	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val out = new java.io.FileOutputStream(clsFile)$/;"	constants	line:210
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outAnnotations = annotations.map(InEnv(env).lowerAnnotation)$/;"	constants	line:193
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outAnnotations = anns.map(InEnv(env).lowerAnnotation)$/;"	constants	line:408
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = annotations.map(scope.resolveAnnotation)$/;"	constants	line:154
outAnnotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outAnnotations = varParam.annotations.map(scope.resolveAnnotation)$/;"	constants	line:86
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = inArgs.map(lowerExpr(None))$/;"	constants	line:656
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = optExpTys.zip(inArgs).map { case (t,a) => lowerExpr(t)(a) }$/;"	constants	line:647
outAssign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outAssign = withPosOf(stmt, out.Assign(resolveLocal.outLvalue, outRv))$/;"	constants	line:516
outBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outBase = resolvePathToPath(base)$/;"	constants	line:470
outCdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outCdecl = InScope(symTab, true).resolveClassDecl(cdecl)$/;"	constants	line:29
outDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val outDecl = memberDecl.asInstanceOf[out.FieldDecl]$/;"	constants	line:170
outDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                        val outDecl = memberDecl.asInstanceOf[out.MethodDecl]$/;"	constants	line:98
outExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outExprs = tys.zip(tuple.exprs).map { case (t, e) => $/;"	constants	line:798
outLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLvalue = ll.lowerLvalue(outRvalue.ty, lvalue)$/;"	constants	line:452
outLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outLvalue = resolveLvalue(inLvalue)$/;"	constants	line:214
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLvalues = lvalues.map(lowerLvalue(Type.Null, _))$/;"	constants	line:402
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLvalues = tys.zip(lvalues).map { case (t, l) => lowerLvalue(t, l) }$/;"	constants	line:396
outLvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outLvalues = lvalues.map(resolveLvalue)$/;"	constants	line:137
outMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    private[this] var outMemberDecl: out.MemberDecl = null$/;"	local variables	line:16
outMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def outMethodCall(r: out.Rcvr, cps: List[(String, out.Expr)]) = {$/;"	methods	line:332
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:102
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def outParam = outParams.head$/;"	methods	line:131
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = params.map(lowerParam(Type.Object, _))$/;"	constants	line:185
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:180
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outParams = tys.zip(params).map { case (t, l) => lowerParam(t, l) }$/;"	constants	line:167
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outParams = tupleParam.params.map(resolveParam)$/;"	constants	line:81
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val outParams = inParams.map(resolveParam)$/;"	constants	line:97
outReturnTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                    val outReturnTref = Lower(createState).InScope(env).lowerTypeRef(inReturnTref)$/;"	constants	line:79
outRv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outRv = resolveExpr(rv)$/;"	constants	line:514
outRvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRvalue = lowerExpr(optExpTy)(rvalue)$/;"	constants	line:450
outStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmt = withPosOf(stmt, out.Labeled(name, resolveBody(body)))$/;"	constants	line:522
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts = lowerStmts(subenv, tmpl.stmts)$/;"	constants	line:825
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outStmts = resolveLocal.scope.resolveStmts(stmts)$/;"	constants	line:517
outTref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^                    val outTref = Lower(createState).InScope(csym.classEnv).lowerTypeRef(inTref)$/;"	constants	line:151
outTypeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val outTypeArgs = typeArgs.map(resolveTypeArg)$/;"	constants	line:483
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(tref)$/;"	constants	line:155
outTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val outTypeRef = scope.resolveOptionalTypeRef(varParam.tref)$/;"	constants	line:87
outputDir	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var outputDir = new File(".")$/;"	local variables	line:16
overriddenDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val overriddenDesc = descFunc(overriddenSig)$/;"	constants	line:1101
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * in the current class overrides a method with signature $/;"	classes	line:489
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def overrides($/;"	methods	line:494
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val overrides = new mutable.ListBuffer[MethodSymbol]()$/;"	constants	line:48
ownerAsmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val ownerAsmType = asmType(msig.receiverTy)$/;"	constants	line:736
ownerTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ownerTypedPath = toTypedPath(owner)$/;"	constants	line:254
packageDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageDecl = positioned($/;"	constants	line:105
packageName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageName = positioned($/;"	constants	line:91
param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val param = new ResolveBlockParam(this, tmpl.param)$/;"	constants	line:644
paramPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def paramPattern(pair: (reflect.Type, Int)) = {$/;"	methods	line:94
paramPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def paramPattern(pair: (reflect.Type, Int)) = {$/;"	methods	line:58
parameter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    \/** Lowered version of class parameter *\/$/;"	classes	line:48
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val parameterPatterns: List[P]        $/;"	constants	line:6
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^        val parameterPatterns = name.parts.zipWithIndex.map { case (_, i) => $/;"	constants	line:8
parameterTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val parameterTys = msym.msig.parameterPatterns.map(p => subst.ty(p.ty))$/;"	constants	line:663
parameters	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ - Param for method and class parameters$/;"	classes	line:305
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val params = msym.msig.parameterPatterns.flatMap(_.varTys).map(asmType)$/;"	constants	line:105
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^                val params = parts.map(_._2)$/;"	constants	line:155
parseArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^        private[this] def parseArgs(args: Array[String]) {$/;"	methods	line:23
parser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val parser = new Parse()$/;"	constants	line:417
patSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def patSubst(subst: Subst)(pat: Pattern.Ref, expr: in.ParseRcvr): Subst = {$/;"	methods	line:522
patSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def patSubsts(allPatterns: List[Pattern.Ref], allExprs: List[in.ParseRcvr]): Subst = {$/;"	methods	line:546
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val path = positioned($/;"	constants	line:294
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def path(p: Path.Ref): Path.Ref = (map.get(p), p) match {$/;"	methods	line:10
pathToExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def pathToExpr(path: out.AstPath): out.Expr = withPosOf(path, path match {$/;"	methods	line:548
pathToFreshSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pathToFreshSlot(asmTy: asm.Type) = {$/;"	methods	line:346
pathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathType = positioned($/;"	constants	line:268
pathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathTypeArg = positioned($/;"	constants	line:282
pathsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathsAreEquatable(path1: Path.Ref, path2: Path.Ref) = equatable(path1) contains path2$/;"	methods	line:276
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(P1: Path.Ref, Rel: PcRel): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:92
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel): List[(Path.Ref, Path.Ref)] = pathRels.flatMap { $/;"	methods	line:82
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel, P2: Path.Ref): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:87
pattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def pattern(p: Pattern.Anon): Pattern.Anon = p match {$/;"	methods	line:16
patterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def patterns: List[Pattern.Anon]$/;"	methods	line:25
pcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pcRel = ($/;"	constants	line:171
plainMethodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def plainMethodDescFromSig(msig: MethodSignature[Pattern.Anon]): String = {$/;"	methods	line:88
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Byte l, Double r) { return l + r; }$/;"	method	line:21
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Byte r) { return l + r; }$/;"	method	line:96
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Double r) { return l + r; }$/;"	method	line:111
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Float r) { return l + r; }$/;"	method	line:108
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Integer r) { return l + r; }$/;"	method	line:102
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Long r) { return l + r; }$/;"	method	line:105
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Double l, Short r) { return l + r; }$/;"	method	line:99
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Float l, Double r) { return l + r; }$/;"	method	line:93
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Integer l, Double r) { return l + r; }$/;"	method	line:57
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Long l, Double r) { return l + r; }$/;"	method	line:75
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double plus(Short l, Double r) { return l + r; }$/;"	method	line:39
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Byte l, Float r) { return l + r; }$/;"	method	line:18
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Byte r) { return l + r; }$/;"	method	line:78
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Float r) { return l + r; }$/;"	method	line:90
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Integer r) { return l + r; }$/;"	method	line:84
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Long r) { return l + r; }$/;"	method	line:87
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Float l, Short r) { return l + r; }$/;"	method	line:81
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Integer l, Float r) { return l + r; }$/;"	method	line:54
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Long l, Float r) { return l + r; }$/;"	method	line:72
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float plus(Short l, Float r) { return l + r; }$/;"	method	line:36
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Byte r) { return l + r; }$/;"	method	line:6
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Integer r) { return l + r; }$/;"	method	line:12
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Byte l, Short r) { return l + r; }$/;"	method	line:9
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Byte r) { return l + r; }$/;"	method	line:42
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Integer r) { return l + r; }$/;"	method	line:48
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Integer l, Short r) { return l + r; }$/;"	method	line:45
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Byte r) { return l + r; }$/;"	method	line:24
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Integer r) { return l + r; }$/;"	method	line:30
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer plus(Short l, Short r) { return l + r; }$/;"	method	line:27
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Byte l, Long r) { return l + r; }$/;"	method	line:15
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Integer l, Long r) { return l + r; }$/;"	method	line:51
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Byte r) { return l + r; }$/;"	method	line:60
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Integer r) { return l + r; }$/;"	method	line:66
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Long r) { return l + r; }$/;"	method	line:69
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Long l, Short r) { return l + r; }$/;"	method	line:63
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long plus(Short l, Long r) { return l + r; }$/;"	method	line:33
plusLocalVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusLocalVar(sym: VarSymbol.Local) = copy(locals = locals + (sym.name -> sym))$/;"	methods	line:66
plusLocalVars	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusLocalVars(syms: Iterable[VarSymbol.Local]) = syms.foldLeft(this)(_ plusLocalVar _)$/;"	methods	line:68
plusPathRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRel(rel: (Path.Ref, PcRel, Path.Ref)) = copy(pathRels = rel :: pathRels)$/;"	methods	line:72
plusPathRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRels(rels: List[(Path.Ref, PcRel, Path.Ref)]) = rels.foldLeft(this)(_ plusPathRel _)$/;"	methods	line:74
plusThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusThis(thisTy: Type.Class, sym: VarSymbol.Local) = plusLocalVar(sym).copy(thisTy = thisTy)$/;"	methods	line:70
plusTypeRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRel(rel: (Type.Var, TcRel, Type.Ref)) = copy(typeRels = rel :: typeRels)$/;"	methods	line:76
plusTypeRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRels(rels: List[(Type.Var, TcRel, Type.Ref)]) = rels.foldLeft(this)(_ plusTypeRel _)$/;"	methods	line:78
popRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def popRvalues(lvalue: in.Lvalue, rvalue: in.Expr) {$/;"	methods	line:553
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    override def pos = InterPosition.forFile(file)$/;"	methods	line:16
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def pos = InterPosition.forClassNamed(name)$/;"	methods	line:9
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def pos = resolvedSource.pos$/;"	methods	line:29
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def pos: Position$/;"	methods	line:30
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    val pos: Position,$/;"	constants	line:26
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def pos = new OffsetPosition(source, offset) with InterPosition {$/;"	methods	line:409
posString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def posString(pos: Position) = {$/;"	methods	line:22
potentiallyApplicable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def potentiallyApplicable(msym: MethodSymbol) = {$/;"	methods	line:661
pps_sub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sub = msig_sub.parameterPatterns$/;"	constants	line:498
pps_sup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sup = msig_sup.parameterPatterns$/;"	constants	line:499
prevGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val prevGroups = groups.get(msym.name).getOrElse(Nil)$/;"	constants	line:58
primType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val primType = primitives(objClass)$/;"	constants	line:683
primitives	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val primitives = Map[java.lang.Class[_], asm.Type]($/;"	constants	line:51
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def print(out: PrettyPrinter) {$/;"	methods	line:754
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:128
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:170
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:197
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:222
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:240
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:258
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:279
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:293
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:322
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:351
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:377
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:391
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:402
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:467
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:523
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:563
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:586
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:602
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:622
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:636
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:645
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:654
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:679
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:697
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:709
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:741
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def print(out: PrintStream) = this.synchronized {$/;"	methods	line:29
printOptBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printOptBody(out: PrettyPrinter, optBody: Option[Body]) = optBody match {$/;"	methods	line:184
printSep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSep(out: PrettyPrinter, asts: List[Node], sep: String) {$/;"	methods	line:82
printSepFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSepFunc(out: PrettyPrinter, asts: List[Node], sepfunc: (() => Unit)) {$/;"	methods	line:74
printc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printc(out: PrettyPrinter) {$/;"	methods	line:768
printdot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printdot(out: PrettyPrinter) {$/;"	methods	line:763
println	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def println(out: PrettyPrinter) {$/;"	methods	line:773
printsemiln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsemiln(out: PrettyPrinter) {$/;"	methods	line:531
printsp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsp(out: PrettyPrinter) {$/;"	methods	line:758
privateData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    private[this] val privateData = new mutable.HashMap[java.lang.Class[_], Any]()$/;"	constants	line:37
processOper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        protected def processOper(name: String) = {$/;"	methods	line:46
purgeNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val purgeNames = Set(mro.tail.map(_.name): _*)$/;"	constants	line:339
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:240
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:260
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:281
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:311
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor): Unit$/;"	methods	line:232
pushAnonymousBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAnonymousBlock($/;"	methods	line:934
pushExprValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValue(expr: in.Expr) {$/;"	methods	line:626
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toAsmTy: asm.Type, expr: in.Expr) {$/;"	methods	line:601
pushExprValueDowncastingTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValueDowncastingTo(toTy: Type.Ref, expr: in.Expr) {$/;"	methods	line:607
pushIntegerConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushIntegerConstant(value: Int) = value match {$/;"	methods	line:137
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:264
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:288
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:321
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:247
pushMethodArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushMethodArgs($/;"	methods	line:613
pushRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushRvalues(lvalue: Pattern.Anon, rvalue: in.Expr) {$/;"	methods	line:533
pushStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushStatement(stmt: in.Stmt) {$/;"	methods	line:829
pushSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushSym(sym: VarSymbol.Any, mvis: asm.MethodVisitor) = syms(sym).push(mvis)$/;"	methods	line:370
queue2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val queue2 = $/;"	constants	line:51
queued	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^            val queued = new mutable.Queue[ClassSymbol]()$/;"	constants	line:52
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rcvr = asm.Type.getObjectType(msym.clsName.internalName)$/;"	constants	line:104
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val rcvr = in.Var(Ast.LocalName(tvar), ())$/;"	constants	line:756
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val rcvr: PackratParser[out.Rcvr] = positioned($/;"	constants	line:351
reader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val reader = new FileReader(interFile, PagedSeq.fromReader(javaReader), 0)$/;"	constants	line:419
reassignLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reassignLvalue = positioned($/;"	constants	line:239
receiverAnonPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    def receiverAnonPattern: Pattern.AnonVar = Pattern.SubstdVar(receiverTy)$/;"	methods	line:8
receiverSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val receiverSummary = summarizeSymbolsInRcvr(summary, receiver)$/;"	constants	line:465
receiverTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val receiverTy: Type.Ref,$/;"	constants	line:5
redirect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def redirect(optName: Option[Name.Var], accessPath: AccessPath): AccessPath = {$/;"	methods	line:876
redirectedAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val redirectedAccessPath = redirect(Some(sym.name), accessPath)$/;"	constants	line:921
reflClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val reflClasses = config.reflectiveClasses(className)$/;"	constants	line:143
reflectiveClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def reflectiveClasses(name: Name.Qual) = {$/;"	methods	line:63
relBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relBase = positioned(ident ^^ out.RelBase)$/;"	constants	line:76
relDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDecl = positioned($/;"	constants	line:212
relDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDot = positioned($/;"	constants	line:78
relName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relName = relDot | relBase$/;"	constants	line:83
relName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val relName = in.RelBase(expr.name.name.text)$/;"	constants	line:560
relNameToRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def relNameToRelList(relName: in.RelName): List[String] = relName match {$/;"	methods	line:115
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val relPath = className.relPath + suffix + ext$/;"	constants	line:171
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def relPath: String = internalName$/;"	methods	line:36
relativeFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def relativeFiles(paths: List[File], ext: String)(name: Name.Class) = {$/;"	methods	line:51
remEntries	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val remEntries = otherEntries.filterNot { entry =>$/;"	constants	line:113
remaining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val remaining = msyms.drop(matching.length)$/;"	constants	line:1314
remove	/Users/niko/git/intervals-java/Harmonic/test.py	/^def remove(filenm):$/;"	function	line:475
remove_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def remove_all(self):$/;"	member	line:462
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:104
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:113
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:122
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:131
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:140
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:149
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:158
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:16
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:167
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:176
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:185
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:191
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:197
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:203
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:211
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:220
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:229
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:26
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:34
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:48
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:63
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:79
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^        def report(state: State, pos: Position) {$/;"	methods	line:93
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Error.scala	/^    def report(state: State, pos: Position): Unit$/;"	methods	line:11
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def report(pos: Position, msgKey: String, msgArgs: List[String]) = synchronized {$/;"	methods	line:18
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def report(pos: Position, msg: String, args: String*) {$/;"	methods	line:100
reported	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val reported = new mutable.HashSet[(MethodSymbol, MethodSymbol)]()$/;"	constants	line:124
reporter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    val reporter: Reporter$/;"	constants	line:10
representing	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Creates a new class representing the statements$/;"	classes	line:929
reqTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reqTypeRef = ":"~>typeRef$/;"	constants	line:260
requireLoadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    def requireLoadedOrLoadable(pos: Position, className: Name.Class) = {$/;"	methods	line:96
requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val requirement = positioned($/;"	constants	line:162
res	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^                val res = app.main() \/\/appArgs.toArray)$/;"	constants	line:63
resolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val resolve = new ResolveClassParams(className, this, cdecl.pattern)$/;"	constants	line:244
resolveAbsToQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveAbsToQual(relName: in.RelName): Option[Name.Qual] = {$/;"	methods	line:52
resolveAgainst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainst(ctxName: Name.Qual, nm: String) = {$/;"	methods	line:40
resolveAgainstClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstClass(clsName: Name.Class, nm: String): Option[Name.Class] = {$/;"	methods	line:31
resolveAgainstPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    protected[this] def resolveAgainstPackage(pkgName: Name.Package, nm: String): Name.Qual = {$/;"	methods	line:22
resolveAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveAnnotation(ann: in.Annotation) = withPosOf(ann, $/;"	methods	line:256
resolveBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBlock(tmpl: in.Block) = withPosOf(tmpl, {$/;"	methods	line:643
resolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveBody(body: in.Body) = withPosOf(body, $/;"	methods	line:654
resolveClassBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveClassBody(csym: ClassSymbol, cdecl: in.ClassDecl) = {$/;"	methods	line:27
resolveClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveClassDecl(cdecl: in.ClassDecl) = withPosOf(cdecl, {$/;"	methods	line:242
resolveClassHeader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^    def resolveClassHeader($/;"	methods	line:21
resolveDeclareVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveDeclareVarLvalue($/;"	methods	line:148
resolveDottedMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveDottedMemberName(relDot: in.RelDot) = withPosOf(relDot, {$/;"	methods	line:217
resolveExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveExpr(expr: in.Expr): out.Expr = withPosOf(expr, expr match {$/;"	methods	line:618
resolveField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveField(expr: in.Field) = withPosOf(expr, {$/;"	methods	line:593
resolveFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldDecl(className: Name.Class, decl: in.FieldDecl) = withPosOf(decl, {$/;"	methods	line:300
resolveFieldLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveFieldLvalue($/;"	methods	line:207
resolveImport	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveImport(imp: in.ImportDecl) = {        $/;"	methods	line:64
resolveIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveIntervalDecl(className: Name.Class, decl: in.IntervalDecl) = withPosOf(decl, {$/;"	methods	line:269
resolveLiteral	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLiteral(expr: in.Literal) = {$/;"	methods	line:634
resolveLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                val resolveLocal = new ResolveLvalue(this, lv)$/;"	constants	line:515
resolveLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveLvalue(lvalue: in.Lvalue): out.Lvalue = withPosOf(lvalue, lvalue match {$/;"	methods	line:135
resolveMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMember(className: Name.Class, mem: in.MemberDecl): out.MemberDecl = withPosOf(mem, {$/;"	methods	line:260
resolveMemberName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^    def resolveMemberName(relName: in.RelName) = withPosOf(relName, {$/;"	methods	line:223
resolveMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodCall(expr: in.MethodCall) = {$/;"	methods	line:605
resolveMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveMethodDecl(decl: in.MethodDecl) = withPosOf(decl, {$/;"	methods	line:278
resolveName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveName(relName: in.RelName): Ast.ClassName = withPosOf(relName, {$/;"	methods	line:120
resolveNewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveNewAnon(expr: in.NewAnon): out.NewAnon = withPosOf(expr, {$/;"	methods	line:536
resolveNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveNewCtor(expr: in.NewCtor): out.NewCtor = withPosOf(expr, {$/;"	methods	line:527
resolveOptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOptionalTypeRef(otref: in.OptionalParseTypeRef): out.OptionalResolveTypeRef = {$/;"	methods	line:436
resolveOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveOwner(owner: in.Owner): out.Owner = withPosOf(owner, {$/;"	methods	line:565
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val resolveParam = new ResolveMethodParams(this, decl.params)$/;"	constants	line:279
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveParam(param: in.Param): out.Param = withPosOf(param, param match {$/;"	methods	line:75
resolvePathExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathExpr(expr: in.PathExpr) = {$/;"	methods	line:614
resolvePathToClassName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToClassName(path: in.AstPath): Name.Class = {$/;"	methods	line:422
resolvePathToEither	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToEither(path: in.AstPath): EitherQualOr[out.AstPath] = withPosOfR(path, {$/;"	methods	line:322
resolvePathToPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathToPath(path: in.AstPath): out.AstPath = withPosOf(path, {$/;"	methods	line:411
resolvePathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolvePathTypeArg(targ: in.PathTypeArg): out.PathTypeArg = withPosOf(targ, {$/;"	methods	line:499
resolveRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRcvr(rcvr: in.Rcvr): out.Rcvr = withPosOf(rcvr, {$/;"	methods	line:598
resolveReassignVarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveReassignVarLvalue($/;"	methods	line:167
resolveRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRelDecl(decl: in.RelDecl) = withPosOf(decl, {$/;"	methods	line:309
resolveRelList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    private[this] def resolveRelList(relList: List[String]): List[Name.Qual] = relList match {$/;"	methods	line:88
resolveRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveRequirement(requirement: in.PathRequirement) = withPosOf(requirement, {$/;"	methods	line:292
resolveStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveStmts(stmts: List[in.Stmt]): List[out.Stmt] = stmts match {$/;"	methods	line:507
resolveToClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def resolveToClass(pos: Position, relList: List[String]): Option[Name.Class] = {$/;"	methods	line:105
resolveTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTuple(tuple: in.Tuple) = withPosOf(tuple, $/;"	methods	line:639
resolveTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTupleParam(tupleParam: in.TupleParam) = {$/;"	methods	line:80
resolveTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeArg(targ: in.TypeArg): out.TypeArg = withPosOf(targ, targ match {$/;"	methods	line:488
resolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeRef(tref: in.ParseTypeRef): out.ResolveTypeRef = withPosOf(tref, tref match {$/;"	methods	line:445
resolveTypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveTypeTypeArg(targ: in.TypeTypeArg): out.TypeTypeArg = withPosOf(targ, {$/;"	methods	line:493
resolveVarExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveVarExpr(expr: in.Var): out.Expr = withPosOf(expr, {$/;"	methods	line:559
resolveVarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        def resolveVarParam(varParam: in.VarParam) = withPosOf(varParam, {$/;"	methods	line:85
resolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var resolvedSource: Ast.Resolve.ClassDecl = null$/;"	local variables	line:40
rest	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def rest: FileReader =$/;"	methods	line:402
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val result = AccessField(thisAccessPath, fieldName.javaName, asmType)$/;"	constants	line:904
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val result = freshCounter$/;"	constants	line:175
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val result = loadedOrLoadable(className)$/;"	constants	line:97
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val result = new mutable.ListBuffer[out.Stmt]()$/;"	constants	line:375
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val result = expansions.firstSome(_.asClassName)$/;"	constants	line:107
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val result = func$/;"	constants	line:97
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            val result = new Future(inter, name) {$/;"	constants	line:120
resultAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val resultAsmTy = asm.Type.getType(resultClass)$/;"	constants	line:757
ret	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val ret = asmType(msym.msig.returnTy)$/;"	constants	line:103
retainPair	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^                def retainPair(pair: (String, SymTab.Entry)) = {$/;"	methods	line:50
returnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnClass = numericTypes(returnIndex)$/;"	constants	line:44
returnIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnIndex = Math.max($/;"	constants	line:37
returnResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def returnResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:842
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(data: MCallData) = data._2.returnTy$/;"	methods	line:923
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:849
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: MCallData) = ()$/;"	methods	line:887
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def returnTy(data: MCallData): Ty$/;"	methods	line:72
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnTy = Type.Class(returnClass)$/;"	constants	line:47
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val returnTy = tmpl.returnTref match {$/;"	constants	line:838
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val returnTy = (mdecl.returnTref, optBody) match {$/;"	constants	line:84
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    val returnTy: Type.Ref,$/;"	constants	line:4
rightAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val rightAsmTy = asm.Type.getType(rightClass)$/;"	constants	line:745
rightTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val rightTy = Type.Class(rightClass)$/;"	constants	line:46
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^               override def run(inlineInterval: Interval) = ()$/;"	methods	line:135
run	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^            def run(subinterval: Interval) = {$/;"	methods	line:143
rvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rvalues = srcPatterns.map(constructExprFromPattern)$/;"	constants	line:1067
sFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sFile = fileWithExtension(".s")$/;"	constants	line:179
sameLength	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def sameLength(lst1: List[_], lst2: List[_]) = (lst1.length == lst2.length)$/;"	methods	line:38
sanityCheckGroup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    private[this] def sanityCheckGroup($/;"	methods	line:109
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        private[this] def sep = if(async) ("{{", "}}") else ("{", "}")$/;"	methods	line:579
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val sep = "()[]{};@\\"\\'."$/;"	constants	line:32
set	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Array.java	/^    void set(int index, E value);$/;"	method	line:5
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromCompiledSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {}$/;"	methods	line:11
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    def setMethodGroups(groups: List[MethodGroup]) {$/;"	methods	line:87
setMethodGroups	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def setMethodGroups(groups: List[MethodGroup]): Unit$/;"	methods	line:35
set_compile_opts	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def set_compile_opts(self, opts):$/;"	member	line:410
slot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val slot = maxSlot$/;"	constants	line:347
sorted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val sorted = errors.toList.sortWith((e1, e2) => e1.pos < e2.pos)$/;"	constants	line:30
sourceExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val sourceExt = ".harm"$/;"	constants	line:11
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def sourceFiles(name: Name.Class) = relativeFiles(sourcePaths, sourceExt)(name)$/;"	methods	line:60
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^        val sourceFiles = config.sourceFiles(className)$/;"	constants	line:141
sourcePaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var sourcePaths = List(new File("."))$/;"	local variables	line:13
specialize	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def specialize(self, cmd):$/;"	member	line:413
stack	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^    private[this] var stack: List[ClassSymbol] = Nil$/;"	local variables	line:18
start_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def start_fragment(self, name):$/;"	function	line:290
stashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stashSlot = maxSlot$/;"	constants	line:362
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                val state = State(this, master, master, None)$/;"	constants	line:63
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^        val state = createState.copy(current = inter)$/;"	constants	line:18
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^                val state = new State(config, new Reporter(config))$/;"	constants	line:12
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                            val state = State(global, master, body, csym)$/;"	constants	line:46
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                            val state = State(global, master, byteCode, csym)$/;"	constants	line:66
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                            val state = State(global, master, create, csym)$/;"	constants	line:59
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^                            val state = State(global, master, header, csym)$/;"	constants	line:39
staticMethodDescFromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def staticMethodDescFromSym(msym: MethodSymbol): String = {$/;"	methods	line:102
staticSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val staticSuffix = "$Static"$/;"	constants	line:16
stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmt: PackratParser[out.Stmt] = positioned($/;"	constants	line:381
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val stmtVisitor = new StatementVisitor(accessMap, IntConstant(verInt + 1), mvis)$/;"	constants	line:1359
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor(accessMap, nextMro, mvis)$/;"	constants	line:1205
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor(derivedAccessMap, IntConstant(1), tmplmvis)$/;"	constants	line:992
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(accessMap, IntConstant(0), mvis)$/;"	constants	line:1126
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(accessMap, IntConstant(0), mvis)$/;"	constants	line:1287
stmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmts: PackratParser[List[out.Stmt]] = ($/;"	constants	line:391
store	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def store(lvalue: in.Lvalue, rvalue: in.Expr) {$/;"	methods	line:505
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:267
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:293
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:325
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:250
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:271
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:297
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:334
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor): Unit$/;"	methods	line:253
storeSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def storeSym(sym: VarSymbol.Any) =$/;"	methods	line:591
storeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeVar(index: Int, asmTy: asm.Type) = {$/;"	methods	line:119
strs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            val strs = name.parts.zip(args).map { case (p, a) =>$/;"	constants	line:673
subinterval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def subinterval[R]($/;"	methods	line:112
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = lvalues$/;"	methods	line:364
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns = params$/;"	methods	line:340
subpatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def subpatterns: List[AstPattern]$/;"	methods	line:315
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val subst = pps_sub.zip(pps_sup).foldLeft(Subst.empty)(addOverrideSubst)$/;"	constants	line:500
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:695
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:662
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = Subst(Path.This -> sym.name.toPath)$/;"	constants	line:616
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:645
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^            val subst = Subst(Path.This -> base.toPath)$/;"	constants	line:29
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(P1: Path.Ref): Iterable[Path.Ref] = {$/;"	methods	line:259
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(item: T): Iterable[T]$/;"	methods	line:61
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(ty: Type.Ref) = ty match {$/;"	methods	line:281
summarizeSymbolsInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInExpr(summary: SymbolSummary, expr: in.Expr): SymbolSummary = {$/;"	methods	line:449
summarizeSymbolsInOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInOwner(summary: SymbolSummary, owner: in.Owner): SymbolSummary = {$/;"	methods	line:442
summarizeSymbolsInRcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInRcvr(summary: SymbolSummary, rcvr: in.Rcvr): SymbolSummary = {$/;"	methods	line:434
summarizeSymbolsInStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmt(summary: SymbolSummary, stmt: in.Stmt): SymbolSummary = {$/;"	methods	line:474
summarizeSymbolsInStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmts(stmts: List[in.Stmt]) = {$/;"	methods	line:492
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:872
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1171
summaryExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryExpr = summarizeSymbolsInExpr(summary, expr)$/;"	constants	line:483
summaryTmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryTmpl = summarizeSymbolsInStmts(tmpl.stmts)$/;"	constants	line:453
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val superClassNames = csym.superClassNames(state).toList$/;"	constants	line:1416
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def superClassNames = {$/;"	methods	line:28
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def superClassNames = Nil$/;"	methods	line:8
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val superClassNames(sym: ClassFromReflection) = {$/;"	constants	line:28
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var superClassNames: List[Name.Class] = Nil$/;"	local variables	line:33
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def superClassNames: List[Name.Class]$/;"	methods	line:47
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def superClassNames(sym: ClassFromReflection) = {$/;"	methods	line:65
superClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val superClasses = opt("extends"~>comma1(relName)) ^^ {$/;"	constants	line:118
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val superCsyms = superNames.map(state.classes)$/;"	constants	line:27
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superCsyms = superNames.map(state.classes)$/;"	constants	line:74
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superCsyms = csym.superClassNames(state).map(state.classes)$/;"	constants	line:40
superCsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        val superCsyms = csym.superClassNames.map(state.classes)$/;"	constants	line:26
superHeaderPasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveHeader.scala	/^        val superHeaderPasses = superCsyms.flatMap(_.resolveHeader)$/;"	constants	line:27
superLists	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superLists = superCsyms.map(forSym)$/;"	constants	line:75
superNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^            val superNames = csym.superClassNames(state)$/;"	constants	line:26
superNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodResolutionOrder.scala	/^                val superNames = csym.superClassNames(state)$/;"	constants	line:73
superSymTab	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        var superSymTab = mergeSuperSymbolTables(csym)$/;"	local variables	line:68
superSymtabs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val superSymtabs = superCsyms.map(constructSymbolTable)$/;"	constants	line:41
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: VSym$/;"	methods	line:329
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val sym = varPat.sym$/;"	constants	line:513
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sym = new VarSymbol.Local(Modifier.Set.empty, name, ty)$/;"	constants	line:1062
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val sym = lookupFieldOrError(typedBase.ty, name, None)$/;"	constants	line:246
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = env.locals(localName)$/;"	constants	line:230
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(mod, name.name, ty)$/;"	constants	line:414
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val sym = new VarSymbol.Local(modifiers, name.name, ty)$/;"	constants	line:199
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val sym = Symbol.errorLocalVar(Name.LocalVar(name), None)$/;"	constants	line:221
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = env.lookupThis$/;"	constants	line:857
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = new VarSymbol.Local(Modifier.Set.empty, name, toExpr.ty)$/;"	constants	line:503
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def sym: VarSymbol.Any$/;"	methods	line:18
symTab	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^        val symTab = constructSymbolTable(csym)$/;"	constants	line:28
sym_pat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_pat = state.csym(name_pat)$/;"	constants	line:360
sym_val	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_val = state.csym(name_val)$/;"	constants	line:359
symbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    \/** The class symbol being currently processed, if any. *\/$/;"	classes	line:88
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols = List(sym)$/;"	methods	line:332
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols = subpatterns.flatMap(_.symbols)$/;"	methods	line:318
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[VSym]$/;"	methods	line:311
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/\/ ___ Loading and resolving class symbols ______________________________$/;"	classes	line:85
symbolsDeclaredInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsDeclaredInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:428
symbolsReassignedInLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsReassignedInLvalue(local: in.Lvalue): List[VarSymbol.Any] = local match {$/;"	methods	line:422
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val syms = new mutable.HashMap[VarSymbol.Any, AccessPath]()$/;"	constants	line:343
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val syms = sym.cls.getConstructors.map(ctorSymbol(sym.name)).toList$/;"	constants	line:103
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targ = typeArg(Name.ArrayElem, ty.getGenericComponentType).get$/;"	constants	line:67
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val targ = typeArg(Name.ArrayElem, gat.getGenericComponentType).get$/;"	constants	line:31
targs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val targs = tparams.zip(ty.getActualTypeArguments).flatMap(typeArg)$/;"	constants	line:80
targs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val targs = tparams.zip(pt.getActualTypeArguments).flatMap(typeArg)$/;"	constants	line:44
tcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tcRel = ($/;"	constants	line:183
templateClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val templateClass = classOf[harmonic.lang.Block[_, _]]$/;"	constants	line:76
templateTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def templateTy($/;"	methods	line:95
test	/Users/niko/git/intervals-java/Harmonic/Makefile	/^test: compile$/;"	targets	line:35
test_file	/Users/niko/git/intervals-java/Harmonic/test.py	/^def test_file(filenm):$/;"	function	line:574
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:100
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def text: String$/;"	methods	line:133
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            val text = name.name.text$/;"	constants	line:171
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$Impl.class: a Java class that implements Foo, suitable$/;"	classes	line:24
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    \/** Base class that captures the basic pattern of computing$/;"	classes	line:40
theOldCollegeTry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def theOldCollegeTry(lvalue: in.Lvalue): Type.Ref = lvalue match {$/;"	methods	line:476
thisAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisAccessPath = derivedAccessMap.pathToFreshSlot(asmClassType(cname))$/;"	constants	line:874
thisCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def thisCsym = $/;"	methods	line:141
thisField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            def thisField(memberName: Name.Member) = {$/;"	methods	line:323
thisPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSignature.scala	/^    def thisPattern: Pattern.Var = Pattern.Var(Name.ThisLocal, receiverTy)$/;"	methods	line:9
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(asmType(Type.Class(className, List()))) \/\/ reserve this ptr$/;"	constants	line:1117
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(asmType(Type.Class(csym.name, List()))) \/\/ reserve this ptr$/;"	constants	line:1283
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(asmType(Type.Class(csym.name, List())))$/;"	constants	line:1338
thisSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisSym = new VarSymbol.Local(Modifier.Set.empty, Name.ThisLocal, thisTy)$/;"	constants	line:22
thisTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val thisTy = Type.Class(csym.name, List())$/;"	constants	line:21
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Byte l, Double r) { return l * r; }$/;"	method	line:237
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Byte r) { return l * r; }$/;"	method	line:312
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Double r) { return l * r; }$/;"	method	line:327
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Float r) { return l * r; }$/;"	method	line:324
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Integer r) { return l * r; }$/;"	method	line:318
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Long r) { return l * r; }$/;"	method	line:321
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Double l, Short r) { return l * r; }$/;"	method	line:315
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Float l, Double r) { return l * r; }$/;"	method	line:309
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Integer l, Double r) { return l * r; }$/;"	method	line:273
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Long l, Double r) { return l * r; }$/;"	method	line:291
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Double times(Short l, Double r) { return l * r; }$/;"	method	line:255
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Byte l, Float r) { return l * r; }$/;"	method	line:234
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Byte r) { return l * r; }$/;"	method	line:294
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Float r) { return l * r; }$/;"	method	line:306
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Integer r) { return l * r; }$/;"	method	line:300
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Long r) { return l * r; }$/;"	method	line:303
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Float l, Short r) { return l * r; }$/;"	method	line:297
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Integer l, Float r) { return l * r; }$/;"	method	line:270
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Long l, Float r) { return l * r; }$/;"	method	line:288
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Float times(Short l, Float r) { return l * r; }$/;"	method	line:252
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Byte r) { return l * r; }$/;"	method	line:222
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Integer r) { return l * r; }$/;"	method	line:228
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Byte l, Short r) { return l * r; }$/;"	method	line:225
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Byte r) { return l * r; }$/;"	method	line:258
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Integer r) { return l * r; }$/;"	method	line:264
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Integer l, Short r) { return l * r; }$/;"	method	line:261
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Byte r) { return l * r; }$/;"	method	line:240
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Integer r) { return l * r; }$/;"	method	line:246
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Integer times(Short l, Short r) { return l * r; }$/;"	method	line:243
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Byte l, Long r) { return l * r; }$/;"	method	line:231
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Integer l, Long r) { return l * r; }$/;"	method	line:267
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Byte r) { return l * r; }$/;"	method	line:276
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Integer r) { return l * r; }$/;"	method	line:282
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Long r) { return l * r; }$/;"	method	line:285
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Long l, Short r) { return l * r; }$/;"	method	line:279
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    public static Long times(Short l, Long r) { return l * r; }$/;"	method	line:249
tmpVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def tmpVarName(fromExpr: Ast.Node) = {$/;"	methods	line:365
tmplmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplmvis = tmplwr.cvis.visitMethod($/;"	constants	line:971
tmplwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplwr = new ClassWriter(name, noSuffix)$/;"	constants	line:939
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(context.toPackage(pkg), component)$/;"	methods	line:116
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package) = Name.Class(pkg, nm)$/;"	methods	line:109
toClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toClass(pkg: Name.Package): Name.Class$/;"	methods	line:101
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = ""$/;"	methods	line:18
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = base.toInternalPrefix + name + "\/"$/;"	methods	line:27
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix = internalName + "$"$/;"	methods	line:38
toInternalPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toInternalPrefix: String$/;"	methods	line:8
toList	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        def toList = All.filter(contains)$/;"	methods	line:19
toOptFieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptFieldSymbol(MemName: Name.Member) = {$/;"	methods	line:126
toOptMethodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptMethodSymbol(MthdName: Name.Method) = {$/;"	methods	line:46
toOptSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LowerMember.scala	/^    def toOptSymbol = inMemberDecl match {$/;"	methods	line:30
toOptTypeArgOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toOptTypeArgOf(csym: ClassSymbol)(targ: in.TypeArg) = {$/;"	methods	line:308
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(context.toPackage(pkg), component)$/;"	methods	line:117
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package) = Name.Subpackage(pkg, nm)$/;"	methods	line:110
toPackage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPackage(pkg: Name.Package): Name.Package$/;"	methods	line:102
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toPath(path: in.AstPath): Path.Ref = {$/;"	methods	line:274
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPath = Path.Base(this)$/;"	methods	line:102
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Base(sym.name)$/;"	methods	line:23
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Field(base.toPath, sym.name)$/;"	methods	line:27
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath: Path.Ref$/;"	methods	line:20
toPatternAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPatternAnon(pat: AstPattern): Pattern.Anon = pat match {$/;"	methods	line:930
toPatternRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPatternRef(pat: Param): Pattern.Ref = pat match {$/;"	methods	line:925
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = ""$/;"	methods	line:19
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = base.toPrefix + name + "."$/;"	methods	line:28
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix = base.toPrefix + name + "."$/;"	methods	line:39
toPrefix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPrefix: String$/;"	methods	line:9
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, kind, right)$/;"	methods	line:278
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, rel, right)$/;"	methods	line:238
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:487
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, typeRef)$/;"	methods	line:480
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), tref, name)$/;"	methods	line:349
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s: %s".format(annotations.mkString(" "), tref, name)$/;"	methods	line:375
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s = %s".format(lvalue, rvalue)$/;"	methods	line:620
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(context, component)$/;"	methods	line:114
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(owner, name)$/;"	methods	line:652
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:451
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s: %s".format(name, body)$/;"	methods	line:739
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s[%s]".format(className, typeArgs.mkString(", "))$/;"	methods	line:455
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s[%s]".format(path, typeArgs.mkString(", "))        $/;"	methods	line:443
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(exprs.mkString(", "))$/;"	methods	line:559
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(subpatterns.mkString(", "))$/;"	methods	line:320
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(types.mkString(", "))$/;"	methods	line:465
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)(%s)".format(typeRef, expr)$/;"	methods	line:600
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<(Void)null>"$/;"	methods	line:727
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<err:%s>".format(name)$/;"	methods	line:503
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<infer>"$/;"	methods	line:431
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<this>"$/;"	methods	line:733
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[%s]".format(name)$/;"	methods	line:291
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[class %s%s]".format($/;"	methods	line:166
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[interval %s(%s)]".format(name, optParent)$/;"	methods	line:195
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[method %s]".format(name)$/;"	methods	line:216
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s -> %s".format(fromName, toName)$/;"	methods	line:149
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s.*".format(fromName)$/;"	methods	line:155
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s { ... }".format(tref, arg)$/;"	methods	line:707
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s".format(tref, arg)$/;"	methods	line:695
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "null"$/;"	methods	line:721
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "super"$/;"	methods	line:662
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "{...}"$/;"	methods	line:522
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = Type.Null.toString$/;"	methods	line:461
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:389
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:400
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:507
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:642
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:666
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:786
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:790
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:799
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:803
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:807
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:811
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = nm$/;"	methods	line:106
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = obj.toString$/;"	methods	line:614
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = owner + "." + name$/;"	methods	line:512
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString        $/;"	methods	line:439
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = path.toString$/;"	methods	line:635
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:581
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:672
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:37
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/MethodSymbol.scala	/^    override def toString = "MethodSymbol(%s, %x)".format(name, System.identityHashCode(this))$/;"	methods	line:33
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Modifier.scala	/^        override def toString = "ModSet(%s)".format(toList.mkString(", "))$/;"	methods	line:16
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "(%s.%s)".format(className, text)$/;"	methods	line:110
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = "<root>"$/;"	methods	line:20
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:29
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = base.toPrefix + name$/;"	methods	line:40
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = parts.mkString("", "()", "()")$/;"	methods	line:90
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = text$/;"	methods	line:127
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            override def toString = "operator '%s'".format(chars)$/;"	methods	line:24
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = base.toString + f.toString$/;"	methods	line:11
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = v.toString$/;"	methods	line:8
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "->"$/;"	methods	line:20
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "="$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "inlineSubOf"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "locks"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsRd"$/;"	methods	line:34
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsWr"$/;"	methods	line:30
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "subOf"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":>"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = "<:"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, ty)$/;"	methods	line:29
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s.%s".format(path, typeVar)$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "(%s)".format(typeRefs.mkString(", "))$/;"	methods	line:18
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "Null"$/;"	methods	line:21
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = $/;"	methods	line:13
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    override def toString = "%s(%s, %x)".format($/;"	methods	line:21
toSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val toSym = state.csym(toName)$/;"	constants	line:77
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ()$/;"	methods	line:844
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ()$/;"	methods	line:882
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toTy(ty: Type.Ref) = ty$/;"	methods	line:918
toTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def toTy(ty: Type.Ref): Ty$/;"	methods	line:67
toType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def toType: Type.Class = Type.Class(name, List())$/;"	methods	line:42
toTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toTypeRef(tref: in.ResolveTypeRef): Type.Ref = {$/;"	methods	line:284
toTypedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def toTypedPath(path: in.AstPath): Path.Typed = {$/;"	methods	line:219
token	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def token: Parser[Token] = ( $/;"	methods	line:39
tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val tokens = new parser.lexical.Scanner(reader)$/;"	constants	line:420
tops	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val tops = group.msyms.foldLeft(group.msyms) {$/;"	constants	line:121
tparams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val tparams = cls.getTypeParameters.toList.map(tv => Name.Member(className, tv.getName))$/;"	constants	line:79
tparams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val tparams = cls.getTypeParameters.toList.map(tv => Name.Member(className, tv.getName))$/;"	constants	line:43
trace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def trace(cvis: asm.ClassVisitor) = {$/;"	methods	line:175
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:845
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = ()$/;"	methods	line:883
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def trefTy(tref: TR) = tref.ty$/;"	methods	line:919
trefTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def trefTy(tref: TR): Ty$/;"	methods	line:69
tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tuple = positioned($/;"	constants	line:324
tupleBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleBlkParam = positioned($/;"	constants	line:227
tupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleLvalue = positioned($/;"	constants	line:236
tupleMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleMthdParam = positioned($/;"	constants	line:218
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:847
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:885
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = Type.Tuple(tys)$/;"	methods	line:921
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def tupleTy(tys: List[Ty]): TyTuple$/;"	methods	line:70
tupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleType = positioned($/;"	constants	line:264
tvar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val tvar = Name.LocalVar(tmpVarName(expr))$/;"	constants	line:755
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = body.stmts.last.ty$/;"	methods	line:738
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = errTy$/;"	methods	line:502
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = path.ty$/;"	methods	line:634
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = returnTy(data)$/;"	methods	line:671
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = rvalue.ty$/;"	methods	line:619
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = toTy(path.ty)$/;"	methods	line:516
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = trefTy(typeRef)$/;"	methods	line:598
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = tupleTy(exprs.map(_.ty))$/;"	methods	line:561
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:330
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:508
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = vsymTy(sym)$/;"	methods	line:643
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:312
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:87
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: TyTuple = tupleTy(subpatterns.map(_.ty))$/;"	methods	line:316
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = tref match {$/;"	constants	line:194
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = tref match {$/;"	constants	line:410
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = Type.Class(Name.Class(expr.obj.getClass), List())$/;"	constants	line:623
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:791
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = toTypeRef(expr.typeRef)$/;"	constants	line:862
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val ty = (decl.tref, optBody) match {$/;"	constants	line:120
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty = sym.ty$/;"	methods	line:24
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty: Type.Ref$/;"	methods	line:19
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        lazy val ty = {$/;"	constants	line:28
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Ref$/;"	methods	line:8
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Tuple = Type.Tuple(patterns.map(_.ty))$/;"	methods	line:26
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def ty(t: Type.Ref): Type.Ref = t match {$/;"	methods	line:21
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:9
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/VarSymbol.scala	/^    val ty: Type.Ref$/;"	constants	line:19
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c[...]` must be class type:$/;"	classes	line:480
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a.b.c` could be path or class type:$/;"	classes	line:450
type	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ResolveBody.scala	/^            \/\/ `a` must be class type:$/;"	classes	line:474
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeArg(pair: (Name.Member, reflect.Type)): Option[Type.TypeArg] = pair match {$/;"	methods	line:47
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeArg: PackratParser[out.TypeArg] = typeTypeArg | pathTypeArg$/;"	constants	line:276
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def typeArg(pair: (Name.Member, reflect.Type)): Option[Type.TypeArg] = pair match {$/;"	methods	line:11
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def typeArg(targ: Type.Arg): Type.Arg = targ match {$/;"	methods	line:28
typeArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typeArgs = inTypeArgs.flatMap(toOptTypeArgOf(csym))$/;"	constants	line:302
typeArgsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typeArgsAreEquatable(targ1: Type.Arg, targ2: Type.Arg): Boolean = {$/;"	methods	line:395
typeOfPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typeOfPath(path: Path.Ref) = typedPath(path).ty$/;"	methods	line:251
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    private[this] def typeRef(ty: reflect.Type): Type.Ref = ty match {$/;"	methods	line:60
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeRef: PackratParser[out.TR] = constrainedType | pathType | tupleType$/;"	constants	line:262
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def typeRef(ty: reflect.Type): Type.Ref = ty match {$/;"	methods	line:24
typeT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val typeT = Type.Var(Path.This, Name.Member(iterableTy.name, "T"))$/;"	constants	line:199
typeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeTypeArg = positioned($/;"	constants	line:278
typeVarBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def typeVarBounds(tyVar: Type.Var) = {$/;"	methods	line:288
typedBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val typedBase = typedPath(base)$/;"	constants	line:245
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typedPath(path: Path.Ref): Path.Typed = path match {$/;"	methods	line:232
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val typedPath = toTypedPath(path)$/;"	constants	line:289
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * means that we remove redundant class types; i.e., if $/;"	classes	line:331
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * type variables.  It does not return supertypes of class types. *\/$/;"	classes	line:322
types	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * type variables.  It does not return supertypes of class types. *\/$/;"	classes	line:327
typesAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typesAreEquatable(ty1: Type.Ref, ty2: Type.Ref): Boolean = {$/;"	methods	line:431
typesAreEquatable1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typesAreEquatable1(pair: (Type.Ref, Type.Ref)): Boolean = {$/;"	methods	line:409
ubs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^            val ubs = wt.getUpperBounds$/;"	constants	line:50
ubs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val ubs = wt.getUpperBounds$/;"	constants	line:14
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonTuple) = Some(anon.patterns)$/;"	methods	line:31
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonVar) = Some(anon.ty)$/;"	methods	line:21
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def undent() {$/;"	methods	line:27
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def undent(): Unit$/;"	methods	line:5
unknown	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    val unknown = new Position() {$/;"	constants	line:18
upperBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def upperBoundType(ty: Type.Ref) = new Bounder(TcSub).compute(ty)$/;"	methods	line:323
usage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def usage(err: PrintStream) {$/;"	methods	line:26
useReflection	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var useReflection = true$/;"	local variables	line:23
v	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                val v = cls.getConstructor().newInstance()$/;"	constants	line:43
vConstructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vConstructors = List[MethodSymbol]()$/;"	local variables	line:10
vFields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vFields = List[VarSymbol.Field]()$/;"	local variables	line:13
vMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vMethods = List[MethodSymbol]()$/;"	local variables	line:12
vModifiers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vModifiers = Modifier.Set.empty$/;"	local variables	line:9
vSuperClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vSuperClassNames = List[Name.Qual]()$/;"	local variables	line:11
vVarMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    private[this] var vVarMembers = List[SymTab.Entry]()$/;"	local variables	line:14
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^    public R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^    R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^  public String value();$/;"	method	line:4
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^    public Requirement[] value();$/;"	method	line:4
varBlkParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varBlkParam = positioned($/;"	constants	line:230
varIdent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varIdent = ident | "this"$/;"	constants	line:85
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromClassFile.scala	/^    def varMembers = {$/;"	methods	line:33
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromErroneousSource.scala	/^    def varMembers = Nil$/;"	methods	line:12
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromReflection.scala	/^    lazy val varMembers = {$/;"	constants	line:16
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassFromSource.scala	/^    var varMembers: List[SymTab.Entry] = Nil$/;"	local variables	line:35
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^    def varMembers: List[SymTab.Entry]$/;"	methods	line:68
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val varMembers = csym.cls.getDeclaredFields.map(fieldSymTabEntry(csym)).toList$/;"	constants	line:79
varMembers	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def varMembers(csym: ClassFromReflection) = {$/;"	methods	line:77
varMthdParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varMthdParam = positioned($/;"	constants	line:221
varName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varName = relBase | "("~>relName<~")"$/;"	constants	line:88
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = List(ty)        $/;"	methods	line:17
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = patterns.flatMap(_.varTys)$/;"	methods	line:27
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys: List[Type.Ref]$/;"	methods	line:9
version	/Users/niko/git/intervals-java/Harmonic/src/harmonic/Launch.scala	/^    val version = "1.0"$/;"	constants	line:11
visitMethodWithMro	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitMethodWithMro($/;"	methods	line:1235
visitPlainMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def visitPlainMethod($/;"	methods	line:1213
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ClassSymbol.scala	/^            val visited = new mutable.HashSet[ClassSymbol]()$/;"	constants	line:53
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val visited = new mutable.HashSet[T]()$/;"	constants	line:43
voidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidClass = classOf[java.lang.Void]$/;"	constants	line:73
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidTy = Type.Class(voidClass)$/;"	constants	line:85
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:846
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(unit: VSym) = ()$/;"	methods	line:884
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def vsymTy(vsym: VSym) = vsym.ty$/;"	methods	line:920
vsymTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def vsymTy(vsym: VSym): Ty$/;"	methods	line:68
wcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val wcRel = ($/;"	constants	line:177
we	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^                    \/\/ Check that we got (at least) the class we expected to find:$/;"	classes	line:121
while_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void while_($/;"	method	line:59
will	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * onto the bytecode stack.  The class will have fields$/;"	classes	line:931
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Returns an access map for a method-local class with$/;"	classes	line:857
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Global.scala	/^    \/** True if a class with the name `className` has been$/;"	classes	line:87
withCurCsym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def withCurCsym(csym: ClassFromSource) = new State(global, master, current, csym)$/;"	methods	line:94
withCurrent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/State.scala	/^    def withCurrent(inter: Interval): AnyState$/;"	methods	line:93
withPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOf[P <: Positional, Q <: Product with Positional](from: P, to: Q): Q = {$/;"	methods	line:16
withPosOfOpt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfOpt[P <: Positional, Q <: Product with Positional](from: P, to: Option[Q]): Option[Q] = {$/;"	methods	line:27
withPosOfR	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOfR[P <: Positional, Q, R <: Product with Positional](from: P, to: Either[Q, R]): Either[Q, R] = {$/;"	methods	line:31
withStashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def withStashSlot(func: (Int => Unit)) {$/;"	methods	line:361
withSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def withSuffix(suffix: String) = Class(base, name + suffix)$/;"	methods	line:41
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, implSuffix)$/;"	constants	line:1434
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, noSuffix)$/;"	constants	line:1413
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, staticSuffix)$/;"	constants	line:1458
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def write(fmt: String, args: Any*) {$/;"	methods	line:30
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def write(fmt: String, args: Any*): Unit$/;"	methods	line:6
writeClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeClassSymbol(csym: ClassFromSource) = {$/;"	methods	line:1480
writeEmptyCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeEmptyCtor($/;"	methods	line:1385
writeForwardingMethodIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethodIfNeeded($/;"	methods	line:1090
writeForwardingMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethods($/;"	methods	line:1143
writeImplClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeImplClass(csym: ClassFromSource) {$/;"	methods	line:1433
writeInterClassInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterClassInterface(csym: ClassFromSource) {$/;"	methods	line:1412
writeMethodInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMethodInterface($/;"	methods	line:1258
writeMroMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeMroMethodImpl($/;"	methods	line:1331
writePlainToMroDispatch	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writePlainToMroDispatch($/;"	methods	line:1276
writeStaticClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticClass(csym: ClassFromSource) {$/;"	methods	line:1457
writeStaticMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeStaticMethodImpl($/;"	methods	line:1180
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def writeln(fmt: String, args: Any*) {$/;"	methods	line:37
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def writeln(fmt: String, args: Any*): Unit$/;"	methods	line:7
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val writer = new java.io.FileWriter(sFile)$/;"	constants	line:182
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val writer = new asm.ClassWriter(asm.ClassWriter.COMPUTE_MAXS | asm.ClassWriter.COMPUTE_FRAMES)$/;"	constants	line:199
