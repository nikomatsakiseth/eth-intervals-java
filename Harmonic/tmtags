!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
%Gen.java	/Users/niko/git/intervals-java/Harmonic/Makefile	/^%Gen.java: %Gen.py$/;"	targets	line:25
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^public interface AsyncBlock<R, A> extends Block<R, A> {$/;"	interface	line:3
A	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^public interface Block<R, A> {$/;"	interface	line:3
AVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AVar = Name.Var("A")$/;"	constants	line:76
AbsName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed case class AbsName(qualName: Name.Qual) extends PkgName {$/;"	classes	line:682
Abstract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^public @interface Abstract {$/;"	interface	line:3
AccessField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessField($/;"	classes	line:243
AccessIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessIndex($/;"	classes	line:213
AccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class AccessMap(val context: Name.Qual)$/;"	classes	line:278
AccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed abstract class AccessPath {$/;"	classes	line:176
AccessVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class AccessVar($/;"	classes	line:193
Annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Annotation($/;"	classes	line:269
Anon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Anon {$/;"	traits	line:7
AnonTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonTuple extends Anon {$/;"	traits	line:24
AnonVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed trait AnonVar extends Anon {$/;"	traits	line:16
Application	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^public interface Application {$/;"	interface	line:3
Arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Arg$/;"	classes	line:29
ArrayElem	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayElem = Var("E")$/;"	constants	line:71
ArrayQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ArrayQual = Qual("inter.lang.Array")$/;"	constants	line:70
Assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Assign(lvalue: Local, rvalue: Expr) $/;"	classes	line:540
Ast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^abstract class Ast {$/;"	classes	line:10
AstPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait AstPath extends Node {$/;"	traits	line:432
AsyncBlockQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val AsyncBlockQual = Qual(classOf[inter.lang.AsyncBlock[_, _]])$/;"	constants	line:74
AtomicExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait AtomicExpr extends LowerExpr$/;"	traits	line:480
Base	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Base(v: Name.Var) extends Ref {$/;"	classes	line:7
Block	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Block($/;"	classes	line:494
BlockQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val BlockQual = Qual(classOf[inter.lang.Block[_, _]])$/;"	constants	line:73
Body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Body(stmts: List[Stmt]) extends Node {$/;"	classes	line:444
Bounder	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Bounder(Rel: TcRel) extends TransitiveCloser[Type.Ref] {$/;"	classes	line:216
BoxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class BoxedArray(accessMap: AccessMap)$/;"	classes	line:305
ByteCode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^case class ByteCode(state: CompilationState) {$/;"	classes	line:23
CLASSPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	macro	line:10
CLASSPATH=$(JARPATH)	/Users/niko/git/intervals-java/Harmonic/Makefile	/^CLASSPATH=$(JARPATH):bin$/;"	targets	line:10
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Symbol.Class$/;"	types	line:750
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:707
CSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type CSym = Unit$/;"	types	line:728
CallPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class CallPart(ident: String, arg: NE) extends Node {$/;"	classes	line:570
Cast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Cast(expr: NE, typeRef: TypeRef, ty: Ty) extends AtomicExpr {$/;"	classes	line:522
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    abstract class Class($/;"	classes	line:23
Class	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Class(name: Name.Qual, typeArgs: List[Type.Arg]) extends Ref {$/;"	classes	line:14
ClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassDecl($/;"	classes	line:132
ClassFromClassFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class ClassFromClassFile($/;"	classes	line:45
ClassFromErroroneousSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class ClassFromErroroneousSource($/;"	classes	line:36
ClassFromSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class ClassFromSource($/;"	classes	line:103
ClassFromReflection	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class ClassFromReflection($/;"	classes	line:83
ClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ClassType(className: PN, typeArgs: List[TypeArg]) extends TypeRef {$/;"	classes	line:395
ClassWriter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class ClassWriter(qualName: Name.Qual, suffix: String) $/;"	classes	line:120
CompUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class CompUnit($/;"	classes	line:91
CompilationFailed	/Users/niko/git/intervals-java/Harmonic/test.py	/^class CompilationFailed(Exception):$/;"	class	line:190
DEBUGLOGS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^DEBUGLOGS=..\/debug-logs$/;"	macro	line:14
DeclPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class DeclPart(ident: String, param: TupleParam) extends Node {$/;"	classes	line:181
Env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^case class Env($/;"	classes	line:21
Equater	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    class Equater extends TransitiveCloser[Path.Ref] {$/;"	classes	line:194
Error	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    case class Error(pos: Position, msgKey: String, msgArgs: List[String]) {$/;"	classes	line:8
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = LowerExpr$/;"	types	line:748
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ParseExpr$/;"	types	line:705
Expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Expr = ParseExpr$/;"	types	line:726
ExtendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    class ExtendedIterable[E](iterable: Iterable[E]) {$/;"	classes	line:18
ExtendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    sealed case class ExtendedMethodVisitor(mvis: asm.MethodVisitor) {$/;"	classes	line:73
FailedException	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            case class FailedException() extends Exception$/;"	classes	line:458
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Field(owner: NE, name: VarName, sym: VSym, ty: Ty) extends LowerExpr {$/;"	classes	line:561
Field	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class Field(base: Path.Ref, f: Name.Var) extends Ref {$/;"	classes	line:10
FieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class FieldDecl($/;"	classes	line:227
FieldId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    case class FieldId(clsName: Name.Qual, methodName: Name.Method) extends MemberId$/;"	classes	line:205
FileReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class FileReader(interFile: File, seq: PagedSeq[Char], off: Int) extends PagedSeqReader(seq, off) {$/;"	classes	line:368
Foo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * Given a class Foo, the following class files are generated:$/;"	classes	line:16
FragmentFile	/Users/niko/git/intervals-java/Harmonic/test.py	/^class FragmentFile(object):$/;"	class	line:210
GENERATEDJAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDJAVA=$(subst Gen.py,Gen.java,${GENERATEDPY})$/;"	macro	line:9
GENERATEDPY	/Users/niko/git/intervals-java/Harmonic/Makefile	/^GENERATEDPY=$(wildcard src\/inter\/compiler\/*Gen.py)$/;"	macro	line:8
GatherOverrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^case class GatherOverrides(state: CompilationState) {$/;"	classes	line:12
HPROFOPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
HPROFOPTS=-agentlib	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	targets	line:12
HlLexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    class HlLexical extends StdLexical with HlTokens {$/;"	classes	line:28
HlTokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    trait HlTokens extends StdTokens {$/;"	traits	line:22
ImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpThis(ty: Ty)$/;"	classes	line:629
ImpVoid	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImpVoid(ty: Ty)$/;"	classes	line:624
ImportAll	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportAll($/;"	classes	line:126
ImportDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class ImportDecl extends Node$/;"	classes	line:117
ImportOne	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class ImportOne($/;"	classes	line:119
InScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InScope(env: Env) {$/;"	classes	line:318
InScopeStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    class InScopeStmt(env: Env, stmts: ListBuffer[out.Stmt]) extends InScope(env) {$/;"	classes	line:430
InferredTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class InferredTypeRef() extends OptionalTypeRef {$/;"	classes	line:365
InitMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val InitMethod = Method(List("<init>"))$/;"	constants	line:80
Interval	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Interval.java	/^public interface Interval {$/;"	interface	line:3
IntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class IntervalDecl($/;"	classes	line:163
IntervalTmplParent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val IntervalTmplParent = Var("Parent")$/;"	constants	line:77
IntrinsicControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^class IntrinsicControlFlow {$/;"	class	line:5
IntrinsicControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    case class IntrinsicControlFlow($/;"	classes	line:149
IntrinsicMath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    case class IntrinsicMath($/;"	classes	line:143
IntrinsicMathGen	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^class IntrinsicMathGen {$/;"	class	line:4
InvalidMetaData	/Users/niko/git/intervals-java/Harmonic/test.py	/^class InvalidMetaData(Exception):$/;"	class	line:187
JARFILES	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARFILES=$(wildcard lib\/*.jar)$/;"	macro	line:6
JARPATH	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JARPATH=$(subst .jar ,.jar:,${JARFILES})$/;"	macro	line:7
JAVA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVA=java$/;"	macro	line:1
JAVAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JAVAC=javac$/;"	macro	line:2
JPROFILEROPTS	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	macro	line:13
JPROFILEROPTS=-javaagent	/Users/niko/git/intervals-java/Harmonic/Makefile	/^JPROFILEROPTS=-javaagent:${LIBDIR}\/profile.jar -Dprofile.properties=${LIBDIR}\/profile.properties$/;"	targets	line:13
LIBDIR	/Users/niko/git/intervals-java/Harmonic/Makefile	/^LIBDIR=$(CURDIR)\/lib$/;"	macro	line:11
Labeled	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Labeled(name: VarName, body: Body)$/;"	classes	line:634
Literal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Literal(obj: Object, ty: Ty) extends LowerExpr {$/;"	classes	line:536
Local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Local extends Lvalue$/;"	classes	line:346
Lower	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^case class Lower(state: CompilationState) {$/;"	classes	line:15
LowerExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerExpr extends ParseExpr with LowerStmt {$/;"	traits	line:473
LowerStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait LowerStmt extends ParseStmt$/;"	traits	line:465
Lvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait Lvalue extends Node {$/;"	traits	line:288
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = (Symbol.Method, Symbol.MethodSignature[Pattern.Anon])$/;"	types	line:753
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:710
MCallData	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MCallData = Unit$/;"	types	line:731
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Symbol.Method$/;"	types	line:752
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:709
MSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type MSym = Unit$/;"	types	line:730
MemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class MemberDecl extends Node {$/;"	classes	line:110
MemberId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    abstract class MemberId$/;"	classes	line:203
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Method($/;"	classes	line:43
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val Method = Path.Base(Name.MethodVar)$/;"	constants	line:15
Method	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class Method($/;"	classes	line:161
MethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodCall(rcvr: NE, parts: List[CallPart], data: MCallData)$/;"	classes	line:578
MethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class MethodDecl($/;"	classes	line:188
MethodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    case class MethodId(clsName: Name.Qual, methodName: Name.Method, parameterPatterns: List[Pattern.Ref]) extends MemberId$/;"	classes	line:204
MethodKind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    sealed abstract class MethodKind$/;"	classes	line:142
MethodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    case class MethodSignature[+P <: Pattern.Anon]($/;"	classes	line:180
MethodVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val MethodVar = Name.Var("method")$/;"	constants	line:64
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = AtomicExpr$/;"	types	line:746
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ParseExpr$/;"	types	line:703
NE	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type NE = ParseExpr$/;"	types	line:724
NewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewAnon(tref: TypeRef, arg: NE, members: List[MemberDecl], csym: CSym, msym: MSym, ty: TyClass) $/;"	classes	line:603
NewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NewCtor(tref: TypeRef, arg: NE, msym: MSym, ty: TyClass) extends LowerExpr {$/;"	classes	line:592
Node	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Node extends Positional {$/;"	classes	line:651
NotExecutable	/Users/niko/git/intervals-java/Harmonic/test.py	/^class NotExecutable(Exception):$/;"	class	line:193
Null	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Null(ty: Ty)$/;"	classes	line:617
NullType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class NullType() extends TypeRef {$/;"	classes	line:371
OT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OT = OptionalTypeRef$/;"	types	line:702
OT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OT = OptionalTypeRef$/;"	types	line:723
OT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type OT = TypeRef$/;"	types	line:745
Object	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Object = Type.Class(Name.ObjectQual, List())$/;"	constants	line:37
ObjectQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ObjectQual = Qual(classOf[java.lang.Object])$/;"	constants	line:68
Operator	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        case class Operator(chars: String) extends Token {$/;"	classes	line:23
OptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class OptionalTypeRef extends Node$/;"	classes	line:363
PN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PN = Ast.AbsName$/;"	types	line:722
PN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PN = Ast.AbsName$/;"	types	line:744
PN	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type PN = RelName$/;"	types	line:701
Param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class Param extends Lvalue$/;"	classes	line:331
ParseExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseExpr extends ParseStmt {$/;"	traits	line:468
ParseStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait ParseStmt extends Node {$/;"	traits	line:455
PathArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class PathArg(name: Name.Var, rel: PcRel, path: Path.Ref) extends Arg {$/;"	classes	line:30
PathField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathField(owner: AstPath, name: VarName, sym: VSym, ty: Ty) extends AstPath {$/;"	classes	line:437
PathRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathRequirement($/;"	classes	line:215
PathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class PathTypeArg(name: VarName, rel: PcRel, path: AstPath) extends TypeArg {$/;"	classes	line:423
PcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcRel$/;"	classes	line:3
PcTransRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcTransRel extends PcRel$/;"	classes	line:17
PcWcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^sealed abstract class PcWcRel extends PcRel$/;"	classes	line:23
PkgName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class PkgName extends Node {$/;"	classes	line:677
PrettyPrinter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^abstract class PrettyPrinter {$/;"	classes	line:3
Qual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Qual($/;"	classes	line:6
QualRoot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val QualRoot = Qual(List())$/;"	constants	line:23
RVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val RVar = Name.Var("R")$/;"	constants	line:75
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Ref$/;"	classes	line:6
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    sealed abstract trait Ref extends Anon$/;"	traits	line:13
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    abstract class Ref {$/;"	classes	line:19
Ref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    sealed abstract class Ref$/;"	classes	line:10
Reflect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^case class Reflect(state: CompilationState) {$/;"	classes	line:9
RelBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelBase(nm: String) extends RelName {$/;"	classes	line:80
RelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDecl($/;"	classes	line:253
RelDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class RelDot(context: RelName, component: String) extends RelName {$/;"	classes	line:84
RelName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class RelName extends PkgName {$/;"	classes	line:75
Requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^public @interface Requirement {$/;"	interface	line:3
Requires	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^public @interface Requires {$/;"	interface	line:3
Results	/Users/niko/git/intervals-java/Harmonic/test.py	/^class Results(object):$/;"	class	line:396
SBT	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SBT=${JAVA} -Dsbt.log.noformat=true -Xmx256M -jar sbt-launch-0.7.0.jar$/;"	macro	line:3
SCALA	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALA=scala$/;"	macro	line:5
SCALAC	/Users/niko/git/intervals-java/Harmonic/Makefile	/^SCALAC=scalac -make:changed$/;"	macro	line:4
STDLIB	/Users/niko/git/intervals-java/Harmonic/Makefile	/^STDLIB=java_standard_library.jar$/;"	macro	line:15
StatementVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    class StatementVisitor(accessMap: AccessMap, mvis: asm.MethodVisitor) {$/;"	classes	line:415
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = LowerStmt$/;"	types	line:747
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ParseStmt$/;"	types	line:704
Stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Stmt = ParseStmt$/;"	types	line:725
SubstdTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdTuple(patterns: List[Pattern.Anon]) extends AnonTuple$/;"	classes	line:36
SubstdVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class SubstdVar(ty: Type.Ref) extends AnonVar$/;"	classes	line:34
SymbolSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    case class SymbolSummary($/;"	classes	line:330
TcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^sealed abstract class TcRel$/;"	classes	line:3
This	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    val This = Path.Base(Name.ThisVar)    $/;"	constants	line:14
ThisEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def ThisEnv(csym: Symbol.ClassFromSource) = {$/;"	methods	line:176
ThisScope	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def ThisScope(csym: Symbol.ClassFromSource) = {$/;"	methods	line:180
ThisVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ThisVar = Name.Var("this")$/;"	constants	line:62
TmplLv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TmplLv = Local$/;"	types	line:727
TmplLv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TmplLv = Param$/;"	types	line:749
TmplLv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TmplLv = TupleLocal$/;"	types	line:706
Tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    type Tokens = StdTokens$/;"	types	line:52
TransitiveCloser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    abstract class TransitiveCloser[T] {$/;"	classes	line:36
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Tuple(exprs: List[NE]) extends AtomicExpr {$/;"	classes	line:482
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Tuple(patterns: List[Pattern.Ref]) extends AnonTuple with Ref$/;"	classes	line:43
Tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Tuple(typeRefs: List[Type.Ref]) extends Ref {$/;"	classes	line:22
TupleLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleLocal($/;"	classes	line:347
TupleLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait TupleLvalue extends Node {$/;"	traits	line:292
TupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleParam($/;"	classes	line:332
TupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TupleType(types: List[TypeRef]) extends TypeRef {$/;"	classes	line:375
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Type.Ref$/;"	types	line:754
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:711
Ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type Ty = Unit$/;"	types	line:732
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Type.Class$/;"	types	line:755
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:712
TyClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyClass = Unit$/;"	types	line:733
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Type.Tuple$/;"	types	line:756
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:713
TyTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type TyTuple = Unit$/;"	types	line:734
TyVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val TyVarName = tyVar.typeVar$/;"	constants	line:223
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TypeArg extends Node {$/;"	classes	line:411
TypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class TypeArg(name: Name.Var, rel: TcRel, ty: Type.Ref) extends Arg {$/;"	classes	line:33
TypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract class TypeRef extends OptionalTypeRef$/;"	classes	line:369
TypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class TypeTypeArg(name: VarName, rel: TcRel, typeRef: TypeRef) extends TypeArg {$/;"	classes	line:416
Typed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    sealed abstract class Typed {$/;"	classes	line:17
TypedBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedBase(v: Name.Var, sym: Symbol.Var, ty: Type.Ref) extends Typed {$/;"	classes	line:22
TypedField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^    case class TypedField(base: Path.Typed, sym: Symbol.Var, ty: Type.Ref) extends Typed {$/;"	classes	line:25
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Symbol.Var$/;"	types	line:751
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:708
VSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        type VSym = Unit$/;"	types	line:729
ValueMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val ValueMethod = Method(List("value"))$/;"	constants	line:78
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class Var(name: VarName, sym: VSym) extends AtomicExpr with AstPath {$/;"	classes	line:555
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    case class Var($/;"	classes	line:52
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    case class Var($/;"	classes	line:38
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    class Var($/;"	classes	line:189
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    case class Var(path: Path.Ref, typeVar: Name.Var) extends Ref {$/;"	classes	line:11
Var	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^public @interface Var {$/;"	interface	line:3
VarLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarLocal($/;"	classes	line:352
VarLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    sealed abstract trait VarLvalue extends Node {$/;"	traits	line:306
VarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarName(text: String) extends Node {$/;"	classes	line:689
VarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarParam($/;"	classes	line:337
VarType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    case class VarType(path: AstPath, typeVar: VarName) extends TypeRef {$/;"	classes	line:385
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <Void, A> Void forEach($/;"	field	line:50
Void	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^    val Void = Type.Class(Name.VoidQual, List())$/;"	constants	line:38
VoidQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^    val VoidQual = Qual(classOf[java.lang.Void])$/;"	constants	line:66
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, filenm):$/;"	member	line:398
__init__	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def __init__(self, fname):$/;"	member	line:211
_execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _execute():$/;"	function	line:482
_run_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def _run_test(filenm, experrors):$/;"	function	line:578
absName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val absName = positioned($/;"	constants	line:74
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val accessMap = constructAccessMap($/;"	constants	line:990
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(className)$/;"	constants	line:915
accessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val accessMap = new AccessMap(context)$/;"	constants	line:1010
accessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessPath = accessMap.syms(sym)$/;"	constants	line:430
accessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val accessPath = accessMap.syms(sym)$/;"	constants	line:517
accessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val accessPath = accessMap.addUnboxedSym(sym)$/;"	constants	line:928
accessSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def accessSyms = readSyms ++ writeSyms$/;"	methods	line:346
addBoxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addBoxedSym(sym: Symbol.Var) = {$/;"	methods	line:310
addControlFlow	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addControlFlow(state: CompilationState) = {$/;"	methods	line:66
addDirs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def addDirs(files: ListBuffer[File], paths: String) {$/;"	methods	line:44
addFresh	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addFresh($/;"	methods	line:348
addIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def addIntrinsic(rcvrClassName: Name.Qual, msym: Symbol.Method) {$/;"	methods	line:21
addMathTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    private[this] def addMathTo(state: CompilationState) = {$/;"	methods	line:32
addOverrideSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def addOverrideSubst($/;"	methods	line:372
addSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addSym(sym: Symbol.Var, accessPath: AccessPath) {$/;"	methods	line:289
addSymbolsDeclaredIn	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def addSymbolsDeclaredIn($/;"	methods	line:1016
addTo	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def addTo(state: CompilationState) = {$/;"	methods	line:228
addUnboxedSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def addUnboxedSym(sym: Symbol.Var) = {$/;"	methods	line:293
add_frag_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_frag_exp_error(self, rel, experror):$/;"	function	line:298
add_header_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_header_exp_error(self, rel, experror):$/;"	function	line:280
add_remove_files	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def add_remove_files(self, fnames):$/;"	member	line:407
add_to_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_fragment(self, line):$/;"	function	line:295
add_to_header	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_header(self, line):$/;"	function	line:277
add_to_trailer	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_to_trailer(self, line):$/;"	function	line:284
add_trailer_exp_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^def add_trailer_exp_error(self, res, experror):$/;"	function	line:287
all	/Users/niko/git/intervals-java/Harmonic/Makefile	/^all: test$/;"	targets	line:17
allImports	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val allImports = ($/;"	constants	line:22
annotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotation = positioned($/;"	constants	line:115
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:111
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def annotations: List[Annotation]$/;"	methods	line:307
annotations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val annotations = rep(annotation) $/;"	constants	line:119
appendLoweredStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def appendLoweredStmt(stmt: in.Stmt): Env = {$/;"	methods	line:431
applicableMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val applicableMsyms = msyms.filter(potentiallyApplicable)$/;"	constants	line:660
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LoadClassFile.scala	/^    def apply(state: CompilationState, sym: Symbol.ClassFromClassFile) {$/;"	methods	line:8
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env) = new InScope(env)$/;"	methods	line:315
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def apply(env: Env, stmts: ListBuffer[out.Stmt]) = new InScopeStmt(env, stmts)$/;"	methods	line:427
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(cls: java.lang.Class[_]): Qual = cls match {$/;"	methods	line:28
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def apply(name: String): Qual = new Qual(name.split('.').reverse.toList)$/;"	methods	line:26
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def apply(state: CompilationState, interFile: File) = {$/;"	methods	line:383
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^    def apply(state: CompilationState, compUnit: in.CompUnit) = {$/;"	methods	line:14
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def apply(pairs: (Path.Ref, Path.Ref)*) = new Subst(Map(pairs: _*))$/;"	methods	line:46
apply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        def apply(cls: java.lang.Class[_]): Type.Class = Class(Name.Qual(cls), List())$/;"	methods	line:20
arg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val arg: PackratParser[out.Expr] = tuple | itmpl | atmpl$/;"	constants	line:302
argTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val argTys = outArgs.map(_.ty)$/;"	constants	line:648
args	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def args = parts.map(_.arg)$/;"	methods	line:581
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asFieldNamed(name: Name.Var): Option[FieldDecl] = None$/;"	methods	line:114
asFieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asFieldNamed(fldName: Name.Var) = {$/;"	methods	line:234
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def asMethodNamed(name: Name.Method): Option[MethodDecl] = None$/;"	methods	line:113
asMethodNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def asMethodNamed(mthdName: Name.Method) = {$/;"	methods	line:200
asRelPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def asRelPath = components.mkString("\/")$/;"	methods	line:10
asmBooleanType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmBooleanType = asm.Type.getObjectType("java\/lang\/Boolean")$/;"	constants	line:43
asmClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmClassType(name: Name.Qual) = asm.Type.getObjectType(name.internalName)$/;"	methods	line:64
asmObjectArrayType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectArrayType = asm.Type.getType("[Ljava\/lang\/Object;")$/;"	constants	line:40
asmObjectType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmObjectType = asm.Type.getObjectType("java\/lang\/Object")$/;"	constants	line:41
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def asmType: asm.Type$/;"	methods	line:178
asmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def asmType(ty: Type.Ref): asm.Type = ty match {$/;"	methods	line:56
asmVoidType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val asmVoidType = asm.Type.getObjectType("java\/lang\/Void")$/;"	constants	line:42
assemble	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def assemble(self, fragnum, ):$/;"	member	line:229
assign	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val assign = withPosOf(fromExpr, out.Assign(lv, withPosOf(fromExpr, toExpr)))$/;"	constants	line:549
astOwner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val astOwner = astPath(env)(from, base)$/;"	constants	line:64
astPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astPath(env: Env)(from: Ast.Node, path: Path.Ref): out.AstPath = path match {$/;"	methods	line:70
astPathField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astPathField(env: Env)(from: Ast.Node, base: Path.Ref, name: Name.Var) = {$/;"	methods	line:62
astPathVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astPathVar(env: Env)(from: Ast.Node, name: Name.Var) = withPosOf(from, {$/;"	methods	line:57
astType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astType(env: Env)(from: Ast.Node, ty: Type.Ref): out.TypeRef = {$/;"	methods	line:75
astTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astTypeArg(env: Env)(from: Ast.Node, targ: Type.Arg) = {$/;"	methods	line:94
astVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def astVarName(from: Ast.Node, name: Name.Var) = withPosOf(from,$/;"	methods	line:53
atmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val atmpl = positioned($/;"	constants	line:294
baseName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        val baseName = name.asRelPath$/;"	constants	line:49
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val best = identifyBestMethod($/;"	constants	line:744
best	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val best = identifyBestMethod($/;"	constants	line:717
bestMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val bestMsyms = applicableMsyms.filter(isBestChoice)$/;"	constants	line:682
blockTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val blockTy = Type.Class(name, List())$/;"	constants	line:809
body	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val body = positioned($/;"	constants	line:271
booleanClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanClass = classOf[java.lang.Boolean]$/;"	constants	line:68
booleanTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val booleanTy = Type.Class(booleanClass)$/;"	constants	line:80
boundsFromClassType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            def boundsFromClassType(tyClass: Type.Class) = {$/;"	methods	line:225
boxedArray	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val boxedArray = new BoxedArray(accessMap)$/;"	constants	line:1021
boxedArrayPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] val boxedArrayPath = accessMap.pathToFreshSlot(asmObjectArrayType)$/;"	constants	line:307
boxedSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def boxedSyms(sym: Symbol.Var) = writeSyms(sym) && sharedSyms(sym)$/;"	methods	line:347
byField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byField = P1 match {$/;"	constants	line:196
byRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val byRel = pathRels.flatMap {$/;"	constants	line:202
cache	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val cache = new mutable.HashMap[AccessPath, AccessPath]()$/;"	constants	line:744
callPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val callPart = positioned($/;"	constants	line:304
callWithDetails	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    def callWithDetails(op: Int, ownerAsmType: asm.Type, desc: String) = {$/;"	methods	line:603
callWithOpcode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    def callWithOpcode(op: Int) = {$/;"	methods	line:611
cdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val cdecl = csym.resolvedSource$/;"	constants	line:235
classBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val classBounds = List[Type.Ref]() \/\/ // FIXME$/;"	constants	line:227
classDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val classDecl = positioned($/;"	constants	line:128
classExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val classExt = ".class"$/;"	constants	line:11
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val classFiles = config.classFiles(qualName)$/;"	constants	line:116
classFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def classFiles(name: Name.Qual) = relativeFiles(classPaths, classExt)(name)$/;"	methods	line:58
className	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def className = if(async) Name.AsyncBlockQual else Name.BlockQual$/;"	methods	line:502
classPaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val classPaths = new ListBuffer[File]()$/;"	constants	line:13
classType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val classType = asm.Type.getType(objClass)$/;"	constants	line:583
classType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val classType = positioned($/;"	constants	line:247
classes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val classes = new mutable.HashMap[Name.Qual, Symbol.Class]()$/;"	constants	line:11
clean	/Users/niko/git/intervals-java/Harmonic/Makefile	/^clean:$/;"	targets	line:20
close_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def close_all(self):$/;"	member	line:468
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val cls = pt.getRawType.asInstanceOf[Class[_]]$/;"	constants	line:36
cls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val cls: java.lang.Class[_]$/;"	constants	line:85
clsFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val clsFile = fileWithExtension(".class")$/;"	constants	line:152
clsName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val clsName = cdecl.name.qualName$/;"	constants	line:236
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:14
column	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def column = 1$/;"	methods	line:21
comma	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma[A](p: PackratParser[A]) = repsep(p, ",")<~opt(",")$/;"	methods	line:64
comma1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def comma1[A](p: PackratParser[A]) = rep1sep(p, ",")<~opt(",")$/;"	methods	line:65
command	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def command(self, cmd, retcode, stdout, stderr):$/;"	member	line:425
compUnit	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val compUnit = positioned($/;"	constants	line:94
compUnits	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val compUnits = files.flatMap(Parse(this, _))$/;"	constants	line:59
compare_errors	/Users/niko/git/intervals-java/Harmonic/test.py	/^def compare_errors(expected, stdout, stderr):$/;"	function	line:522
compile	/Users/niko/git/intervals-java/Harmonic/Makefile	/^compile: ${GENERATEDJAVA}$/;"	targets	line:28
compile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def compile() {$/;"	methods	line:156
component	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def component = qualName.rev_components.head$/;"	methods	line:685
components	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def components = rev_components.reverse$/;"	methods	line:9
compute	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        def compute(item: T) = expand(Queue(item), Set())$/;"	methods	line:39
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val config: Config,$/;"	constants	line:8
config	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val config = new Config()$/;"	constants	line:9
constructAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def constructAccessMap($/;"	methods	line:1003
constructExprFromPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def constructExprFromPattern(pattern: Pattern.Ref): in.AtomicExpr = pattern match {$/;"	methods	line:922
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def constructors(state: CompilationState) = List()$/;"	methods	line:39
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def constructors(state: CompilationState) = {$/;"	methods	line:112
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def constructors(state: CompilationState) = {$/;"	methods	line:62
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def constructors(state: CompilationState) = {$/;"	methods	line:91
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def constructors(state: CompilationState): List[Symbol.Method]$/;"	methods	line:26
constructors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var constructors = List[Symbol.Method]()$/;"	local variables	line:50
contract	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def contract(lvalue: in.Lvalue) {$/;"	methods	line:509
cpu	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
createArrayIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def createArrayIfNeeded(mvis: asm.MethodVisitor) = {$/;"	methods	line:315
createSymbolsAndResolve	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    private[this] def createSymbolsAndResolve(compUnits: List[Ast.Parse.CompUnit]) {$/;"	methods	line:37
createSymbolsForMethodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def createSymbolsForMethodsNamed($/;"	methods	line:124
createVarSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def createVarSymbols(p: Pattern.Ref): List[Symbol.Var] = p match {$/;"	methods	line:45
create_error_list	/Users/niko/git/intervals-java/Harmonic/test.py	/^def create_error_list(stdout, stderr):$/;"	function	line:496
cross	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def cross[J](js: Iterable[J]) = $/;"	methods	line:24
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^            val csym = toBeBytecoded.dequeue()$/;"	constants	line:172
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^            val csym = toBeLowered.dequeue()$/;"	constants	line:160
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = state.classes(className)$/;"	constants	line:117
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val csym = state.classes(className)$/;"	constants	line:145
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val csym = state.classes(name)$/;"	constants	line:740
csym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val csym = state.classes(cdecl.name.qualName).asInstanceOf[Symbol.ClassFromSource]$/;"	constants	line:187
csym_next	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^            val csym_next = queued.dequeue()$/;"	constants	line:212
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def ctorSymbol(clsName: Name.Qual)(mthd: reflect.Constructor[_]) = {$/;"	methods	line:58
ctorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^                    val ctorSymbol = new Symbol.Method($/;"	constants	line:116
ctors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def ctors(sym: Symbol.ClassFromReflection) = {$/;"	methods	line:71
declOp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declOp = ($/;"	constants	line:158
declPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val declPart = positioned($/;"	constants	line:150
declarations	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/** Data attached to class declarations *\/$/;"	classes	line:44
define	/Users/niko/git/intervals-java/Harmonic/test.py	/^def define(varnm, defval):$/;"	function	line:158
definedClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def definedClasses = {$/;"	methods	line:103
defining	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^  * - Foo$.class: a Java class defining static members for all $/;"	classes	line:18
depth	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
deriveAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def deriveAccessMap($/;"	methods	line:737
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = deriveAccessMap(name, tmplwr.cvis, tmpl.stmts)$/;"	constants	line:824
derivedAccessMap	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val derivedAccessMap = new AccessMap(cname)$/;"	constants	line:742
desc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val desc = methodDescFromSig(msym.msig)$/;"	constants	line:613
diff	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def diff(self, expected, diff):$/;"	member	line:437
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Byte l, Double r) { return l * r; }$/;"	method	line:345
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Byte r) { return l * r; }$/;"	method	line:420
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Double r) { return l * r; }$/;"	method	line:435
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Float r) { return l * r; }$/;"	method	line:432
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Integer r) { return l * r; }$/;"	method	line:426
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Long r) { return l * r; }$/;"	method	line:429
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Double l, Short r) { return l * r; }$/;"	method	line:423
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Float l, Double r) { return l * r; }$/;"	method	line:417
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Integer l, Double r) { return l * r; }$/;"	method	line:381
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Long l, Double r) { return l * r; }$/;"	method	line:399
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double divide(Short l, Double r) { return l * r; }$/;"	method	line:363
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Byte l, Float r) { return l * r; }$/;"	method	line:342
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Float l, Byte r) { return l * r; }$/;"	method	line:402
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Float l, Float r) { return l * r; }$/;"	method	line:414
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Float l, Integer r) { return l * r; }$/;"	method	line:408
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Float l, Long r) { return l * r; }$/;"	method	line:411
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Float l, Short r) { return l * r; }$/;"	method	line:405
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Integer l, Float r) { return l * r; }$/;"	method	line:378
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Long l, Float r) { return l * r; }$/;"	method	line:396
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float divide(Short l, Float r) { return l * r; }$/;"	method	line:360
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Byte l, Byte r) { return l * r; }$/;"	method	line:330
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Byte l, Integer r) { return l * r; }$/;"	method	line:336
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Byte l, Short r) { return l * r; }$/;"	method	line:333
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Integer l, Byte r) { return l * r; }$/;"	method	line:366
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Integer l, Integer r) { return l * r; }$/;"	method	line:372
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Integer l, Short r) { return l * r; }$/;"	method	line:369
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Short l, Byte r) { return l * r; }$/;"	method	line:348
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Short l, Integer r) { return l * r; }$/;"	method	line:354
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer divide(Short l, Short r) { return l * r; }$/;"	method	line:351
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Byte l, Long r) { return l * r; }$/;"	method	line:339
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Integer l, Long r) { return l * r; }$/;"	method	line:375
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Long l, Byte r) { return l * r; }$/;"	method	line:384
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Long l, Integer r) { return l * r; }$/;"	method	line:390
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Long l, Long r) { return l * r; }$/;"	method	line:393
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Long l, Short r) { return l * r; }$/;"	method	line:387
divide	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long divide(Short l, Long r) { return l * r; }$/;"	method	line:357
divider	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def divider(self):$/;"	member	line:449
doSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubst(pat_from: Pattern.Ref, pat_to: Pattern.Ref): Subst = {$/;"	methods	line:53
doSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    private[this] def doSubsts(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]): Subst = {$/;"	methods	line:70
downcast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcast(toAsmTy: asm.Type) {$/;"	methods	line:82
downcast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcast(ty: Type.Ref) {$/;"	methods	line:92
downcastIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcastIfNeeded(toAsmTy: asm.Type, fromAsmTy: asm.Type) {$/;"	methods	line:96
downcastIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def downcastIfNeeded(toTy: Type.Ref, fromTy: Type.Ref) {$/;"	methods	line:101
drop	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def drop(n: Int): FileReader = $/;"	methods	line:374
dummySubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def dummySubst(subst: Subst)(pat: Pattern.Ref, text: String): Subst = pat match {$/;"	methods	line:554
dumpBytecode	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpBytecode = false$/;"	local variables	line:19
dumpLoweredTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpLoweredTrees = false$/;"	local variables	line:18
dumpParsedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpParsedTrees = false$/;"	local variables	line:16
dumpResolvedTrees	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var dumpResolvedTrees = false$/;"	local variables	line:17
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val empty = SymbolSummary(Set(), Set(), Set(), Set())$/;"	constants	line:351
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def empty(state: CompilationState) = Env($/;"	methods	line:10
empty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    val empty = new Subst(Map())$/;"	constants	line:44
emptyEnv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    val emptyEnv = Env.empty(state)$/;"	constants	line:17
end	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def end() {$/;"	methods	line:148
ensureLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    def ensureLoadable(state: CompilationState, cls: Class[_]) {$/;"	methods	line:5
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        var env = Env.empty(state)$/;"	local variables	line:17
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val env = emptyEnv.plusSyms(receiverSym :: parameterSyms)$/;"	constants	line:243
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val env = ThisEnv(csym)$/;"	constants	line:286
env	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        var env = env0$/;"	local variables	line:416
equalType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equalType(ty: Type.Ref) = new Bounder(TcEq).compute(ty)$/;"	methods	line:252
equatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def equatable(path: Path.Ref) = new Equater().compute(path)$/;"	methods	line:211
err	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^        val err = $/;"	constants	line:10
error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def error(self, message):$/;"	member	line:452
errorMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def errorMethod(name: Name.Method) = {$/;"	methods	line:171
errorVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def errorVar(name: Name.Var, optExpTy: Option[Type.Ref]) = {$/;"	methods	line:196
errors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    private[this] val errors = new ListBuffer[Error]()$/;"	constants	line:14
esc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def esc = elem("escape", c => c == '`')$/;"	methods	line:29
execStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def execStatement(stmt: in.Stmt) {$/;"	methods	line:681
execute	/Users/niko/git/intervals-java/Harmonic/test.py	/^def execute(res, args):$/;"	function	line:480
expArgumentTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val expArgumentTy = optTypeArg(Name.AVar, optExpTy).getOrElse(Type.Void)$/;"	constants	line:876
expReturnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            \/\/ val expReturnTy = optTypeArg(Name.RVar, optExpTy).getOrElse(Type.Void)$/;"	constants	line:888
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def expand(lvalue: Pattern.Anon) {$/;"	methods	line:489
expand	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def expand(queue0: Queue[T], result: Set[T]): Set[T] = {$/;"	methods	line:41
expr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr: PackratParser[out.Expr] = positioned($/;"	constants	line:344
expr0	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val expr0: PackratParser[out.Expr] = positioned($/;"	constants	line:322
exprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val exprs = tuple.exprs.map(lowerExpr(None))$/;"	constants	line:791
extendedIterable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    implicit def extendedIterable[E](iterable: Iterable[E]) = new ExtendedIterable(iterable)$/;"	methods	line:27
extendedMethodVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    implicit def extendedMethodVisitor(mvis: asm.MethodVisitor) = ExtendedMethodVisitor(mvis)$/;"	methods	line:116
extract_fragments	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_fragments(filenm):$/;"	function	line:305
extract_metadata	/Users/niko/git/intervals-java/Harmonic/test.py	/^def extract_metadata(filenm):$/;"	function	line:344
fieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val fieldDecl = positioned($/;"	constants	line:198
fieldName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fieldName = freshVarName(optName)$/;"	constants	line:752
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def fieldNamed(sym: Symbol.ClassFromReflection, name: Name.Var) = {$/;"	methods	line:101
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def fieldNamed(state: CompilationState)(name: Name.Var) = None$/;"	methods	line:139
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def fieldNamed(state: CompilationState)(name: Name.Var) = None$/;"	methods	line:42
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def fieldNamed(state: CompilationState)(name: Name.Var) = {$/;"	methods	line:77
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def fieldNamed(state: CompilationState)(name: Name.Var) = {$/;"	methods	line:98
fieldNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def fieldNamed(state: CompilationState)(name: Name.Var): Option[Symbol.Var]$/;"	methods	line:29
fieldSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def fieldSymbol(fld: reflect.Field) = {$/;"	methods	line:44
fields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^        val fields = sym.optFields.getOrElse {$/;"	constants	line:102
fields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var fields = List[Symbol.Var]()$/;"	local variables	line:53
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^            val file = new File(path, baseName + ext)$/;"	constants	line:51
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = file$/;"	methods	line:12
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def file = new java.io.File(cls.toString)$/;"	methods	line:19
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def file: java.io.File$/;"	methods	line:6
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            def file = interFile$/;"	methods	line:378
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val file = $/;"	constants	line:23
file	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val file: java.io.File$/;"	constants	line:47
fileWithExtension	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def fileWithExtension(ext: String) = {$/;"	methods	line:122
files	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/LoadClassFile.scala	/^  * Creates symbols from class files. *\/$/;"	classes	line:6
firstSome	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^        def firstSome[F](func: (E => Option[F])) = iterable.foldLeft[Option[F]](None) {$/;"	methods	line:19
floatTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val floatTypes = List[Class[_]]($/;"	constants	line:18
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^    def forClass(csym: Symbol.ClassFromSource) = {$/;"	methods	line:14
forClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forClass(cls: java.lang.Class[_]) = new InterPosition() {$/;"	methods	line:18
forEach	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <Void, A> Void forEach($/;"	method	line:50
forFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^    def forFile(file: java.io.File) = new InterPosition() {$/;"	methods	line:11
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = None$/;"	methods	line:420
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:427
forGhost	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forGhost(name: VarName): Option[PathTypeArg]$/;"	methods	line:413
forMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def forMethodDecl(mdecl: in.MethodDecl) = mdecl match {$/;"	methods	line:128
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = None$/;"	methods	line:426
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(aName: VarName) = if(name == aName) Some(this) else None$/;"	methods	line:419
forTypeVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def forTypeVar(name: VarName): Option[TypeTypeArg]$/;"	methods	line:412
format_error	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def format_error(outfilenm, linenum, msg):$/;"	function	line:175
format_error	/Users/niko/git/intervals-java/Harmonic/test_config.py	/^def format_error(outfilenm, linenum, msg):$/;"	function	line:7
fragment_count	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def fragment_count(self):$/;"	member	line:220
freshCounter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    private[this] var freshCounter = 0$/;"	local variables	line:146
freshInteger	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def freshInteger() = {$/;"	methods	line:148
freshName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val freshName = Name.Var("(env-%s)".format(state.freshInteger()))$/;"	constants	line:355
freshQualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshQualName(context: Name.Qual) = {$/;"	methods	line:30
freshVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def freshVarName(base: Option[Name.Var]) = {$/;"	methods	line:34
fromSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val fromSym = state.classes(fromName)$/;"	constants	line:105
fvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val fvis = cvis.visitField($/;"	constants	line:755
handle_negative_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_negative_test(res, experrors, retcode, stdout, stderr):$/;"	function	line:548
handle_positive_test	/Users/niko/git/intervals-java/Harmonic/test.py	/^def handle_positive_test(res, exp_output, retcode, stdout, stderr):$/;"	function	line:562
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.compiler	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^package harmonic.compiler;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Abstract.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Interval.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^package harmonic.lang;$/;"	package	line:1
harmonic.lang	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Var.java	/^package harmonic.lang;$/;"	package	line:1
hasErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def hasErrors = !errors.isEmpty$/;"	methods	line:16
helper	/Users/niko/git/intervals-java/Harmonic/test.py	/^        def helper(str):$/;"	member	line:414
hprof	/Users/niko/git/intervals-java/Harmonic/Makefile	/^HPROFOPTS=-agentlib:hprof=cpu=samples,depth=6$/;"	macro	line:12
i	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^        var i = 0$/;"	local variables	line:72
identifyBestMethod	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def identifyBestMethod($/;"	methods	line:618
ifElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifElse($/;"	method	line:26
ifNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void ifNull($/;"	method	line:16
ifNullElse	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static <R> R ifNullElse($/;"	method	line:38
if_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void if_($/;"	method	line:7
ignoreErrors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var ignoreErrors = false$/;"	local variables	line:20
impThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impThis = positioned($/;"	constants	line:336
impVoidStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val impVoidStmt = ($/;"	constants	line:355
implSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val implSuffix = "$"$/;"	constants	line:26
importDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val importDecl = positioned($/;"	constants	line:104
ind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var ind = 0$/;"	local variables	line:22
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def indent() {$/;"	methods	line:24
indent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indent(): Unit$/;"	methods	line:4
indented	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def indented(start: String, end: String)(func: => Unit) {$/;"	methods	line:9
infTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val infTypeRef = positioned($/;"	constants	line:231
inferReported	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val inferReported = new mutable.HashSet[Symbol.MemberId]()$/;"	constants	line:15
inferStack	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val inferStack = new mutable.HashSet[Symbol.MemberId]()$/;"	constants	line:14
inputFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val inputFiles = new ListBuffer[File]()$/;"	constants	line:14
integralTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val integralTypes = List[Class[_]]($/;"	constants	line:11
interfaceMethodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val interfaceMethodSig = Symbol.MethodSignature($/;"	constants	line:858
interfaces	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^\/** Symbols describe the class interfaces.  Unlike the AST,$/;"	classes	line:5
internalName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def internalName = asRelPath$/;"	methods	line:13
intervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val intervalDecl = positioned($/;"	constants	line:181
intrinsics	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val intrinsics = new mutable.HashMap[(Name.Qual, Name.Method), List[Symbol.Method]]()$/;"	constants	line:19
introduceVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def introduceVar(fromExpr: in.Expr, toExpr: out.LowerExpr): out.Var = {$/;"	methods	line:543
isBestChoice	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def isBestChoice(msym: Symbol.Method) = {$/;"	methods	line:677
isBetterChoiceThan	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def isBetterChoiceThan(msym_better: Symbol.Method, msym_worse: Symbol.Method) = {$/;"	methods	line:663
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^            override def isError = true$/;"	methods	line:176
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^            override def isError = true$/;"	methods	line:199
isError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def isError: Boolean = false$/;"	methods	line:20
isOperCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperCont(c: Char) = c != EofCh && !c.isWhitespace && !sep.contains(c)$/;"	methods	line:33
isOperStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def isOperStart(c: Char) = isOperCont(c) && !c.isLetter && !c.isDigit$/;"	methods	line:34
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def isSubclass(ty_sub: Type.Ref, ty_sup: Type.Ref): Boolean = {$/;"	methods	line:412
isSubclass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def isSubclass(state: CompilationState, csym_sub: Symbol.Class, csym_sup: Symbol.Class) = {$/;"	methods	line:219
isSuitableArgument	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def isSuitableArgument(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:290
isSuitableArgumentBounded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def isSuitableArgumentBounded(ty_val: Type.Ref, ty_pat: Type.Ref): Boolean = {$/;"	methods	line:262
iterableClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableClass = classOf[java.lang.Iterable[_]]$/;"	constants	line:71
iterableTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val iterableTy = Type.Class(iterableClass)$/;"	constants	line:83
itmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val itmpl = positioned($/;"	constants	line:290
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = parts.mkString("$")$/;"	methods	line:46
javaName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def javaName = text$/;"	methods	line:55
javaReader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val javaReader = Util.javaReaderFromFile(interFile)$/;"	constants	line:384
javaReaderFromFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromFile(file: java.io.File) = new java.io.FileReader(file)$/;"	methods	line:8
javaReaderFromPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def javaReaderFromPath(path: String) = javaReaderFromFile(new java.io.File(path))$/;"	methods	line:7
key	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val key = (rcvrClassName, msym.name)$/;"	constants	line:22
kind	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val kind: MethodKind,$/;"	constants	line:162
lbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val lbs = wt.getLowerBounds$/;"	constants	line:13
leftTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val leftTy = Type.Class(leftClass)$/;"	constants	line:45
lexical	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    val lexical = new HlLexical$/;"	constants	line:53
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:13
line	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        def line = 1$/;"	methods	line:20
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:15
lineContents	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/InterPosition.scala	/^        override def lineContents = ""$/;"	methods	line:22
load	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def load(state: CompilationState) {$/;"	methods	line:55
loadFrom	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def loadFrom(args: Array[String]): Boolean = {$/;"	methods	line:71
loadInitialSources	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def loadInitialSources(files: List[java.io.File]) {$/;"	methods	line:58
loadSourceFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        def loadSourceFile(file: java.io.File) {$/;"	methods	line:87
loaded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var loaded = false$/;"	local variables	line:49
loadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def loadedOrLoadable(qualName: Name.Qual) = {$/;"	methods	line:66
local	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val local: PackratParser[out.Local] = tupleLocal | varLocal$/;"	constants	line:225
localIsDefined	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def localIsDefined(name: Name.Var) = $/;"	methods	line:100
localize	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var localize = false$/;"	local variables	line:22
locateSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def locateSource(qualName: Name.Qual) = {        $/;"	methods	line:82
log	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def log(self, text):$/;"	member	line:457
lookupField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupField($/;"	methods	line:111
lookupFieldOrError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupFieldOrError($/;"	methods	line:129
lookupIntrinsic	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def lookupIntrinsic(rcvrTy: Type.Ref, name: Name.Method): List[Symbol.Method] = {$/;"	methods	line:28
lookupLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupLocal(name: Name.Var) = $/;"	methods	line:103
lookupLocalOrError	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupLocalOrError(name: Name.Var, optExpTy: Option[Type.Ref]) = $/;"	methods	line:106
lookupMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupMethods($/;"	methods	line:157
lookupNonintrinsicMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupNonintrinsicMethods($/;"	methods	line:139
lookupThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lookupThis = locals(Name.ThisVar)$/;"	methods	line:109
lowerAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerAnnotation(ann: in.Annotation) = withPosOf(ann,$/;"	methods	line:399
lowerBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerBlock(optExpTy: Option[Type.Ref])(tmpl: in.Block) = introduceVar(tmpl, {$/;"	methods	line:875
lowerBlockArgument	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerBlockArgument(expArgumentTy: Type.Ref, local: in.Local): out.Param = {$/;"	methods	line:808
lowerBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerBody(env: Env, body: in.Body): out.Body = {$/;"	methods	line:411
lowerBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def lowerBoundType(ty: Type.Ref) = new Bounder(TcSup).compute(ty)$/;"	methods	line:254
lowerCast	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerCast(expr: in.Cast) = withPosOf(expr, {$/;"	methods	line:921
lowerClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerClassDecl($/;"	methods	line:184
lowerDeclPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerDeclPart(part: in.DeclPart): out.DeclPart = withPosOf(part, out.DeclPart($/;"	methods	line:319
lowerExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExpr(optExpTy: Option[Type.Ref])(expr: in.Expr): out.AtomicExpr = expr match {$/;"	methods	line:930
lowerExprToVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerExprToVar(optExpTy: Option[Type.Ref])(expr: in.Expr): out.Var = {$/;"	methods	line:945
lowerField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerField(optExpTy: Option[Type.Ref])(expr: in.Field) = introduceVar(expr, { $/;"	methods	line:600
lowerFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerFieldDecl($/;"	methods	line:281
lowerImpThis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerImpThis(expr: in.Expr) = withPosOf(expr, {$/;"	methods	line:916
lowerIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerIntervalDecl($/;"	methods	line:219
lowerLiteralExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLiteralExpr(expr: in.Literal) = introduceVar(expr, {$/;"	methods	line:613
lowerLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerLocal(rvalueTy: Type.Ref, local: in.Local): out.Local = {$/;"	methods	line:480
lowerMemberDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMemberDecl($/;"	methods	line:198
lowerMethodCall	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerMethodCall(optExpTy: Option[Type.Ref])(mcall: in.MethodCall) = introduceVar(mcall, {$/;"	methods	line:713
lowerMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerMethodDecl($/;"	methods	line:229
lowerNewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewAnon(expr: in.NewAnon) = introduceVar(expr, {$/;"	methods	line:773
lowerNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNewCtor(expr: in.NewCtor) = introduceVar(expr, {$/;"	methods	line:737
lowerNull	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerNull(optExpTy: Option[Type.Ref])(expr: in.Null) = introduceVar(expr, {$/;"	methods	line:777
lowerOptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerOptionalTypeRef(otref: in.OptionalTypeRef): out.OptionalTypeRef = otref match {$/;"	methods	line:374
lowerParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerParam(param: in.Param): out.Param = withPosOf(param, param match {$/;"	methods	line:338
lowerPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def lowerPart(pair: (in.CallPart, out.AtomicExpr)) = withPosOf(pair._1,$/;"	methods	line:722
lowerPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerPath(path: in.AstPath): out.AstPath = withPosOf(path, path match {$/;"	methods	line:369
lowerPathField	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerPathField(optExpTy: Option[Type.Ref])(path: in.PathField) = withPosOf(path, {$/;"	methods	line:357
lowerPathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerPathTypeArg(targ: in.PathTypeArg): out.PathTypeArg = withPosOf(targ, out.PathTypeArg($/;"	methods	line:395
lowerRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerRelDecl($/;"	methods	line:209
lowerRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerRequirement(req: in.PathRequirement) = withPosOf(req, out.PathRequirement($/;"	methods	line:343
lowerStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def lowerStmts(env0: Env, stmts: List[in.Stmt]): List[out.Stmt] = {$/;"	methods	line:415
lowerTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTuple(optExpTy: Option[Type.Ref])(tuple: in.Tuple) = withPosOf(tuple, {$/;"	methods	line:782
lowerTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTupleParam(param: in.TupleParam) = withPosOf(param, {$/;"	methods	line:324
lowerTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeArg(targ: in.TypeArg): out.TypeArg = targ match {$/;"	methods	line:386
lowerTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeRef(tref: in.TypeRef): out.TypeRef = withPosOf(tref, tref match {$/;"	methods	line:379
lowerTypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerTypeTypeArg(targ: in.TypeTypeArg): out.TypeTypeArg = withPosOf(targ, out.TypeTypeArg($/;"	methods	line:391
lowerVar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerVar(optExpTy: Option[Type.Ref])(v: in.Var) = withPosOf(v, {$/;"	methods	line:349
lowerVarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def lowerVarParam(pattern: in.VarParam) = withPosOf(pattern, {$/;"	methods	line:328
loweredMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val loweredMethods = new mutable.HashMap[MethodId, Ast.Lower.MethodDecl]()$/;"	constants	line:110
loweredSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var loweredSource: Ast.Lower.ClassDecl = null$/;"	local variables	line:107
lv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val lv = withPosOf(fromExpr, out.VarLocal(List(), tyAst, nameAst, sym))$/;"	constants	line:548
lvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def lvalues = locals$/;"	methods	line:350
lvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def lvalues = params$/;"	methods	line:335
lvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def lvalues: List[Lvalue]$/;"	methods	line:293
m	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^                val m = allImports.firstSome { $/;"	constants	line:37
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^    def main(args: Array[String]) {$/;"	methods	line:8
main	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Application.java	/^    public void main(String[] args);$/;"	method	line:5
main	/Users/niko/git/intervals-java/Harmonic/test.py	/^def main(args):$/;"	function	line:654
map	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^class Subst(private val map: Map[Path.Ref, Path.Ref]) {$/;"	constants	line:5
masterDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val masterDesc = methodDescFromSig(masterSig)$/;"	constants	line:895
masterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val masterPatterns = masterSig.parameterPatterns$/;"	constants	line:903
matchesByClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^\/\/    def matchesByClass(pattern: Pattern.Ref, ty: Type.Ref): Boolean = {$/;"	methods	line:427
mathOps	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val mathOps = List($/;"	constants	line:25
maxIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxIndex = 0$/;"	local variables	line:308
maxSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] var maxSlot = 0$/;"	local variables	line:281
mdecls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val mdecls = csym.resolvedSource.members.flatMap(_.asMethodNamed(mthdName))$/;"	constants	line:170
member	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val member: PackratParser[out.MemberDecl] = ($/;"	constants	line:136
memberId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val memberId = methodId(csym, mdecl)$/;"	constants	line:130
memberId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val memberId = methodId(csym, mdecl)$/;"	constants	line:233
methodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val methodDecl = positioned($/;"	constants	line:144
methodDescFromSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def methodDescFromSig(msig: Symbol.MethodSignature[Pattern.Anon]): String = {$/;"	methods	line:66
methodId	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def methodId(csym: Symbol.ClassFromSource, mdecl: in.MethodDecl) = {$/;"	methods	line:21
methodParameterTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def methodParameterTypes(params: List[in.Param]) = $/;"	methods	line:878
methodSig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val methodSig = Symbol.MethodSignature($/;"	constants	line:826
methodSignature	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def methodSignature(msig: Symbol.MethodSignature[Pattern.Anon]) = {$/;"	methods	line:33
methodSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def methodSymbol(clsName: Name.Qual)(mthd: reflect.Method) = {$/;"	methods	line:79
methodSymbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val methodSymbols = new mutable.HashMap[Name.Method, List[Method]]()$/;"	constants	line:109
methods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^        val methods = sym.optMethods.getOrElse {$/;"	constants	line:93
methods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var methods = List[Symbol.Method]()$/;"	local variables	line:52
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def methodsNamed(sym: Symbol.ClassFromReflection, name: Name.Method) = {$/;"	methods	line:92
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def methodsNamed(state: CompilationState)(memName: Name.Method) = {$/;"	methods	line:135
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def methodsNamed(state: CompilationState)(name: Name.Method) = List()$/;"	methods	line:41
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def methodsNamed(state: CompilationState)(name: Name.Method) = {$/;"	methods	line:72
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def methodsNamed(state: CompilationState)(name: Name.Method) = {$/;"	methods	line:95
methodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def methodsNamed(state: CompilationState)(name: Name.Method): List[Symbol.Method]$/;"	methods	line:28
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Byte l, Double r) { return l - r; }$/;"	method	line:129
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Byte r) { return l - r; }$/;"	method	line:204
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Double r) { return l - r; }$/;"	method	line:219
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Float r) { return l - r; }$/;"	method	line:216
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Integer r) { return l - r; }$/;"	method	line:210
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Long r) { return l - r; }$/;"	method	line:213
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Double l, Short r) { return l - r; }$/;"	method	line:207
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Float l, Double r) { return l - r; }$/;"	method	line:201
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Integer l, Double r) { return l - r; }$/;"	method	line:165
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Long l, Double r) { return l - r; }$/;"	method	line:183
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double minus(Short l, Double r) { return l - r; }$/;"	method	line:147
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Byte l, Float r) { return l - r; }$/;"	method	line:126
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Float l, Byte r) { return l - r; }$/;"	method	line:186
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Float l, Float r) { return l - r; }$/;"	method	line:198
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Float l, Integer r) { return l - r; }$/;"	method	line:192
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Float l, Long r) { return l - r; }$/;"	method	line:195
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Float l, Short r) { return l - r; }$/;"	method	line:189
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Integer l, Float r) { return l - r; }$/;"	method	line:162
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Long l, Float r) { return l - r; }$/;"	method	line:180
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float minus(Short l, Float r) { return l - r; }$/;"	method	line:144
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Byte l, Byte r) { return l - r; }$/;"	method	line:114
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Byte l, Integer r) { return l - r; }$/;"	method	line:120
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Byte l, Short r) { return l - r; }$/;"	method	line:117
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Integer l, Byte r) { return l - r; }$/;"	method	line:150
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Integer l, Integer r) { return l - r; }$/;"	method	line:156
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Integer l, Short r) { return l - r; }$/;"	method	line:153
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Short l, Byte r) { return l - r; }$/;"	method	line:132
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Short l, Integer r) { return l - r; }$/;"	method	line:138
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer minus(Short l, Short r) { return l - r; }$/;"	method	line:135
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Byte l, Long r) { return l - r; }$/;"	method	line:123
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Integer l, Long r) { return l - r; }$/;"	method	line:159
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Long l, Byte r) { return l - r; }$/;"	method	line:168
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Long l, Integer r) { return l - r; }$/;"	method	line:174
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Long l, Long r) { return l - r; }$/;"	method	line:177
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Long l, Short r) { return l - r; }$/;"	method	line:171
minus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long minus(Short l, Long r) { return l - r; }$/;"	method	line:141
msg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        def msg = $/;"	methods	line:9
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val msig = subst.methodSignature(msym.msig)$/;"	constants	line:687
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msig = subst.methodSignature(msym.msig)$/;"	constants	line:639
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val msig = msym.msig$/;"	constants	line:593
msig	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val msig: MethodSignature[Pattern.Ref]$/;"	constants	line:164
msym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^                val msym = new Symbol.Method($/;"	constants	line:49
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val msyms = csym.methodSymbols.valuesIterator.toList.flatten$/;"	constants	line:24
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val msyms = csym.constructors(state)$/;"	constants	line:741
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val msyms = env.lookupMethods(rcvr.ty, mcall.name)$/;"	constants	line:716
msyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val msyms = mdecls.map(forMethodDecl)$/;"	constants	line:171
mthdSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def mthdSubst(msym: Symbol.Method, rcvr: Ast#ParseExpr, args: List[Ast#ParseExpr]) = {$/;"	methods	line:592
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:908
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:964
mvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val mvis = cvis.visitMethod($/;"	constants	line:982
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name = Name.Method(parts.map(_.ident))$/;"	methods	line:197
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name = Name.Method(parts.map(_.ident))$/;"	methods	line:580
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name = Name.Var(text)$/;"	methods	line:690
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def name: VarName$/;"	methods	line:309
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val name = freshQualName(accessMap.context)$/;"	constants	line:808
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val name = Name.Qual(cls)$/;"	constants	line:26
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val name: Name.Method,$/;"	constants	line:163
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val name: Name.Qual$/;"	constants	line:24
name	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val name: Name.Var,$/;"	constants	line:190
nameAst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val nameAst = withPosOf(fromExpr, Ast.VarName(text))$/;"	constants	line:546
namePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def namePath(path: in.AstPath): Path.Ref = path match {$/;"	methods	line:48
named	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    \/** Loads a class named `qualName`.  If it fails, reports an $/;"	classes	line:70
names	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    \/\/ ___ Generating fresh, unique class names _____________________________$/;"	classes	line:28
newAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newAnon = positioned($/;"	constants	line:308
newCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newCtor = positioned($/;"	constants	line:314
newExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val newExpr = newAnon | newCtor$/;"	constants	line:320
nl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        var nl = false$/;"	local variables	line:23
noSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val noSuffix = ""$/;"	constants	line:25
noTmplParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val noTmplParam = positioned($/;"	constants	line:275
normalize_whitespace	/Users/niko/git/intervals-java/Harmonic/test.py	/^def normalize_whitespace(str):$/;"	function	line:519
notEsc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def notEsc = elem("escape", c => c != '`' && c != EofCh && c != '\\n')$/;"	methods	line:30
numericTypes	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^    val numericTypes = integralTypes ++ floatTypes$/;"	constants	line:23
objClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val objClass = obj.getClass$/;"	constants	line:582
objectClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectClass = classOf[java.lang.Object]$/;"	constants	line:70
objectTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val objectTy = Type.Class(objectClass)$/;"	constants	line:82
of	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/\/ Symbols which are accessed from an inner class of some kind: $/;"	classes	line:342
oneTmplParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val oneTmplParam = positioned($/;"	constants	line:279
oper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val oper = ($/;"	constants	line:68
operCont	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operCont = elem("operCont", isOperCont)$/;"	methods	line:37
operPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val operPart = positioned($/;"	constants	line:340
operStart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        def operStart = elem("operStart", isOperStart)            $/;"	methods	line:36
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optBody = mdecl.optBody.map(lowerBody(env, _))$/;"	constants	line:244
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val optBody = decl.optBody.map(lowerBody(ThisEnv(csym), _))$/;"	constants	line:285
optBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optBody = ($/;"	constants	line:188
optCtorSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var optCtorSymbol: Option[Symbol.Method] = None$/;"	local variables	line:108
optCtors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var optCtors: Option[List[Symbol.Method]] = None$/;"	local variables	line:87
optExpTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTy = optTypeFromLocal(env, lvalue)$/;"	constants	line:434
optExpTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optExpTys = msym.msig.parameterPatterns.map(p => Some(subst.ty(p.ty)))$/;"	constants	line:637
optFieldValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optFieldValue = opt(positioned($/;"	constants	line:193
optFields	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var optFields: Option[List[Symbol.Var]] = None$/;"	local variables	line:89
optMethods	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var optMethods: Option[List[Symbol.Method]] = None$/;"	local variables	line:88
optSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^    def optSubst(pats_from: List[Pattern.Ref], pats_to: List[Pattern.Ref]) = {$/;"	methods	line:80
optSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optSym = env.lookupField(owner.ty, expr.name.name)$/;"	constants	line:604
optSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val optSym = env.lookupField(owner.ty, path.name.name)$/;"	constants	line:360
optTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optTupleParam = positioned($/;"	constants	line:121
optTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val optTy = env.upperBoundType(expArgumentTy).firstSome {$/;"	constants	line:825
optTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeArg(TypeVarName: Name.Var, optExpTy: Option[Type.Ref]) = optExpTy match {$/;"	methods	line:797
optTypeFromLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def optTypeFromLocal(env: Env, local0: in.Local): Option[Type.Ref] = {$/;"	methods	line:457
optTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val optTypeRef = reqTypeRef | infTypeRef$/;"	constants	line:229
optl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    def optl[A](p: PackratParser[List[A]]) = opt(p) ^^ { _.getOrElse(List()) }$/;"	methods	line:66
or	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    \/\/ local variable.  For example, a field of the current class or$/;"	classes	line:553
out	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val out = new java.io.FileOutputStream(clsFile)$/;"	constants	line:155
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = inArgs.map(lowerExpr(None))$/;"	constants	line:647
outArgs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outArgs = optExpTys.zip(inArgs).map { case (t,a) => lowerExpr(t)(a) }$/;"	constants	line:638
outExprs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outExprs = tys.zip(tuple.exprs).map { case (t, e) => $/;"	constants	line:785
outLocals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLocals = locals.map(lowerLocal(Type.Null, _))$/;"	constants	line:494
outLocals	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLocals = tys.zip(locals).map { case (t, l) => lowerLocal(t, l) }$/;"	constants	line:488
outLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outLvalue = lowerLocal(outRvalue.ty, lvalue)$/;"	constants	line:436
outMdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outMdecl = lowerMethodDecl(csym, mdecl)$/;"	constants	line:144
outMdecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outMdecl = out.MethodDecl($/;"	constants	line:265
outParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outParam = lowerBlockArgument(expArgumentTy, tmpl.param)$/;"	constants	line:878
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = locals.map(lowerBlockArgument(Type.Object, _))$/;"	constants	line:837
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val outParams = tys.zip(locals).map { case (t, l) => lowerBlockArgument(t, l) }$/;"	constants	line:832
outParams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outParams = tys.zip(locals).map { case (t, l) => lowerBlockArgument(t, l) }$/;"	constants	line:818
outRvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val outRvalue = lowerExpr(optExpTy)(rvalue)$/;"	constants	line:435
outStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val outStmts = lowerStmts(subenv, tmpl.stmts)$/;"	constants	line:881
outputDir	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var outputDir = new File(".")$/;"	local variables	line:15
overriddenDesc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val overriddenDesc = methodDescFromSig(overriddenSig)$/;"	constants	line:896
overriddenPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val overriddenPatterns = overriddenSig.parameterPatterns$/;"	constants	line:904
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^      * in the current class overrides a method with signature $/;"	classes	line:395
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def overrides($/;"	methods	line:400
overrides	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val overrides = new mutable.ListBuffer[Symbol.Method]()$/;"	constants	line:168
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val owner = lowerExprToVar(None)(expr.owner)$/;"	constants	line:603
owner	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val owner = lowerPath(path.owner)$/;"	constants	line:359
ownerAsmType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                        val ownerAsmType = asmType(msig.receiverTy)$/;"	constants	line:612
packageDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val packageDecl = positioned($/;"	constants	line:100
param	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val param: PackratParser[out.Param] = tupleParam | varParam$/;"	constants	line:216
paramAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramAsmTys = methodParameterTypes(decl.params).map(asmType)$/;"	constants	line:963
paramAsmTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val paramAsmTys = methodParameterTypes(decl.params).map(asmType)$/;"	constants	line:981
paramPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def paramPattern(pair: (reflect.Type, Int)) = {$/;"	methods	line:51
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val parameterPatterns = mdecl.params.map(symbolPattern)$/;"	constants	line:241
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val parameterPatterns = mdecl.params.map(symbolPattern)$/;"	constants	line:22
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val parameterPatterns = name.parts.zipWithIndex.map { case (_, i) => $/;"	constants	line:172
parameterPatterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val parameterPatterns: List[P]        $/;"	constants	line:183
parameterSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val parameterSyms = parameterPatterns.flatMap(Pattern.createVarSymbols)$/;"	constants	line:242
parameterTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val parameterTys = msym.msig.parameterPatterns.map(p => subst.ty(p.ty))$/;"	constants	line:654
params	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def params = parts.map(_.param)$/;"	methods	line:198
parser	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val parser = new Parse()$/;"	constants	line:385
patSubst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def patSubst(subst: Subst)(pat: Pattern.Ref, expr: Ast#ParseExpr): Subst = {$/;"	methods	line:564
patSubsts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        def patSubsts(allPatterns: List[Pattern.Ref], allExprs: List[Ast#ParseExpr]): Subst = {$/;"	methods	line:585
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val path = positioned($/;"	constants	line:264
path	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def path(p: Path.Ref): Path.Ref = (map.get(p), p) match {$/;"	methods	line:10
pathToFreshSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pathToFreshSlot(asmTy: asm.Type) = {$/;"	methods	line:283
pathType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathType = positioned($/;"	constants	line:243
pathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pathTypeArg = positioned($/;"	constants	line:258
pathsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def pathsAreEquatable(path1: Path.Ref, path2: Path.Ref) = equatable(path1) contains path2$/;"	methods	line:212
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(P1: Path.Ref, Rel: PcRel): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:91
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel): List[(Path.Ref, Path.Ref)] = pathRels.flatMap { $/;"	methods	line:81
pathsRelatedBy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def pathsRelatedBy(Rel: PcRel, P2: Path.Ref): List[Path.Ref] = pathRels.flatMap { $/;"	methods	line:86
pattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def pattern(p: Pattern.Anon): Pattern.Anon = p match {$/;"	methods	line:16
patternType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def patternType(param: in.Param): Type.Ref = param match {$/;"	methods	line:26
patterns	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def patterns: List[Pattern.Anon]$/;"	methods	line:25
pcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val pcRel = ($/;"	constants	line:163
pkgQualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^            val pkgQualName = pkg.qualName$/;"	constants	line:104
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Byte l, Double r) { return l + r; }$/;"	method	line:21
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Byte r) { return l + r; }$/;"	method	line:96
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Double r) { return l + r; }$/;"	method	line:111
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Float r) { return l + r; }$/;"	method	line:108
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Integer r) { return l + r; }$/;"	method	line:102
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Long r) { return l + r; }$/;"	method	line:105
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Double l, Short r) { return l + r; }$/;"	method	line:99
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Float l, Double r) { return l + r; }$/;"	method	line:93
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Integer l, Double r) { return l + r; }$/;"	method	line:57
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Long l, Double r) { return l + r; }$/;"	method	line:75
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double plus(Short l, Double r) { return l + r; }$/;"	method	line:39
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Byte l, Float r) { return l + r; }$/;"	method	line:18
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Float l, Byte r) { return l + r; }$/;"	method	line:78
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Float l, Float r) { return l + r; }$/;"	method	line:90
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Float l, Integer r) { return l + r; }$/;"	method	line:84
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Float l, Long r) { return l + r; }$/;"	method	line:87
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Float l, Short r) { return l + r; }$/;"	method	line:81
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Integer l, Float r) { return l + r; }$/;"	method	line:54
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Long l, Float r) { return l + r; }$/;"	method	line:72
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float plus(Short l, Float r) { return l + r; }$/;"	method	line:36
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Byte l, Byte r) { return l + r; }$/;"	method	line:6
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Byte l, Integer r) { return l + r; }$/;"	method	line:12
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Byte l, Short r) { return l + r; }$/;"	method	line:9
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Integer l, Byte r) { return l + r; }$/;"	method	line:42
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Integer l, Integer r) { return l + r; }$/;"	method	line:48
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Integer l, Short r) { return l + r; }$/;"	method	line:45
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Short l, Byte r) { return l + r; }$/;"	method	line:24
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Short l, Integer r) { return l + r; }$/;"	method	line:30
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer plus(Short l, Short r) { return l + r; }$/;"	method	line:27
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Byte l, Long r) { return l + r; }$/;"	method	line:15
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Integer l, Long r) { return l + r; }$/;"	method	line:51
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Long l, Byte r) { return l + r; }$/;"	method	line:60
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Long l, Integer r) { return l + r; }$/;"	method	line:66
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Long l, Long r) { return l + r; }$/;"	method	line:69
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Long l, Short r) { return l + r; }$/;"	method	line:63
plus	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long plus(Short l, Long r) { return l + r; }$/;"	method	line:33
plusClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusClassDecl(cdecl: Ast.Lower.ClassDecl) = {$/;"	methods	line:72
plusPathRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRel(rel: (Path.Ref, PcRel, Path.Ref)) = copy(pathRels = rel :: pathRels)$/;"	methods	line:64
plusPathRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusPathRels(rels: List[(Path.Ref, PcRel, Path.Ref)]) = rels.foldLeft(this)(_ plusPathRel _)$/;"	methods	line:66
plusSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusSym(sym: Symbol.Var) = copy(locals = locals + (sym.name -> sym))$/;"	methods	line:60
plusSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusSyms(syms: Iterable[Symbol.Var]) = syms.foldLeft(this)(_ plusSym _)$/;"	methods	line:62
plusTypeRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRel(rel: (Type.Var, TcRel, Type.Ref)) = copy(typeRels = rel :: typeRels)$/;"	methods	line:68
plusTypeRels	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def plusTypeRels(rels: List[(Type.Var, TcRel, Type.Ref)]) = rels.foldLeft(this)(_ plusTypeRel _)$/;"	methods	line:70
popRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def popRvalues(lvalue: in.Lvalue, rvalue: in.Expr) {$/;"	methods	line:471
pos	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def pos = new OffsetPosition(source, offset) with InterPosition {$/;"	methods	line:377
posString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def posString(pos: Position) = {$/;"	methods	line:22
potentiallyApplicable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    def potentiallyApplicable(msym: Symbol.Method) = {$/;"	methods	line:652
pps_sub	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sub = msig_sub.parameterPatterns$/;"	constants	line:404
pps_sup	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val pps_sup = msig_sup.parameterPatterns$/;"	constants	line:405
primType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val primType = primitives(objClass)$/;"	constants	line:584
primitives	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    val primitives = Map[java.lang.Class[_], asm.Type]($/;"	constants	line:45
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def print(out: PrettyPrinter) {$/;"	methods	line:652
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:144
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:171
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:183
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:205
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:220
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:239
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:260
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:274
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:300
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:317
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:378
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:388
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:401
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:446
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:487
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:511
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:525
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:545
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:564
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:573
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:585
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:595
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:607
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:639
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def print(out: PrettyPrinter) {$/;"	methods	line:97
print	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def print(out: PrintStream) = this.synchronized {$/;"	methods	line:29
printOptBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printOptBody(out: PrettyPrinter, optBody: Option[Body]) = optBody match {$/;"	methods	line:158
printSep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSep(out: PrettyPrinter, asts: List[Node], sep: String) {$/;"	methods	line:68
printSepFunc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    private def printSepFunc(out: PrettyPrinter, asts: List[Node], sepfunc: (() => Unit)) {$/;"	methods	line:60
printc	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printc(out: PrettyPrinter) {$/;"	methods	line:666
printdot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printdot(out: PrettyPrinter) {$/;"	methods	line:661
println	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def println(out: PrettyPrinter) {$/;"	methods	line:671
printsemiln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsemiln(out: PrettyPrinter) {$/;"	methods	line:458
printsp	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def printsp(out: PrettyPrinter) {$/;"	methods	line:656
processOper	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        protected def processOper(name: String) = {$/;"	methods	line:46
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:197
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:218
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor) {$/;"	methods	line:248
push	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def push(mvis: asm.MethodVisitor): Unit$/;"	methods	line:181
pushAnonymousBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushAnonymousBlock($/;"	methods	line:805
pushExprValue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushExprValue(expr: in.Expr) {$/;"	methods	line:527
pushIntegerConstant	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushIntegerConstant(value: Int) = value match {$/;"	methods	line:74
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:201
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:225
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:258
pushLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:184
pushRvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushRvalues(lvalue: Pattern.Anon, rvalue: in.Expr) {$/;"	methods	line:449
pushStatement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def pushStatement(stmt: in.Stmt) {$/;"	methods	line:700
qualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^                        val qualName = pkg.qualName \/ nm$/;"	constants	line:45
queue2	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val queue2 = $/;"	constants	line:45
queued	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val queued = new mutable.Queue[Symbol.Class]()$/;"	constants	line:208
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val rcvr = in.Var(Ast.VarName(tvar), ())$/;"	constants	line:743
rcvr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val rcvr = lowerExpr(None)(mcall.rcvr)$/;"	constants	line:715
reader	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val reader = new FileReader(interFile, PagedSeq.fromReader(javaReader), 0)$/;"	constants	line:387
receiverAnonPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def receiverAnonPattern: Pattern.AnonVar = Pattern.SubstdVar(receiverTy)$/;"	methods	line:185
receiverAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val receiverAsmTy = asm.Type.getObjectType(csym.name.internalName)$/;"	constants	line:980
receiverSummary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val receiverSummary = summarizeSymbolsInExpr(summary, receiver)$/;"	constants	line:382
receiverSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val receiverSym = new Symbol.Var(Name.ThisVar, Type.Class(clsName, List()))$/;"	constants	line:240
receiverTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val receiverTy: Type.Ref,$/;"	constants	line:182
redirect	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            def redirect(optName: Option[Name.Var], accessPath: AccessPath): AccessPath = {$/;"	methods	line:747
redirectedAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val redirectedAccessPath = redirect(Some(sym.name), accessPath)$/;"	constants	line:792
reflClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val reflClasses = config.reflectiveClasses(qualName)$/;"	constants	line:117
reflectiveClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def reflectiveClasses(name: Name.Qual) = {$/;"	methods	line:60
relBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relBase = positioned(ident ^^ out.RelBase)$/;"	constants	line:78
relDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDecl = positioned($/;"	constants	line:203
relDot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relDot = positioned($/;"	constants	line:80
relName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val relName = relDot | relBase$/;"	constants	line:85
relPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val relPath = qualName.components.mkString("\/") + suffix + ext$/;"	constants	line:123
relativeFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def relativeFiles(paths: ListBuffer[File], ext: String)(name: Name.Qual) = {$/;"	methods	line:48
remove	/Users/niko/git/intervals-java/Harmonic/test.py	/^def remove(filenm):$/;"	function	line:475
remove_all	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def remove_all(self):$/;"	member	line:462
report	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^    def report(pos: Position, msgKey: String, msgArgs: String*) = this.synchronized {$/;"	methods	line:18
reporter	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val reporter: Reporter$/;"	constants	line:9
representing	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Creates a new class representing the statements$/;"	classes	line:800
reqTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val reqTypeRef = ":"~>typeRef$/;"	constants	line:235
requireLoadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    def requireLoadedOrLoadable(pos: Position, qualName: Name.Qual) = {$/;"	methods	line:72
requireLoadedOrLoadable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def requireLoadedOrLoadable(node: Ast.Node, qname: Name.Qual) {$/;"	methods	line:30
requirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val requirement = positioned($/;"	constants	line:154
resolveAnnotation	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveAnnotation(ann: in.Annotation) = withPosOf(ann, out.Annotation($/;"	methods	line:73
resolveBlock	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveBlock(tmpl: in.Block) = withPosOf(tmpl, out.Block($/;"	methods	line:245
resolveBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveBody(body: in.Body) = withPosOf(body, out.Body($/;"	methods	line:254
resolveClassDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveClassDecl(cdecl: in.ClassDecl) = withPosOf(cdecl, out.ClassDecl($/;"	methods	line:64
resolveDeclPart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveDeclPart(decl: in.DeclPart) = withPosOf(decl, out.DeclPart($/;"	methods	line:118
resolveExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveExpr(expr: in.Expr): out.Expr = withPosOf(expr, expr match {$/;"	methods	line:216
resolveFieldDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveFieldDecl(decl: in.FieldDecl) = withPosOf(decl, out.FieldDecl($/;"	methods	line:129
resolveIntervalDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveIntervalDecl(decl: in.IntervalDecl) = withPosOf(decl, out.IntervalDecl($/;"	methods	line:101
resolveLiteral	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveLiteral(expr: in.Literal) = {$/;"	methods	line:231
resolveLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveLocal(local: in.Local): out.Local = withPosOf(local, local match {$/;"	methods	line:186
resolveMember	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveMember(mem: in.MemberDecl): out.MemberDecl = withPosOf(mem, mem match {$/;"	methods	line:93
resolveMethodDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveMethodDecl(decl: in.MethodDecl) = withPosOf(decl, out.MethodDecl($/;"	methods	line:108
resolveName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveName(rn: in.RelName) = withPosOf(rn, Ast.AbsName(resolveToQualName(rn)))$/;"	methods	line:60
resolveNewAnon	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveNewAnon(expr: in.NewAnon): out.NewAnon = withPosOf(expr, {$/;"	methods	line:205
resolveNewCtor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveNewCtor(expr: in.NewCtor): out.NewCtor = withPosOf(expr, {$/;"	methods	line:196
resolveOptionalTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveOptionalTypeRef(otref: in.OptionalTypeRef): out.OptionalTypeRef = withPosOf(otref, otref match {$/;"	methods	line:149
resolveParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveParam(param: in.Param): out.Param = withPosOf(param, param match {$/;"	methods	line:77
resolvePart	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolvePart(part: in.CallPart) = withPosOf(part, out.CallPart($/;"	methods	line:236
resolvePath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolvePath(path: in.AstPath): out.AstPath = withPosOf(path, path match {$/;"	methods	line:144
resolvePathTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolvePathTypeArg(targ: in.PathTypeArg): out.PathTypeArg = withPosOf(targ, out.PathTypeArg($/;"	methods	line:170
resolveRelDecl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveRelDecl(decl: in.RelDecl) = withPosOf(decl, out.RelDecl($/;"	methods	line:137
resolveRequirement	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveRequirement(requirement: in.PathRequirement) = withPosOf(requirement, out.PathRequirement($/;"	methods	line:123
resolveStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveStmt(stmt: in.Stmt): out.Stmt = withPosOf(stmt, stmt match {$/;"	methods	line:176
resolveStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveStmts(stmts: List[in.Stmt]) = stmts.map(resolveStmt)$/;"	methods	line:174
resolveToQualName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveToQualName(rn: in.RelName): Name.Qual = rn match {$/;"	methods	line:34
resolveTuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTuple(tuple: in.Tuple) = withPosOf(tuple, out.Tuple($/;"	methods	line:241
resolveTupleLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTupleLocal(tupLocal: in.TupleLocal): out.TupleLocal = withPosOf(tupLocal, {$/;"	methods	line:182
resolveTupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTupleParam(tupleParam: in.TupleParam) = withPosOf(tupleParam, out.TupleParam($/;"	methods	line:82
resolveTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTypeArg(targ: in.TypeArg): out.TypeArg = withPosOf(targ, targ match {$/;"	methods	line:161
resolveTypeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTypeRef(tref: in.TypeRef): out.TypeRef = withPosOf(tref, tref match {$/;"	methods	line:154
resolveTypeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveTypeTypeArg(targ: in.TypeTypeArg): out.TypeTypeArg = withPosOf(targ, out.TypeTypeArg($/;"	methods	line:166
resolveVarParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        def resolveVarParam(varParam: in.VarParam) = withPosOf(varParam, out.VarParam($/;"	methods	line:86
resolvedClassDecls	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Resolve.scala	/^        val resolvedClassDecls = compUnit.classes.map(resolveClassDecl)$/;"	constants	line:258
resolvedSource	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var resolvedSource: Ast.Resolve.ClassDecl = null$/;"	local variables	line:106
rest	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def rest: FileReader =$/;"	methods	line:370
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                            val result = AccessField(thisAccessPath, fieldName.javaName, asmType)$/;"	constants	line:775
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val result = freshCounter$/;"	constants	line:149
result	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val result = new ListBuffer[out.Stmt]()$/;"	constants	line:417
returnAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val returnAsmTy = asmType(decl.returnTy)$/;"	constants	line:962
returnAsmTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val returnAsmTy = asmType(decl.returnTy)$/;"	constants	line:979
returnClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnClass = numericTypes(returnIndex)$/;"	constants	line:44
returnIndex	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnIndex = Math.max($/;"	constants	line:37
returnResultOfStatements	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def returnResultOfStatements(stmts: List[in.Stmt]) {$/;"	methods	line:713
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(data: MCallData) = data._2.returnTy$/;"	methods	line:760
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: Unit) = ()$/;"	methods	line:717
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def returnTy(unit: Unit) = ()$/;"	methods	line:738
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def returnTy(data: MCallData): Ty$/;"	methods	line:58
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val returnTy = Type.Class(returnClass)$/;"	constants	line:47
returnTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val returnTy: Type.Ref,$/;"	constants	line:181
rightTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^            val rightTy = Type.Class(rightClass)$/;"	constants	line:46
rvalues	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val rvalues = masterPatterns.zip(overriddenPatterns).map { case (masterPattern, overriddenPattern) =>$/;"	constants	line:932
sFile	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sFile = fileWithExtension(".s")$/;"	constants	line:131
sameLength	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def sameLength(lst1: List[_], lst2: List[_]) = (lst1.length == lst2.length)$/;"	methods	line:14
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        private[this] def sep = if(async) ("{{", "}}") else ("{", "}")$/;"	methods	line:504
sep	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val sep = "()[]{};@\\"\\'."$/;"	constants	line:32
set_compile_opts	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def set_compile_opts(self, opts):$/;"	member	line:410
slot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val slot = maxSlot$/;"	constants	line:284
sorted	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reporter.scala	/^        val sorted = errors.toList.sortWith((e1, e2) => e1.pos < e2.pos)$/;"	constants	line:30
sourceExt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val sourceExt = ".harm"$/;"	constants	line:10
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^        val sourceFiles = config.sourceFiles(qualName)$/;"	constants	line:115
sourceFiles	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    def sourceFiles(name: Name.Qual) = relativeFiles(sourcePaths, sourceExt)(name)$/;"	methods	line:57
sourcePaths	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val sourcePaths = new ListBuffer[File]()$/;"	constants	line:12
specialize	/Users/niko/git/intervals-java/Harmonic/test.py	/^    def specialize(self, cmd):$/;"	member	line:413
start_fragment	/Users/niko/git/intervals-java/Harmonic/test.py	/^def start_fragment(self, name):$/;"	function	line:290
stashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stashSlot = maxSlot$/;"	constants	line:298
state	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Main.scala	/^                val state = new CompilationState(config, new Reporter(config))$/;"	constants	line:12
stmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmt: PackratParser[out.Stmt] = positioned($/;"	constants	line:349
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor(accessMap, mvis)$/;"	constants	line:997
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val stmtVisitor = new StatementVisitor(derivedAccessMap, tmplmvis)$/;"	constants	line:853
stmtVisitor	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val stmtVisitor = new StatementVisitor(accessMap, mvis)$/;"	constants	line:941
stmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val stmts: PackratParser[List[out.Stmt]] = ($/;"	constants	line:359
store	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def store(lvalue: in.Lvalue, rvalue: in.Expr) {$/;"	methods	line:422
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:204
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:230
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor) {$/;"	methods	line:262
storeLvalue	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalue(mvis: asm.MethodVisitor): Unit$/;"	methods	line:187
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:208
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:234
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor) {$/;"	methods	line:271
storeLvalueWithoutPush	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def storeLvalueWithoutPush(mvis: asm.MethodVisitor): Unit$/;"	methods	line:190
subenv	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val subenv = env.plusSyms(outParam.symbols)$/;"	constants	line:880
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val subst = Subst(Path.This -> base)$/;"	constants	line:182
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val subst = pps_sub.zip(pps_sup).foldLeft(Subst.empty)(addOverrideSubst)$/;"	constants	line:406
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                            val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:686
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                        val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:653
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val subst = mthdSubst(msym, inRcvr, inArgs)$/;"	constants	line:636
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val subst = Subst(Path.This -> owner.toPath)$/;"	constants	line:361
subst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val subst = Subst(Path.This -> owner.toPath)$/;"	constants	line:605
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(P1: Path.Ref): Iterable[Path.Ref] = {$/;"	methods	line:195
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(item: T): Iterable[T]$/;"	methods	line:55
successors	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        protected[this] def successors(ty: Type.Ref) = ty match {$/;"	methods	line:217
summarizeSymbolsInExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInExpr(summary: SymbolSummary, expr: in.Expr): SymbolSummary = {$/;"	methods	line:366
summarizeSymbolsInStmt	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmt(summary: SymbolSummary, stmt: in.Stmt): SymbolSummary = {$/;"	methods	line:391
summarizeSymbolsInStmts	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def summarizeSymbolsInStmts(stmts: List[in.Stmt]) = {$/;"	methods	line:409
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:743
summary	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val summary = summarizeSymbolsInStmts(stmts)$/;"	constants	line:1022
summaryExpr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryExpr = summarizeSymbolsInExpr(summary, expr)$/;"	constants	line:400
summaryTmpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val summaryTmpl = summarizeSymbolsInStmts(tmpl.stmts)$/;"	constants	line:370
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val superClassNames = csym.superClassNames(state).toList$/;"	constants	line:1037
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def superClassNames(state: CompilationState) = List() \/\/ // FIXME TODO$/;"	methods	line:94
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def superClassNames(state: CompilationState) = List()$/;"	methods	line:40
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def superClassNames(state: CompilationState) = {$/;"	methods	line:131
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def superClassNames(state: CompilationState) = {$/;"	methods	line:67
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def superClassNames(state: CompilationState): List[Name.Qual]$/;"	methods	line:27
superClassNames	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        var superClassNames = List[Name.Qual]()$/;"	local variables	line:51
superClasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val superClasses = opt("extends"~>comma1(relName)) ^^ {$/;"	constants	line:110
superMsyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^                val superMsyms = superSym.methodsNamed(state)(msym.name)$/;"	constants	line:27
superSyms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/GatherOverrides.scala	/^        val superSyms = Symbol.superclasses(state, csym)$/;"	constants	line:23
superclasses	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^    def superclasses(state: CompilationState, csym: Symbol.Class) = {$/;"	methods	line:207
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def sym: VSym$/;"	methods	line:310
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                val sym = new Symbol.Var(name, ty)$/;"	constants	line:927
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^                val sym = classes(cdecl.name.qualName).asInstanceOf[Symbol.ClassFromSource]$/;"	constants	line:51
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val sym = locals.get(name).getOrElse(Symbol.errorVar(name, None))$/;"	constants	line:175
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val sym = lookupFieldOrError(typedBase.ty, name, None)$/;"	constants	line:181
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = env.lookupFieldOrError(astOwner.ty, name, None)$/;"	constants	line:65
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = env.lookupLocal(pattern.name.name).get \/\/ should be a variable already created$/;"	constants	line:329
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = env.lookupLocal(v.name.name).getOrElse {$/;"	constants	line:350
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = env.lookupThis$/;"	constants	line:917
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = new Symbol.Var(Name.Var(text), toExpr.ty)$/;"	constants	line:545
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = optSym.getOrElse {$/;"	constants	line:362
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val sym = optSym.getOrElse {$/;"	constants	line:606
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^        val sym = env.lookupLocalOrError(name, None)$/;"	constants	line:58
sym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def sym: Symbol.Var$/;"	methods	line:18
symTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symTy(unit: Unit) = ()$/;"	methods	line:715
symTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symTy(unit: Unit) = ()$/;"	methods	line:736
symTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symTy(vsym: Symbol.Var) = vsym.ty$/;"	methods	line:758
symTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def symTy(vsym: VSym): Ty$/;"	methods	line:56
sym_pat	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_pat = state.classes(name_pat)$/;"	constants	line:266
sym_val	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^                val sym_val = state.classes(name_val)$/;"	constants	line:265
symbolPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def symbolPattern(param: in.Param): Pattern.Ref = param match {$/;"	methods	line:31
symbolType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def symbolType(tref: in.TypeRef): Type.Ref = tref match {$/;"	methods	line:36
symbolTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def symbolTypeArg(targ: in.TypeArg): Type.Arg = targ match {$/;"	methods	line:43
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols = List(sym)$/;"	methods	line:313
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols = lvalues.flatMap(_.symbols)$/;"	methods	line:296
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def symbols: List[VSym]$/;"	methods	line:289
symbols	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    \/\/ ___ Loading and resolving class symbols ______________________________$/;"	classes	line:35
symbolsDeclaredInLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsDeclaredInLocal(local: in.Local): List[Symbol.Var] = local match {$/;"	methods	line:360
symbolsForMethodsNamed	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def symbolsForMethodsNamed($/;"	methods	line:114
symbolsReassignedInLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def symbolsReassignedInLocal(local: in.Local): List[Symbol.Var] = local match {$/;"	methods	line:354
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val syms = new mutable.HashMap[Symbol.Var, AccessPath]()$/;"	constants	line:280
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val syms = sym.cls.getConstructors.map(ctorSymbol(sym.name)).toList$/;"	constants	line:73
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val syms = sym.cls.getDeclaredFields.map(fieldSymbol).toList$/;"	constants	line:103
syms	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val syms = sym.cls.getDeclaredMethods.map(methodSymbol(sym.name)).toList$/;"	constants	line:94
targ	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val targ = typeArg(Name.ArrayElem, gat.getGenericComponentType).get$/;"	constants	line:31
targs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val targs = tparams.zip(pt.getActualTypeArguments).flatMap(typeArg)$/;"	constants	line:38
tcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tcRel = ($/;"	constants	line:175
templateClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val templateClass = classOf[inter.lang.Block[_, _]]$/;"	constants	line:72
templateTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        def templateTy($/;"	methods	line:85
test	/Users/niko/git/intervals-java/Harmonic/Makefile	/^test: compile$/;"	targets	line:35
test_file	/Users/niko/git/intervals-java/Harmonic/test.py	/^def test_file(filenm):$/;"	function	line:574
text	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val text = tmpVarName(fromExpr)$/;"	constants	line:544
that	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    \/** Base class that captures the basic pattern of computing$/;"	classes	line:34
theOldCollegeTry	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            def theOldCollegeTry(local: in.Local): Type.Ref = local match {$/;"	methods	line:460
thisAccessPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val thisAccessPath = derivedAccessMap.pathToFreshSlot(asmClassType(cname))$/;"	constants	line:745
thisPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        def thisPattern: Pattern.Var = Pattern.Var(Name.ThisVar, receiverTy)$/;"	methods	line:186
thisPtr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val thisPtr = accessMap.pathToFreshSlot(asmType(Type.Class(className, List()))) \/\/ reserve this ptr$/;"	constants	line:916
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Byte l, Double r) { return l * r; }$/;"	method	line:237
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Byte r) { return l * r; }$/;"	method	line:312
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Double r) { return l * r; }$/;"	method	line:327
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Float r) { return l * r; }$/;"	method	line:324
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Integer r) { return l * r; }$/;"	method	line:318
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Long r) { return l * r; }$/;"	method	line:321
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Double l, Short r) { return l * r; }$/;"	method	line:315
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Float l, Double r) { return l * r; }$/;"	method	line:309
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Integer l, Double r) { return l * r; }$/;"	method	line:273
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Long l, Double r) { return l * r; }$/;"	method	line:291
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Double times(Short l, Double r) { return l * r; }$/;"	method	line:255
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Byte l, Float r) { return l * r; }$/;"	method	line:234
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Float l, Byte r) { return l * r; }$/;"	method	line:294
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Float l, Float r) { return l * r; }$/;"	method	line:306
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Float l, Integer r) { return l * r; }$/;"	method	line:300
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Float l, Long r) { return l * r; }$/;"	method	line:303
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Float l, Short r) { return l * r; }$/;"	method	line:297
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Integer l, Float r) { return l * r; }$/;"	method	line:270
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Long l, Float r) { return l * r; }$/;"	method	line:288
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Float times(Short l, Float r) { return l * r; }$/;"	method	line:252
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Byte l, Byte r) { return l * r; }$/;"	method	line:222
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Byte l, Integer r) { return l * r; }$/;"	method	line:228
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Byte l, Short r) { return l * r; }$/;"	method	line:225
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Integer l, Byte r) { return l * r; }$/;"	method	line:258
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Integer l, Integer r) { return l * r; }$/;"	method	line:264
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Integer l, Short r) { return l * r; }$/;"	method	line:261
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Short l, Byte r) { return l * r; }$/;"	method	line:240
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Short l, Integer r) { return l * r; }$/;"	method	line:246
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Integer times(Short l, Short r) { return l * r; }$/;"	method	line:243
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Byte l, Long r) { return l * r; }$/;"	method	line:231
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Integer l, Long r) { return l * r; }$/;"	method	line:267
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Long l, Byte r) { return l * r; }$/;"	method	line:276
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Long l, Integer r) { return l * r; }$/;"	method	line:282
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Long l, Long r) { return l * r; }$/;"	method	line:285
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Long l, Short r) { return l * r; }$/;"	method	line:279
times	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicMathGen.java	/^    Long times(Short l, Long r) { return l * r; }$/;"	method	line:249
tmpVarName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^    def tmpVarName(fromExpr: Ast#ParseExpr) = {$/;"	methods	line:406
tmplBody	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tmplBody: PackratParser[(out.OptionalTypeRef, out.TupleLocal, List[out.Stmt])] = ($/;"	constants	line:284
tmplmvis	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplmvis = tmplwr.cvis.visitMethod($/;"	constants	line:833
tmplwr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^            val tmplwr = new ClassWriter(name, noSuffix)$/;"	constants	line:810
toAbs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toAbs(pkg: AbsName) = withPosOf(this, Ast.AbsName(toQual(pkg.qualName)))$/;"	methods	line:76
toBeBytecoded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val toBeBytecoded = new mutable.Queue[Symbol.ClassFromSource]()$/;"	constants	line:13
toBeLowered	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    val toBeLowered = new mutable.Queue[Symbol.ClassFromSource]()$/;"	constants	line:12
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPath = Path.Base(name.name)$/;"	methods	line:558
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPath = Path.Field(owner.toPath, name.name)$/;"	methods	line:439
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPath: Path.Ref$/;"	methods	line:434
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def toPath = Path.Base(this)$/;"	methods	line:57
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Base(v)$/;"	methods	line:23
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath = Path.Field(base.toPath, sym.name)$/;"	methods	line:26
toPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def toPath: Path.Ref$/;"	methods	line:20
toPattern	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toPattern(lvalue: Lvalue): Pattern.Ref = lvalue match {$/;"	methods	line:762
toQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toQual(pkg: Name.Qual) = context.toQual(pkg) \/ component$/;"	methods	line:85
toQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toQual(pkg: Name.Qual) = pkg \/ nm$/;"	methods	line:81
toQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toQual(pkg: Name.Qual) = qualName$/;"	methods	line:684
toQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toQual(pkg: Name.Qual): Name.Qual$/;"	methods	line:678
toQual	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def toQual(pkg: Name.Qual): Name.Qual$/;"	methods	line:77
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(annotations, tref, name)$/;"	methods	line:315
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, kind, right)$/;"	methods	line:259
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(left, rel, right)$/;"	methods	line:218
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:424
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s %s".format(name, rel, typeRef)$/;"	methods	line:417
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s %s".format(ident, arg)$/;"	methods	line:571
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s = %s".format(lvalue, rvalue)$/;"	methods	line:543
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s%s".format(ident, param)$/;"	methods	line:182
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(context, component)$/;"	methods	line:86
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(owner, name)$/;"	methods	line:562
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s.%s".format(rcvr, parts.mkString(" "))$/;"	methods	line:583
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s: %s".format(name, body)$/;"	methods	line:637
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "%s:%s".format(path, typeVar)$/;"	methods	line:386
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(exprs.mkString(", "))$/;"	methods	line:483
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(lvalues.mkString(", "))$/;"	methods	line:298
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)".format(types.mkString(", "))$/;"	methods	line:376
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "(%s)(%s)".format(typeRef, expr)$/;"	methods	line:523
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<(Void)null>"$/;"	methods	line:626
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<infer>"$/;"	methods	line:366
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "<this>"$/;"	methods	line:631
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[%s]".format(name)$/;"	methods	line:272
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[class %s%s]".format($/;"	methods	line:140
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[interval %s(%s)]".format(name, optParent)$/;"	methods	line:169
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "[method %s]".format(name)$/;"	methods	line:199
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s(%s)".format(fromName, toName)$/;"	methods	line:123
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "import %s.*".format(fromName)$/;"	methods	line:129
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s { ... }".format(tref, arg)$/;"	methods	line:605
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "new %s%s".format(tref, arg)$/;"	methods	line:593
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "null"$/;"	methods	line:619
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = "{...}"$/;"	methods	line:445
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = Type.Null.toString$/;"	methods	line:372
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = name.toString$/;"	methods	line:556
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = nm$/;"	methods	line:82
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = obj.toString$/;"	methods	line:537
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = owner + " " + name$/;"	methods	line:438
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = qualName.toString$/;"	methods	line:683
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = text$/;"	methods	line:691
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:396
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        override def toString = {$/;"	methods	line:506
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = components.mkString(".")$/;"	methods	line:11
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = parts.mkString("", "()", "()")$/;"	methods	line:48
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        override def toString = text$/;"	methods	line:59
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^            override def toString = "operator '%s'".format(chars)$/;"	methods	line:24
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = base.toString + f.toString$/;"	methods	line:11
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        override def toString = v.toString$/;"	methods	line:8
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "->"$/;"	methods	line:20
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "="$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "inlineSubOf"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "locks"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsRd"$/;"	methods	line:34
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "permitsWr"$/;"	methods	line:30
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PcRel.scala	/^    override def toString = "subOf"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        override def toString = "%s(%s, %x)".format($/;"	methods	line:31
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        override def toString = "Method(%s, %x)".format(name, System.identityHashCode(this))$/;"	methods	line:166
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        override def toString = "Var(%s, %x)".format(name, System.identityHashCode(this))$/;"	methods	line:193
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":"$/;"	methods	line:6
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = ":>"$/;"	methods	line:14
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/TcRel.scala	/^    override def toString = "<:"$/;"	methods	line:10
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, path)$/;"	methods	line:31
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s %s %s".format(name, rel, ty)$/;"	methods	line:34
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "%s:%s".format(path, typeVar)$/;"	methods	line:12
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "(%s)".format(typeRefs.mkString(", "))$/;"	methods	line:23
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = "Null"$/;"	methods	line:26
toString	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Type.scala	/^        override def toString = $/;"	methods	line:15
toSym	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val toSym = state.classes(toName)$/;"	constants	line:104
token	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        override def token: Parser[Token] = ( $/;"	methods	line:39
tokens	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^        val tokens = new parser.lexical.Scanner(reader)$/;"	constants	line:388
tparams	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val tparams = cls.getTypeParameters.toList.map(tv => Name.Var(tv.getName))$/;"	constants	line:37
trace	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        private[this] def trace(cvis: asm.ClassVisitor) = {$/;"	methods	line:127
tref	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tref: OptionalTypeRef \/\/ n.b.: Remains optional after lowering!$/;"	methods	line:308
tuple	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tuple = positioned($/;"	constants	line:298
tupleLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleLocal = positioned($/;"	constants	line:218
tupleParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleParam = positioned($/;"	constants	line:209
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:716
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Ty]) = ()$/;"	methods	line:737
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def tupleTy(tys: List[Type.Ref]) = Type.Tuple(tys)$/;"	methods	line:759
tupleTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^    def tupleTy(tys: List[Ty]): TyTuple$/;"	methods	line:57
tupleType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val tupleType = positioned($/;"	constants	line:239
tvar	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val tvar = tmpVarName(expr)$/;"	constants	line:742
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = body.stmts.last.ty$/;"	methods	line:636
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = returnTy(data)$/;"	methods	line:582
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = rvalue.ty$/;"	methods	line:542
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = symTy(sym)$/;"	methods	line:343
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = symTy(sym)$/;"	methods	line:358
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = symTy(sym)$/;"	methods	line:557
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty = tupleTy(exprs.map(_.ty))$/;"	methods	line:485
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:290
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:311
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:433
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:456
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:469
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: Ty$/;"	methods	line:474
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def ty: TyTuple = tupleTy(lvalues.map(_.ty))$/;"	methods	line:294
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = outStmts.last.ty$/;"	constants	line:897
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = stmts.last.ty$/;"	constants	line:255
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = symbolType(tref)$/;"	constants	line:531
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                    val ty = symbolType(tref)$/;"	constants	line:863
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^                val ty = stmts.last.ty$/;"	constants	line:292
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = Type.Class(Name.Qual(expr.obj.getClass), List())$/;"	constants	line:614
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:778
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val ty = symbolType(expr.typeRef)$/;"	constants	line:922
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Path.scala	/^        def ty: Type.Ref$/;"	methods	line:19
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Ref$/;"	methods	line:8
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def ty: Type.Tuple = Type.Tuple(patterns.map(_.ty))$/;"	methods	line:26
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def ty(t: Type.Ref): Type.Ref = t match {$/;"	methods	line:21
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val ty = optExpTy.getOrElse(Type.Null)$/;"	constants	line:197
ty	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val ty: Type.Ref$/;"	constants	line:191
tyAst	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Lower.scala	/^            val tyAst = astType(env)(fromExpr, sym.ty)$/;"	constants	line:547
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeArg: PackratParser[out.TypeArg] = typeTypeArg | pathTypeArg$/;"	constants	line:252
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def typeArg(pair: (Name.Var, reflect.Type)): Option[Type.TypeArg] = pair match {$/;"	methods	line:11
typeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Subst.scala	/^    def typeArg(targ: Type.Arg): Type.Arg = targ match {$/;"	methods	line:28
typeArgsAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typeArgsAreEquatable(targ1: Type.Arg, targ2: Type.Arg): Boolean = {$/;"	methods	line:301
typeOfPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typeOfPath(path: Path.Ref) = typedPath(path).ty$/;"	methods	line:187
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeRef: PackratParser[out.TypeRef] = pathType | classType | tupleType$/;"	constants	line:237
typeRef	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^    def typeRef(ty: reflect.Type): Type.Ref = ty match {$/;"	methods	line:24
typeT	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val typeT = Type.Var(Path.This, Name.Var("T"))$/;"	constants	line:181
typeTypeArg	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val typeTypeArg = positioned($/;"	constants	line:254
typeVarBounds	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        private[this] def typeVarBounds(tyVar: Type.Var) = {$/;"	methods	line:222
typedBase	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^            val typedBase = typedPath(base)$/;"	constants	line:180
typedPath	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typedPath(path: Path.Ref): Path.Typed = path match {$/;"	methods	line:173
typesAreEquatable	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def typesAreEquatable(ty1: Type.Ref, ty2: Type.Ref): Boolean = {$/;"	methods	line:337
typesAreEquatable1	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    private[this] def typesAreEquatable1(pair: (Type.Ref, Type.Ref)): Boolean = {$/;"	methods	line:315
ubs	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Reflect.scala	/^            val ubs = wt.getUpperBounds$/;"	constants	line:14
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def unapply(lv: TupleLvalue) = Some((lv.lvalues, lv.ty))$/;"	methods	line:325
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Ast.scala	/^        def unapply(lv: VarLvalue) = Some((lv.annotations, lv.tref, lv.name, lv.sym))$/;"	methods	line:328
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonTuple) = Some(anon.patterns)$/;"	methods	line:31
unapply	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def unapply(anon: AnonVar) = Some(anon.ty)$/;"	methods	line:21
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def undent() {$/;"	methods	line:27
undent	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def undent(): Unit$/;"	methods	line:5
upperBoundType	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^    def upperBoundType(ty: Type.Ref) = new Bounder(TcSub).compute(ty)$/;"	methods	line:253
usage	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    private[this] def usage(err: PrintStream) {$/;"	methods	line:24
useReflection	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    var useReflection = true$/;"	local variables	line:21
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/AsyncBlock.java	/^    public R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Block.java	/^    R value(A argument);$/;"	method	line:6
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requirement.java	/^  public String value();$/;"	method	line:4
value	/Users/niko/git/intervals-java/Harmonic/src/harmonic/lang/Requires.java	/^    public Requirement[] value();$/;"	method	line:4
varLocal	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varLocal = positioned($/;"	constants	line:221
varName	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varName = positioned($/;"	constants	line:87
varParam	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val varParam = positioned($/;"	constants	line:212
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = List(ty)        $/;"	methods	line:17
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys = patterns.flatMap(_.varTys)$/;"	methods	line:27
varTys	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Pattern.scala	/^        def varTys: List[Type.Ref]$/;"	methods	line:9
version	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Config.scala	/^    val version = "1.0"$/;"	constants	line:9
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Env.scala	/^        val visited = new mutable.HashSet[T]()$/;"	constants	line:37
visited	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Symbol.scala	/^        val visited = new mutable.HashSet[Symbol.Class]()$/;"	constants	line:209
voidClass	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidClass = classOf[java.lang.Void]$/;"	constants	line:69
voidTy	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Intrinsic.scala	/^        val voidTy = Type.Class(voidClass)$/;"	constants	line:81
wcRel	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Parse.scala	/^    lazy val wcRel = ($/;"	constants	line:169
we	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^                    \/\/ Check that we got (at least) the class we expected to find:$/;"	classes	line:95
while_	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/IntrinsicControlFlow.java	/^    public static Void while_($/;"	method	line:59
will	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^          * onto the bytecode stack.  The class will have fields$/;"	classes	line:802
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        \/** Returns an access map for a method-local class with$/;"	classes	line:728
with	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/CompilationState.scala	/^    \/** True if a class with the name `qualName` has been$/;"	classes	line:63
withPosOf	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Util.scala	/^    def withPosOf[P <: Positional, Q <: Positional](from: P, to: Q): Q = {$/;"	methods	line:10
withStashSlot	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        def withStashSlot(func: (Int => Unit)) {$/;"	methods	line:297
withSuffix	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/Name.scala	/^        def withSuffix(suffix: String) = rev_components match {$/;"	methods	line:17
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, implSuffix)$/;"	constants	line:1056
wr	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val wr = new ClassWriter(csym.name, noSuffix)$/;"	constants	line:1034
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def write(fmt: String, args: Any*) {$/;"	methods	line:30
write	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def write(fmt: String, args: Any*): Unit$/;"	methods	line:6
writeClassSymbol	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeClassSymbol(csym: Symbol.ClassFromSource) = {$/;"	methods	line:1076
writeForwardingMethodIfNeeded	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeForwardingMethodIfNeeded($/;"	methods	line:888
writeInterClassImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterClassImpl(csym: Symbol.ClassFromSource) {$/;"	methods	line:1055
writeInterClassInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterClassInterface(csym: Symbol.ClassFromSource) {$/;"	methods	line:1033
writeInterMethodImpl	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterMethodImpl($/;"	methods	line:974
writeInterMethodInterface	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^    def writeInterMethodInterface($/;"	methods	line:957
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^        override def writeln(fmt: String, args: Any*) {$/;"	methods	line:37
writeln	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/PrettyPrinter.scala	/^    def writeln(fmt: String, args: Any*): Unit$/;"	methods	line:7
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^                    val writer = new java.io.FileWriter(sFile)$/;"	constants	line:133
writer	/Users/niko/git/intervals-java/Harmonic/src/harmonic/compiler/ByteCode.scala	/^        val writer = new asm.ClassWriter(0)$/;"	constants	line:145
